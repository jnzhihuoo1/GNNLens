{"version":3,"sources":["components/logo2.png","components/DataRuns/FeatureMatrixView/reorder.v1.js","components/DataRuns/PSView/d3.parsets.js","components/DataRuns/ProjectionView/d3-lasso.js","components/DataRuns/ProjectionView/tsne.js","helper/index.tsx","components/DataRuns/GraphView/GraphViewSettingsModal.tsx","actions/index.tsx","constants/index.tsx","container/GraphViewSettingsModalContainer.tsx","components/DataRuns/GraphView/CanvasDrawing.tsx","components/DataRuns/GraphView/ForceDirectedGraphCanvas.tsx","container/ForceDirectedGraphCanvasContainer.tsx","components/DataRuns/GraphView/GraphView.tsx","components/DataRuns/GraphView/index.tsx","container/GraphViewContainer.tsx","components/DataRuns/FeatureMatrixView/Matrix.tsx","container/MatrixContainer.tsx","components/DataRuns/FeatureMatrixView/BrushBarChart.tsx","container/BrushBarChartContainer.tsx","components/DataRuns/FeatureMatrixView/IndentedList.tsx","container/IndentedListContainer.tsx","components/DataRuns/FeatureMatrixView/VerticalSlider.tsx","container/VerticalSliderContainer.tsx","components/DataRuns/FeatureMatrixView/FeatureMatrixView.tsx","components/DataRuns/FeatureMatrixView/index.tsx","container/FeatureMatrixContainer.tsx","service/dataService.tsx","components/DataRuns/ControlPanel/DataSelector.tsx","container/DataSelectorContainer.tsx","components/DataRuns/ControlPanel/ModelSelector.tsx","container/ModelSelectorContainer.tsx","components/DataRuns/ControlPanel/ControlPanel.tsx","components/DataRuns/ControlPanel/index.tsx","container/ControlPanelContainer.tsx","components/DataRuns/PSView/ParallelSets.tsx","container/ParallelSetsContainer.tsx","components/DataRuns/PSView/PSViewNodeStatistic.tsx","container/PSViewNodeStatisticContainer.tsx","components/DataRuns/PSView/PSSettingsModal.tsx","container/PSSettingsModalContainer.tsx","components/DataRuns/PSView/index.tsx","components/DataRuns/PSView/PSView.tsx","container/PSViewContainer.tsx","components/DataRuns/ProjectionView/ProjectionView.tsx","components/DataRuns/ProjectionView/ProjectionViewNodeStatistic.tsx","container/ProjectionViewNodeStatisticContainer.tsx","components/DataRuns/ProjectionView/HCluster.tsx","components/DataRuns/ProjectionView/ProjectionViewComputing.tsx","components/DataRuns/ProjectionView/SelectedNodeList.tsx","container/SelectedNodeListContainer.tsx","components/DataRuns/index.tsx","components/DataRuns/DataRuns.tsx","container/DataRunsContainer.tsx","components/App.tsx","serviceWorker.ts","reducer/index.tsx","index.tsx"],"names":["module","exports","science","require","Queue","reorder","version","isNum","a","b","isNaN","Infinity","inverse_permutation","perm","dense","inv","Array","length","i","graph_empty_nodes","n","nodes","id","debug","cmp_number_asc","cmp_number","cmp_number_desc","flatten","concat","infinities","arguments","apply","this","prototype","slice","call","array1d","v","dot","lin","normalize","zeroes","displaymat","mat","rowperm","colperm","j","row","str","console","log","printvec","prec","line","toFixed","printmat","m","assert","msg","printhcluster","cluster","indent","left","join","dist","right","mean","stats","meantranspose","NaN","meancolumns","o","sum","s","distance","euclidean","x","Math","sqrt","manhattan","abs","minkowski","p","pow","chebyshev","max","hamming","d","jaccard","braycurtis","ai","bi","s0","s1","range","start","stop","step","push","transpose","transposeSlice","end","correlation","pearson","dx","dy","ma","mb","s2","s3","min","pearsonMatrix","matrix","ret","cor","bandwidth","graph","order","e","links","source","index","target","edgesum","permutation","directed","edges","inEdges","outEdges","components","linkDistance","nodes_indices","map","generate_nodes","links_indices","l","init","undefined","weight","value","node","degree","inDegree","outDegree","sinks","sources","neighbors","other","ccomp","stack","comp","comps","shift","sort","compute_components","graph_random_erdos_renyi","graph_empty","graph_complete","w","lr","lp","random","floor","graph_random","complete_graph","graph_connect","bfs","fn","v2","q","discovered","bfs_distances","c","all_pairs_distance_bfs","reduce","count_crossings","north","south","firstIndex","treeSize","tree","crosscount","invert","filter","tmp","south_inv","southsequence","count_in_crossings","iv","iw","p0","v_edges","w_edges","cross","count_out_crossings","median","rm","lm","rspan","lspan","all_pairs_distance_floyd_warshall","k","build_dist","u","forEach","distmat2valuemat","distmat","valuemat","max_dist","distmax","calculateCentroid","c1Size","c1Centroid","c2Size","c2Centroid","newCentroid","newSize","norm","decorana","dat","aidot","adotj","nr","nc","sumcol","sumcols","sumrow","sumrows","y","mi","tot","icount","ay","ex","a11","a12","a22","a23","a33","a34","a44","res","ax1","ax2","ax3","ax4","b13","b14","b24","tol","y2","y3","y4","y5","trans","solve_tridiag","aymax","aymin","yxmult","axlong","sqr","ax","sumsq","sd","sd1","rows","cols","eig","eigy","yy","prt","xymult","itimes","axx1","axx2","axx3","axx4","exx","resi","abs_matrix","pcp_flip_axes","naxes","pcor","sign","signs","negs","mat2graph","max_value","Number","NEGATIVE_INFINITY","graph2mat","adjacent_exchange","layer1","layer2","c0","c1","inv_layer1","inv_layer2","swapped","improved","barycenter_order","max_iter","orders","barycenter","crossings","iter","best_layer1","best_layer2","best_crossings","best_iter","layer","med","inv_layer","inv_neighbor","barycenter_sort","all_pairs_distance","distances","floyd_warshall_with_path","next","floyd_warshall_path","path","graph2valuemats","valuemats_reorder","valuemats","leaforder","permute","vectors","distMatrix","distmin","dist_remove","splice","randomPermute","array","t","randomPermutation","random_array","random_matrix","sym","cnt","list","copy","permute_inplace","permutetranspose","indexes","stablepermute","reverse","sort_order","sort_order_ascending","sort_order_descending","hcluster","linkage","c2","c1Cluster","c2Cluster","root","dMin","cSize","clusters","error","centroid","size","depth","newCluster","distanceMatrix","optimal_leaf_order","leavesMap","orderMap","leaves","_leaves","key","r","L","R","indexOf","Wl","Wr","Ks","Xl","Xr","Ls","optimal_order","w_min","x_min","_order","orderFull","so","hcluster_result","distance_matrix","vector","ordering","except","low","high","i0","j0","orig","_order_except","_compute_dist","_order_limits","pos","_order_equiv","has_1","equiv","fix_except","unshift","_fix_exception","_perm_insert","len","_swap","nv","limits","orderrowsexcept","orderexcept","covariance","covariancetranspose","cov","variancecovariance","laplacian","lap","poweriteration","eps","poweriteration_n","bk","eigenvalue","fiedler_vector","B","g","gershgorin_bound","Bhat","spectral_order","vec","pca1d","v1","center","pca_order","ca_decorana","ca","ca_order","details","cuthill_mckee","min_deg","visited","queue","edge","reverse_cuthill_mckee","cuthill_mckee_order","reverse_cuthill_mckee_order","condition","array_to_dicts","data","axes","dict","dicts_to_array","dicts","keys","Object","pcp","tdata","abs_pcor","parcoords","detectDimensions","autoscale","types","dimensions","discarded","getTime","flip","d3","autoDimensions","cancelEvent","event","stopPropagation","preventDefault","dimensionName","name","getTotal","categories","count","parsets","value_","width","height","tension0","dispatch","dimensions_","dimensionFormat","String","tooltip_","defaultTooltip","categoryTooltip","defaultCategoryTooltip","spacing","tension","duration","d3_rebind","method","d3_functor","selection","each","total","ribbon","ribbonEnter","select","ordinal","scaleOrdinal","dragging","dimensionNames","children","window","on","parsetsId","unhighlight","selectAll","enter","append","attr","dimension","cache","hasOwnProperty","compareY","split","buildTree","dim","domain","layout","dEnter","merge","y0","x0","textEnter","text","dimensionFormatName","drag","remove","updateCategories","updateRibbons","transition","translateY","tween","ribbonTweenY","ribbonPath","sortBy","exit","updateDimensions","tensionTween","interpolateNumber","type","f","direction","__direction","major","mouse","mouseEnter","unselectedRibbon","classed","highlight","showTooltip","highlightAndSelect","ribbonPathStatic","ribbonTweenX","ancestors","recurse","parent","active","parentNode","appendChild","tooltip","style","category","categoryEnter","textContent","getComputedTextLength","lo","hi","mid","getSubStringLength","substr","truncateText","rebind","_","body","html","ease","parsetsEase","nd","rollup","child","in","out","ribbonPathString","sx","sy","sdx","tx","ty","tdx","m0","m1","percent","format","comma","easeElastic","zeroCounts","targetArea","items","closePathDistance","closePathSelect","isPathClosed","hoverSelect","draw","lasso","_this","tpath","origin","torigin","drawnCoords","dyn_path","close_path","origin_node","dragAction","__lasso","possible","selected","loopSelect","box","getBoundingClientRect","lassoPoint","round","top","sourceEvent","touches","clientX","clientY","close_draw_path","classifyPoint","possibleItems","selectedItems","notPossibleItems","notSelectedItems","tsnejs","REVISION","global","message","getopt","opt","field","defaultval","return_v","v_val","randn","mu","std","gaussRandom","zeros","ArrayBuffer","arr","Float64Array","randn2d","uses","xhere","L2","x1","x2","D","x1i","x2i","d2p","perplexity","Nf","N","Htarget","P","prow","betamin","betamax","beta","done","num","psum","pj","exp","Hhere","Pout","N2","tSNE","epsilon","initDataRaw","X","dists","xtod","initSolution","initDataDist","Y","gains","ystep","getSolution","cg","costGrad","cost","grad","ymean","gid","sid","gainid","newgain","newsid","debugGrad","yold","cg0","cg1","analytic","numerical","pmul","Qu","qsum","dsum","dhere","qu","NN","Q","gsum","premult","lib","d3_10color","GREEN","RED","getCoraNodeColor","node_label","color_encode","constructNeighborSet","graph_in","senders","receivers","node_num","feature","NeighborSet","nowreceiver","getTrainColor","node_id","train_set","has","getNodeStatisticStr","selectedNodeLength","totalNodeLength","defaultCheckedList","compareSelectedNodeIdList","list_a","list_b","cropAnchorsList","anchors_list","K_value","anchor_similarity","normalized","getLabelDistribution2","node_list","num_classes","node_info","fill","label","anchor_label","getNodeColorInfo","graph_target","individual","selected_models_list","train_mask_set","ground_truth_label","node_features","color","graph_out","addRange","binningContinuousVariable","continuous_variable_list","bucket_num","nodenum","distribution","new_key","parseFloat","compare_number","range_list","prev_range","current_range","single_bucket_count","this_range","assign","getContinuousVariableCategory","value_list","getDegreeCategory","degree_list","getMaxComponent","label_list","max_index_list","skew_weight","range_min","range_max","GraphViewSettingsModal","props","handleOk","changeGraphViewSettingsModal_visible","handleCancel","handleUnfocusedNodesChange","checked","GraphViewState","changeGraphViewState","DisplayUnfocusedNodes","handleOverviewChange","DisplayOverview","state","title","visible","GraphViewSettingsModal_visible","onOk","onCancel","footer","onClick","onChange","React","changeMatrixFilters","MatrixFilters","matrixFilters","changePSSettingsModal_visible","PSSettingsModal_visible","changeK_value","changeSelectedModels","changePSDimensions","PSDimensions","changeShowSource","showSource","connect","state_dict","drawRectStroke","context","strokeColor","beginPath","strokeStyle","rect","stroke","drawRect","fillColor","opacity","fillStyle","globalAlpha","fillRect","drawCircleStroke","radius","lineWidth","arc","PI","drawCircle","alpha","original_globalAlpha","drawOnePie","startAngle","endAngle","moveTo","closePath","drawLine","y1","linewidth","lineTo","drawNodeGlyph","colorlist","inner_radius","outer_radius","enableStroke","outer_arc_encoded_value","enable_alpha_mode","length_model","last_index","step_angle","current_angle","start_angle","end_angle","angle","cos","sin","legend_line_style","ForceDirectedGraphCanvas","global_simulation","saved_transform","refresh_number","updateTransform","bind","renderCanvas","prevProps","prevState","graph_json","transform","legend_color_svg","colorLegend","row_legend_color","g_row_legend_color","legend_configuration","radius_gap","pieName","pie_name","models_length","legend_pie_y","top_svg","legend_svg","arc_data","arcs","pie","ori_arcs","legend_text_setting","y_offset_list","max_pie_text_length","legend_width","legend_pie_all","legend_pie","legend_Color","background_enter","background","innerRadius","outerRadius","getArc","start_point","middle_point","end_point","nodelist","note","constructPathOnNodeList","gt_x","gt_y","max_text_length","legend_color_width","legend_color_height","legend_color_y","legend_rect","renderColorLegend","onNodeClick","enabledForceDirected","enable_forceDirected","neighborSet","pieLegend","configuration","graphWidth","getContext","middleCanvas","middle_context","overview_context","eventCanvas","canvasX","canvasY","canvasXRight","canvasYBottom","radius_collision","simulation","forceSimulation","force","forceCenter","forceX","strength","forceY","forceManyBody","forceLink","forceCollide","alphaTarget","alphaDecay","renderLegend","calTransform","order_determine","hover_cons_a","hover_cons","hover_cons_b","judgeHoveredFlag","bool","hiddenTooltip","zoomIdentity","tempData","event_canvas","mouseCoordinates","determineSubject","mouse_x","mouse_y","invertX","invertY","newNodeList","outer_radius_node","determineEventSubject","handleMouseMove","xy","obj","defaultUpdateFlag","updateFlag","event_subject","target_id","target_title","neighbor_id","hovered","middleCanvasSimulationUpdate","rectInverseTransform","rect_configuration","rect_x","rect_y","rect_width","rect_height","scale","pointInverseTransform","point_configuration","point_x","point_y","moveFocalPoint","ori_point","ori_inverse_point","overview_point","overview_inverse_point","new_x","new_y","simulationUpdate","renderContext","node_inner_radius","node_radius","node_outer_radius","node_outer_arc_encoded_value","node_weight","save","clearRect","translate","restore","graph_bounding_box","minx","miny","maxx","maxy","flag","glyph_outer_radius","margin","calculateGraphBoundingBox","canvasWidth","canvasHeight","bounding_box","leftbound","upperbound","occupyHeight","occupyWidth","xscale","yscale","calculateTransform","overview_inverse_rect","overview_bounding_box","view_configuration","rectTransform","rightbound","lowerbound","inverse_transform_rect","transformed_leftbound","transformed_upperbound","transformed_rightbound","transformed_lowerbound","clipwidth","clipheight","rectInverseTransformAndClip","judgeHovered","real_color","defaultPrevented","zoom","scaleExtent","className","xmlns","Option","Select","GraphView","prevGraphJson","onEnableForceDirected","onExtendedModeChange","onChangeSelectInspectNode","enableForceDirected","nextProps","nextState","changeSelectInspectNode","changeExtendedMode","graph_object","show_mode","explained_node","selectedNodeIdList","select_inspect_node","subgraph_index","sp_subgraphs","selectedmodelsStr","common","subgraphs","subgraph_list","subgraph_name","subgraph_mode","selectStr","graph_name","dataset_id","data_type_id","new_graph_layout","graph_layout","mask","Set","train","xmin","xmax","ymin","ymax","nowx","nowy","get_boundingbox","realwidth","realheight","gap_x","gap_y","realscale","locx","locy","transform_graphlayout","data_type","source_list","target_list","enablePrevGraphLayout","edge_num","nodes_json","links_json","links_color_json","prediction_label","subnode_index","node_object","link_color","eweight","graph_info","graph_additional_info","num_class","idx_to_class","getColorLegend","setState","new_selectedNodeIdList","nodeId","from","new_node_id","parseInt","extendedMode","specificNodeIdList","ForceDirectedWidth","ForceDirectedHeight","constructExtendedSelectedNodeIdList","changeSpecificNodeIdList","constructGraphJson","extendedOptions","found_extendedOptions","subg_type_id","overflowX","float","GraphViewSettingsModalContainer","placeholder","showGraphViewSettingModal","SettingOutlined","ForceDirectedGraphCanvasContainer","selectedMessagePassingNodeIdList","changePrevGraphJson","Matrix","TAB","renderD3","feature_matrix_json","refreshnumber","MatrixRowFilters","layout_config","y_axis","y_axis_info","x_axis","selectedFeatureTitle","color_info","highlight_flag","matrixRowFilters","transformYaxis","row_filters","new_y_axis","max_row_num_block","y_axis_color","indexFilters","rowFilters","newData","rowTest","rowMap","curr_row_id","transformDataTwoFilters","transformDataOneFilter","buckets","colors","gridSize","final_data","fakedata","constructFakeData","data_max","data_min","svg","y_axis_labels","transform_x","transform_y","y_axis_label_enter","tooltip_nodetitle","pageY","pageX","outer_circles_enter","outer_circles","inner_circles_enter","inner_circles","overall_background","background_enter_update","x_axis_label","x_axis_label_enter","color_domain","scaleLinear","cards","y_value","BrushBarChart","updateMatrixFilters","filters","matrixfilters","brush","ref_data","nbFt","fdata","selectedFeatureStatistics","scaleBand","padding","ft","brushX","extent","move","ratio","mini_bars","insert","updateMiniBars","hierarchy","IndentedTree","changeMatrixRowFilters","indentedList","barHeight","level","node_title","IndentedList","d3_slider","VerticalSlider","node_start_index","node_max_index","changeNodeStartIndex","sliderVertical","sliderLeft","displayValue","default","handle","symbol","symbolCircle","val","gVertical","FeatureMatrixView","onAxisChange","onDistanceChange","onDataSourceChange","onColorEncodeChange","onEnableSort","axis_select","distance_select","dataSource_select","enableSorting","feature1","feature1_value","feature2","feature2_value","len1","len2","index2","norm1","norm2","dis","PathDict","select_node","max_level","additional_params","features","features_value","alreadyVisitedNodesId","alreadyVisitedNodesInfo","current_node","current_node_id","current_node_level","succnodes","succ_level","succ_id","cos_distance","calculateFeatureCosDistance","KFS","anchor_id","row_id","edge_weight","next_row_id","succnode_id_list","succnode","local_edge_weight","children_package","constructIndentedTree","indentedTreeNode","selectedIndetendedTreeId","sequentialIndentedTree","data_package","sequentialIndentedTreeToList","params","num_nodes","row_dist","node1","node2","leafOrder","permuted_mat","distance_list","pre_selected_feature_stats_index","pre_selected_feature","featureDistanceMatrix","num_features","feature_mat","calculateFeatureDistance","max_col_num_block","selectedStr","selectedModelStr","feature_ranking_list","feature_ranking","fr_name","key_model_name","explaination_type","graph_explaination","feature_value","getNodeColorInfoFull","constructIndentedListFromKFS","selectedFeature","selectedFeatureAddInfo","getArray","result_package","hclusterSortingSelectedNode","node_end_index","pre_selected_feature_stats","pre_selected_feature_order","pre_selected_feature_order_list","pre_selected_feature_prediction_label_distribution","currentSelect","GCN_prediction_label","feature_index","total_num","pre_selected_feature_add_info","fr_list","current_feature","inspect_node","sort_selected_feature_stats","first","cf_idx","pro","freq","inspect_node_GCN_prediction_label","sort_selected_feature_order","value1","value2","minlen","value_package","selectedNodeColor","selectedFeatureLabel","idx_to_attr","x_axis_data","y_axis_data","idx_to_node_title","x_axis_color","display","verticalSliderConfig","explanation_type","indentedtreeWidth","matrixRealWidth","indentedtreeBarHeight","verticalSliderHeight","constructFeatureMatrixJson","FeatureMatrixHeight","BrushBarChartLayoutConfig","MatrixLayoutConfig","IndentedTreeLayoutConfig","VerticalSliderLayoutConfig","onSelectSort","getOptionValue","SortOptions","fr_id","BrushBarChartContainer","MatrixContainer","IndentedListContainer","VerticalSliderContainer","URL","location","axiosInstance1","axios","create","baseURL","headers","URL2","axiosInstance","getDatasetList","url","get","status","getGraphInfo","model_id","explain_id","graph_id","getGraphBundledInfo","DataSelector","onDatasetSelectorChange","initDatasetList","datasetList_package","changeDataset","disabledDatasetSelector","datasetList","span","disabled","clearIdInfo","ModelSelector","onModelSelectorChange","disabledModelsSelector","models_list","nlabel_options_indexed","nlabel_object","mode","allowClear","defaultValue","RadioGroup","Radio","Group","RadioPlainOptions","plainOptions","ControlPanel","min_K_value","max_K_value","handleKvalueChange","onChangeRadioCategory","categoryList","selectedValue","options","onChangeInspectCategoryList","radio_value","transformCategoryList","InspectCategoryList","DataSelectorContainer","ModelSelectorContainer","inspectCategoryList","ParallelCoordinates","onRibbonClick","clearFilter","onCategoryClick","PSJson","comparePSDimensions","changeFilters","prev","current","PSData","chart_dimensions","chart","csv","datum","ParallelSets","PSViewNodeStatistic","PSSelectedNodes","totalNodeNum","PSSettingsModal","PSSettingModal_visible_setting","handleChange","CandidatePSDimensions","DefaultPSDimensions","PSSettingModal_visible","PSView","prev_bundle_id","CheckedList","CheckedList_str","Selected_models_str","shortest_path_distance_package","feature_similarity_list","selected_mask","train_mask","test_mask","test","valid_mask","valid","all_mask","other_mask","constructSelectedMask","individual_model_names","meta_package","cn_table","cgt","cpt","ngt","npt","one_hop_accuracy_list","cn_consistency_list","one_hop_accuracy","center_node_gt","center_node_pt","cn","correctnum","nownode","constructMetaInformation","SPD","degree_range_list","degree_distribution","degree_key","new_degree_key","constructDegreeRangeList","P1_correctness","All_correctness","P1_one_hop_accuracy","SPD_consistency_name","KFS_consistency_name","Distance_name","Default_PSColumns","PSColumns","SPD_distribution_name","KFS_distribution_name","whole_correct_num","ground_truth_label_stats","P1_confidence","getLabelName","node_json","gcn_prediction_label","gcn_confidence","output_vector","train_nodes","model_name","GCN_Confidence_range_list","CN_list","SPD_list","KFS_list","GCN_Confidence_list","CN_range_list","SPD_range_list","KFS_range_list","cn_consistency","spd","kfs","spd_label","kfs_label","maxtotal","PSWidth","onExplainNodeChange","onShowModeChange","PSHeight","constructPSJson","checkedList","changePSJson","current_bundle_id","showPSSettingModal","PSSettingsModalContainer","PSViewNodeStatisticContainer","gutter","ParallelSetsContainer","d3_lasso","ProjectionView","point_array","additional_info","model","mappingGraph","onSelectedNodeListChange","handleTitleMouseOut","handleTitleMouseMove","handleGlyphMouseMove","handleGlyphMouseOut","showMode","dataPackage","layoutMode","enableLegends","renderInViewLegend","selectedNodeList","highlightNodeIdList","onChangeHighLightNodeIdList","rawNodeList","hoveredNodeIdList","onChangeHoveredNodeIdList","onHoveredNodeListChange","stroke_width","node_enter","enable_size","getArcConf","getSizeScale","outer_circles_enter_update","fill_color_index","s_scale","Color","ori_arcs_conf","overall_background_conf","inner_circles_enter_update","legend_x","legend_y","legned_scale","legend_conf","key_model_confidence","last_fill_index","legend_data_point","Data_id","renderGlyphGT3PT","max_degree","getXY","nclass","polyradius","constructPointStrFromData","dataValues","coordinates","pointstr","pti","constructPointStr","Real_Degree","CN_consistency","cgt_ngt","cgt_npt","cpt_ngt","cpt_npt","bg_line_enter","bg_lines","polygon_enter","polygons","polygon_enter_update","legend_scale","renderGlyphDEGCN","rect_scale","outer_rects_enter","outer_rects","outer_rects_enter_update","rect_gap","gnnrect_enter","gnnrects","gnnrect_enter_update","rect_enter","rects","culmulative_proportion","Spd_node_info","line_enter","lines","line_enter_update","Transformed_Distance","gnngap_enter","gnngaps","gnngap_enter_update","legend_spd_info","legend_transformed_distance","legend_num_class","renderGlyphP1SPD","point_list","wrapLines","Topkfs_node_info","word","words","lineNumber","lineHeight","pop","legend_kfs_info","renderGlyphP1KFS","tooltip_svg","legendMode","renderLegendGT3PT","color_svg","renderLegendDEGCN","renderLegendP1SPD","renderLegendP1KFS","svgWidth","svgHeight","tooltip_proj","data_point","spd_desc_info","kfs_desc_info","x_coord","y_coord","meta_text","legend_Topkfs_nodes","legend_Topkfs_node_info","new_return_result","raw_id_list","new_highlight_node","legendWidth","legend_top_svg","legend_glyph_y","legendHeight","legend_height","top_top_svg","legend_top_top_svg","clip_name","clip_path_name","node_enter_update","handleGlyphMouseMoveBridge","centerx","centery","renderLines","enable_lasso_selection","getEmbedding","ticked","lasso_start","lasso_draw","lasso_end","return_result","selectedItemsData","updateSingleHighlightNodeStatus","UMAP","nComponents","distanceFn","x_indices","y_indices","nNeighbors","initializeFit","initial_x","initial_y","updatefunc","ProjectionViewNodeStatistic","ProjectionViewSelectedNodes","ProjectionViewTotalNodeNum","HCluster","vector1","vector2","vector_type","limit_distance","clusterflag","id_list","valid_cluster","ProjectionViewComputing","CacheDataPackage","PCPJson","initialize_flag","cluster_selectedNodeIdIndex","cluster_highlightNodeIdDict","detail_highlightNodeIdList","cluster_hoveredNodeIdDict","detail_hoveredNodeIdList","cluster_rawHoveredNodeIdList","detail_rawHoveredNodeIdList","cluster_renderedLinesList","detail_renderedLinesList","cluster_hoveredLinesList","detail_hoveredLinesList","cluster_rawHighlightNodeIdList","detail_rawHighlightNodeIdList","aggregationMode","getDistance","initialize","checkinitialize","reset","getDataPackage","computeDistance","computeDistanceMatrix","updateHighlightNodeIdList","changeSelectedNodeNum","changeTotalNodeNum","selectedNodeNum","all_data_package","all_inverted_index","local_cluster_highlightNodeIdDict","renderedLinesCollection","line_package","line_name","cluster_id","renderedLinesList","corr_id","linepackage","updateSingleHighlightStatus","updateHighlightStatus","rawHighlightNodeIdList","calculateHighlightNodeIdList","updateFullHighlightStatus","rawHoveredNodeIdList","calculateHoveredNodeIdList","updateFullHoveredStatus","updateSingleHoveredStatus","updateHoveredStatus","hoveredNodes","constructSelectedNodeList","datapackage","new_selectedNodeIdIndex","new_selectedNodeList","new_matrix","aggregation","reconstructDataPackage","array1","array2","selected_node_info_a","selected_node_info_b","getSquareDistance","transformCNtoList","model_pred_label","columns","conf_a","conf_b","degree_a","degree_b","transformed_distance_a","transformed_distance_b","filterData","filters_key","dataInstance","filter_selectedNodeList","max_key","max_num","summation","new_columns","new_vector_type","new_node_list","aggregateSelectedNodeList","vector_summation","vector_length","total_topkfs_nodes","topkfs_nodes","matrix_row","enableLines","data_list","all_data","point_array_data","projectionWidth","successflag","hoveredLinesList","coords","startX","new_coords","connectionPath","lineGenerator","curve","curveNatural","selectedNodes","invertedIndex","corresponding_id_list","cluster_selectedNodeList","max_shortest_path_distance","Shortest_Path_Distance_to_Train_Nodes","selectednode","setlinkage","setDistMatrix","FilterData","transformClusterRoot","constructInvertedIndex","SelectedNodeList","prevSelectedNodeIdList","thisSelectedNodeIdList","InsProjectionViewComputing","onChangeLines","onChangeLegends","onLayoutModeChange","currentPage","changeSelectedNodeIdList","updateHoveredNodeIdList","updateNodeStatistic","changeProjectionViewSelectedNodes","changeProjectionViewTotalNodeNum","rawNodeIdList","projectionHeight","changePSSelectedNodes","updateAggregationMode","getRawHighlightNodeIdList","onChangeAggregationMode","ProjectionViewNodeStatisticContainer","DataRuns","Tabs","TabPane","PCPViewRef","GraphViewRef","FeatureMatrixViewRef","ControlPanelRef","ProjectionViewRef","onResizeStop","getLayoutConfigWithName","getCurrentLayoutConfig","onResize","screenWidth","screenHeight","innerHeight","innerWidth","getWholeLayoutConfig","changeLoadingDataset","changeModelsList","offsetWidth","offsetHeight","getGraphBundledData","contentHeight","contentWidth","ShowMode","ExplainedNode","modelList","max_row_num","PSPanelH","ProjectionPanelH","RH","h","static","loading_dataset","screenwidth","rowHeight","onLayoutChange","ref","PSViewContainer","generatePCPView","GraphViewContainer","generateGraphView","FeatureMatrixContainer","generateFeatureMatrixView","ControlPanelContainer","SelectedNodeListContainer","generateWholeView","Content","Layout","Header","App","ContentRef","createRef","updateLayoutState","contentLayout","getLayoutConfig","addEventListener","src","logo","alt-text","DataRunsContainer","Component","Boolean","hostname","match","initial_state","explainList","graphList","ProjectionViewSettingsModal_visible","FeatureMatrixViewSettingsModal_visible","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7193be71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.4b8ec5cf.png\";","var science = require(\"science\");\r\nvar Queue = require(\"tiny-queue\");\r\nvar reorder = {version: \"1.0.2\"}; // semver\r\n\r\nreorder.debug = false;\r\n// Use as: [4,3,2].sort(reorder.cmp_number_asc);\r\nreorder.cmp_number_asc = function(a,b) { return a-b; };\r\nreorder.cmp_number = reorder.cmp_number_asc;\r\n\r\n// Use as: [4,3,2].sort(reorder.cmp_number_desc);\r\nreorder.cmp_number_desc = function(a,b) { return b-a; };\r\n\r\n// Use as: [[4,3],[2]].reduce(reorder.flaten);\r\nreorder.flatten = function(a,b) { return a.concat(b); };\r\n\r\n// Constructs a multi-dimensional array filled with Infinity.\r\nreorder.infinities = function(n) {\r\n    var i = -1,\r\n\ta = [];\r\n    if (arguments.length === 1)\r\n\twhile (++i < n)\r\n\t    a[i] = Infinity;\r\n    else\r\n\twhile (++i < n)\r\n\t    a[i] = reorder.infinities.apply(\r\n\t\tthis, Array.prototype.slice.call(arguments, 1));\r\n    return a;\r\n};\r\n\r\nreorder.array1d = function(n, v) {\r\n    var i = -1,\r\n\ta = Array(n);\r\n    while (++i < n)\r\n\ta[i] = v;\r\n    return a;\r\n};\r\n\r\nfunction check_distance_matrix(mat, tol) {\r\n    var i, j, v1, v2, n = mat.length, row;\r\n    if (! tol)\r\n\ttol = 1e-10;\r\n\r\n    if (n != mat[0].length)\r\n\treturn \"Inconsistent dimensions\";\r\n    \r\n    for (i = 0; i < (n-1); i++) {\r\n\trow = mat[i];\r\n\tv1 = row[i];\r\n\tif (v1 < 0)\r\n\t    return \"Negative value at diagonal \"+i;\r\n\tif (v1 > tol)\r\n\t    return \"Diagonal not zero at \"+i;\r\n\tfor (j = 1; j < n; j++) {\r\n\t    v1 = row[j];\r\n\t    v2 = mat[j][i];\r\n\t    if (Math.abs(v1 - v2) > tol)\r\n\t\treturn \"Inconsistency at \"+i+\",\"+j;\r\n\t    if (v1 < 0)\r\n\t\treturn \"Negative value at \"+i+\",\"+j;\r\n\t    if (v2 < 0)\r\n\t\treturn \"Negative value at \"+j+\",\"+i;\r\n\t}\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction fix_distance_matrix(mat, tol) {\r\n    var i, j, v1, v2, n = mat.length, row;\r\n    if (! tol)\r\n\ttol = 1e-10;\r\n\r\n    if (n != mat[0].length)\r\n\tthrow \"Inconsistent dimensions \"+n+\" != \"+mat[0].length;\r\n    \r\n    for (i = 0; i < (n-1); i++) {\r\n\trow = mat[i];\r\n\tv1 = row[i];\r\n\tif (v1 < 0) {\r\n\t    if (-v1 > tol)\r\n\t\tthrow \"Negative value at diagonal\"+i;\r\n\t    v1 = row[i] = 0;\r\n\t}\r\n\telse if (v1 > tol) {\r\n\t    throw \"Diagonal not zero at \"+i;\r\n\t}\r\n\tfor (j = 1; j < n; j++) {\r\n\t    v1 = row[j];\r\n\t    v2 = mat[j][i];\r\n\t    if (Math.abs(v1 - v2) > tol)\r\n\t\tthrow \"Inconsistency at \"+i+\",\"+j;\r\n\t    if (v1 < 0)\r\n\t\tv1 = 0;\r\n\t    if (v2 < 0)\r\n\t\tv2 = 0;\r\n\t    if (v1 != v2) {\r\n\t\tv1 += v2;\r\n\t\tv1 /= 2;\r\n\t    }\r\n\t    row[j] = v1;\r\n\t    mat[j][i] = v1;\r\n\t}\r\n    }\r\n    return mat;\r\n}\r\nreorder.dot = science.lin.dot;\r\nreorder.length = science.lin.length;\r\nreorder.normalize = science.lin.normalize;\r\nreorder.zeroes = science.zeroes;\r\nreorder.displaymat = function(mat, rowperm, colperm) {\r\n    var i, j, row, col, str;\r\n    console.log('Matrix:');\r\n    for (i = 0; i < mat.length; i++) {\r\n\trow = rowperm ? mat[rowperm[i]] : mat[i];\r\n\tstr = \"\";\r\n\tfor (j = 0; j < row.length; j++) {\r\n\t    col = colperm ? row[colperm[j]] : row[j];\r\n\t    str += col ? '*' : ' ';\r\n\t}\r\n\tconsole.log(str);\r\n    }\r\n};\r\n\r\nreorder.printvec = function(row, prec, colperm, line) {\r\n    var j;\r\n    if (! line)\r\n\tline = \"\";\r\n    for (j = 0; j < row.length; j++) {\r\n\tif (line.length !== 0)\r\n\t    line += \", \";\r\n\tif (colperm)\r\n\t    line += row[colperm[j]].toFixed(prec);\r\n\telse\r\n\t    line += row[j].toFixed(prec);\r\n    }\r\n    console.log(line);\r\n};\r\n\r\nreorder.printmat = function(m, prec, rowperm, colperm) {\r\n    var i, j, row, line;\r\n    if (! prec) prec=4;\r\n    for (i = 0; i < m.length; i++) {\r\n\trow = rowperm ? m[rowperm[i]] : m[i];\r\n\treorder.printvec(row, prec, colperm, i+\": \");\r\n    }\r\n};\r\n\r\nreorder.assert = function(v, msg) {\r\n    if (! v) {\r\n\tconsole.log(msg);\r\n\tthrow msg || \"Assertion failed\";\r\n    }\r\n};\r\n\r\nreorder.printhcluster = function(cluster,indent) {\r\n    if (cluster.left === null) \r\n\treturn  Array(indent+1).join(' ')+\"id: \"+cluster.id;\r\n\r\n    return Array(indent+1).join(' ')\r\n\t+\"id: \"+cluster.id+\", dist: \"+cluster.dist+\"\\n\"\r\n\t+reorder.printhcluster(cluster.left, indent+1)+\"\\n\"\r\n\t+reorder.printhcluster(cluster.right, indent+1);\r\n};\r\nreorder.mean = science.stats.mean;\r\n\r\nreorder.meantranspose = function(v, j) {\r\n    var n = v.length;\r\n    if (n === 0) return NaN;\r\n    var o = v[0].length,\r\n\tm = 0,\r\n\ti = -1,\r\n\trow;\r\n\r\n    while(++i < n) m += (v[i][j] - m) / (i+1);\r\n\r\n    return m;\r\n};\r\n\r\nreorder.meancolumns = function(v) {\r\n    var n = v.length;\r\n    if (n === 0) return NaN;\r\n    var o = v[0].length,\r\n\tm = v[0].slice(0),\r\n\ti = 0,\r\n\tj, row;\r\n\r\n    while(++i < n) {\r\n\trow = v[i];\r\n\tfor (j = 0; j < o; j++)\r\n\t    m[j] += (row[j] - m[j]) / (i+1);\r\n    }\r\n\r\n    return m;\r\n};\r\n\r\nfunction sum(v) {\r\n    var i = v.length,\r\n\ts = 0;\r\n    while(i-- > 0)\r\n\tif (! isNaN(v[i]))\r\n\t    s += v[i];\r\n    return s;\r\n}\r\n\r\nreorder.sum = sum;\r\nfunction isNum(a, b) {\r\n    return !(isNaN(a) || isNaN(b) || a==Infinity || b == Infinity);\r\n}\r\nreorder.distance = {\r\n    euclidean: function(a, b) {\r\n\tvar i = a.length,\r\n            s = 0,\r\n            x;\r\n\twhile (i-- > 0) {\r\n\t    if (isNum(a[i], b[i])) {\r\n\t\tx = a[i] - b[i];\r\n\t\ts += x * x;\r\n\t    }\r\n\t}\r\n\treturn Math.sqrt(s);\r\n    },\r\n    manhattan: function(a, b) {\r\n\tvar i = a.length,\r\n            s = 0;\r\n\twhile (i-- > 0) {\r\n\t    if (isNum(a[i], b[i])) {\r\n\t\ts += Math.abs(a[i] - b[i]);\r\n\t    }\r\n\t}\r\n\treturn s;\r\n    },\r\n    minkowski: function(p) {\r\n\treturn function(a, b) {\r\n\t    var i = a.length,\r\n\t\ts = 0;\r\n\t    while (i-- > 0) {\r\n\t\tif (isNum(a[i], b[i])) {\r\n\t\t    s += Math.pow(Math.abs(a[i] - b[i]), p);\r\n\t\t}\r\n\t    }\r\n\t    return Math.pow(s, 1 / p);\r\n\t};\r\n    },\r\n    chebyshev: function(a, b) {\r\n\tvar i = a.length,\r\n            max = 0,\r\n            x;\r\n\twhile (i-- > 0) {\r\n\t    if (isNum(a[i], b[i])) {\r\n\t\tx = Math.abs(a[i] - b[i]);\r\n\t\tif (x > max) max = x;\r\n\t    }\r\n\t}\r\n\treturn max;\r\n    },\r\n    hamming: function(a, b) {\r\n\tvar i = a.length,\r\n            d = 0;\r\n\twhile (i-- > 0) {\r\n\t    if (isNum(a[i], b[i])) {\r\n\t\tif (a[i] !== b[i]) d++;\r\n\t    }\r\n\t}\r\n\treturn d;\r\n    },\r\n    jaccard: function(a, b) {\r\n\tvar n = 0,\r\n            i = a.length,\r\n            s = 0;\r\n\twhile (i-- > 0) {\r\n\t    if (isNum(a[i], b[i])) {\r\n\t\tif (a[i] === b[i]) s++;\r\n\t\tn++;\r\n\t    }\r\n\t}\r\n\tif (n === 0) return 0;\r\n\treturn s / n;\r\n    },\r\n    braycurtis: function(a, b) {\r\n\tvar i = a.length,\r\n            s0 = 0,\r\n            s1 = 0,\r\n            ai,\r\n            bi;\r\n\twhile (i-- > 0) {\r\n\t    ai = a[i];\r\n\t    bi = b[i];\r\n\t    if (isNum(ai, bi)) {\r\n\t\ts0 += Math.abs(ai - bi);\r\n\t\ts1 += Math.abs(ai + bi);\r\n\t    }\r\n\t}\r\n\tif (s1 === 0) return 0;\r\n\treturn s0 / s1;\r\n    }\r\n};\r\nreorder.range = function(start, stop, step) {\r\n    if (arguments.length < 3) {\r\n\tstep = 1;\r\n\tif (arguments.length < 2) {\r\n\t    stop = start;\r\n\t    start = 0;\r\n\t}\r\n    }\r\n    var range = [], i = start;\r\n    if (step < 0)\r\n\tfor (;i > stop; i += step)\r\n\t    range.push(i);\r\n    else\r\n\tfor (; i < stop; i += step)\r\n\t    range.push(i);\r\n    return range;\r\n};\r\nreorder.transpose = science.lin.transpose;\r\n\r\nreorder.transposeSlice = function(a, start, end) {\r\n    if (arguments.length < 3) {\r\n\tend = a[0].length;\r\n\tif (arguments.length < 2) {\r\n\t    start = 0;\r\n\t}\r\n    }\r\n    var m = a.length,\r\n\tn = end,\r\n\ti = start-1,\r\n\tj,\r\n\tb = new Array(end-start);\r\n    while (++i < n) {\r\n\tb[i] = new Array(m);\r\n\tj = -1; while (++j < m) b[i-start][j] = a[j][i];\r\n    }\r\n    return b;\r\n};\r\nreorder.correlation = {\r\n    pearson: function(a, b) {\r\n\tvar ma = science.stats.mean(a),\r\n\t    mb = science.stats.mean(b),\r\n\t    s1 = 0, s2 = 0, s3 = 0, i, dx, dy,\r\n\t    n = Math.min(a.length, b.length);\r\n\tif (n === 0)\r\n\t    return NaN;\r\n\tfor (i = 0; i < n; i++) {\r\n\t    dx = (a[i] - ma);\r\n\t    dy = (b[i] - mb);\r\n\t    s1 += dx*dy;\r\n\t    s2 += dx*dx;\r\n\t    s3 += dy*dy;\r\n\t}\r\n\treturn s1/Math.sqrt(s2*s3);\r\n    },\r\n    pearsonMatrix: function(matrix) {\r\n\tvar a, ma,\r\n\t    i, j, dx, \r\n\t    cor = reorder.correlation.pearson,\r\n\t    n = matrix.length, ret, mx, sx, sx2;\r\n\tif (n === 0)\r\n\t    return NaN;\r\n\t// do it the hard way for now, we'll optimize later\r\n\tret = reorder.zeroes(n, n);\r\n\tfor (i = 0; i < (n-1); i++) {\r\n\t    for (j = i+1; j < n; j++) {\r\n\t\tvar p = cor(matrix[i], matrix[j]);\r\n\t\tret[i][j] = ret[j][i] =p;\r\n\t    }\r\n\t}\r\n\treturn ret;\r\n\t// mx = Array(n);\r\n\t// sx = reorder.zeroes(n);\r\n\t// sx2 = reorder.zeroes(n);\r\n\t// for (i = 0; i < n; i++) {\r\n\t//     mx[i] = science.stats.mean(matrix[i]);\r\n\t// }\r\n\t// for (i = 0; i < n; i++) {\r\n\t//     a = matrix[i];\r\n\t//     ma = mx[i];\r\n\t//     for (j = 0; j < n; j++) {\r\n\t// \tdx = (a[j] - ma);\r\n\t// \tsx[j] += dx;\r\n\t// \tsx2[j] += dx*dx;\r\n\t//     }\r\n\t// }\r\n\t// for (i = 0; i < n; i++) {\r\n\t//     ret[i] = Array(n);\r\n\t//     for (j = 0; j < n; j++) {\r\n\t// \tret[i][j] = sx[i]*sx[j]/Math.sqrt(sx2[i]*sx2[j]);\r\n\t//     }\r\n\t// }\r\n\t// return ret;\r\n    }\r\n};\r\nreorder.bandwidth = function(graph, order) {\r\n    if (! order)\r\n\torder = reorder.range(graph.nodes().length);\r\n\r\n    var inv = inverse_permutation(order),\r\n\tlinks = graph.links(),\r\n\ti, e, d, max = 0;\r\n\r\n    for (i = 0; i < links.length; i++) {\r\n\te = links[i];\r\n\td = Math.abs(inv[e.source.index]-inv[e.target.index]);\r\n\tmax = Math.max(max, d);\r\n    }\r\n    return max;\r\n};\r\nreorder.edgesum = function(graph, order) {\r\n    if (! order)\r\n\torder = reorder.range(graph.nodes().length);\r\n\r\n    var inv = inverse_permutation(order),\r\n\tlinks = graph.links(),\r\n\ti, e, d, sum = 0;\r\n\r\n    for (i = 0; i < links.length; i++) {\r\n\te = links[i];\r\n\td = Math.abs(inv[e.source.index]-inv[e.target.index]);\r\n\tsum += d;\r\n    }\r\n    return sum;\r\n};\r\nreorder.permutation = reorder.range;\r\n\r\n\r\nfunction inverse_permutation(perm, dense) {\r\n    var inv = dense ? Array(perm.length) : {};\r\n    for (var i = 0; i < perm.length; i++) {\r\n\tinv[perm[i]] = i;\r\n    }\r\n    return inv;\r\n}\r\n\r\nreorder.inverse_permutation = inverse_permutation;\r\nreorder.graph = function(nodes, links, directed) {\r\n    var graph = {},\r\n        linkDistance = 1,\r\n        edges,\r\n\tinEdges, outEdges,\r\n\tcomponents;\r\n\r\n    graph.nodes = function(x) {\r\n\tif (!arguments.length) return nodes;\r\n\tnodes = x;\r\n\treturn graph;\r\n    };\r\n\r\n    graph.nodes_indices = function() {\r\n\treturn nodes.map(function(n) {\r\n\t    return n.index;\r\n\t});\r\n    };\r\n\r\n    graph.generate_nodes = function(n) {\r\n\tnodes = [];\r\n\tfor (var i = 0; i < n; i++)\r\n\t    nodes.push({id: i});\r\n\treturn graph;\r\n    };\r\n\r\n    graph.links = function(x) {\r\n\tif (!arguments.length) return links;\r\n\tlinks = x;\r\n\treturn graph;\r\n    };\r\n    graph.links_indices = function() {\r\n\treturn links.map(function(l) {\r\n\t    return { source: l.source.index,\r\n\t\t     target: l.target.index };\r\n\t});\r\n    };\r\n    graph.linkDistance = function(x) {\r\n\tif (!arguments.length) return linkDistance;\r\n\tlinkDistance = typeof x === \"function\" ? x : +x;\r\n\treturn graph;\r\n    };\r\n\r\n    graph.directed = function(x) {\r\n\tif (!arguments.length) return directed;\r\n\tdirected = x;\r\n\treturn graph;\r\n    };\r\n\r\n    function init() {\r\n\tvar i, o, n = nodes.length, m = links.length;\r\n\r\n\tcomponents = undefined;\r\n\tfor (i = 0; i < n; ++i) {\r\n\t    (o = nodes[i]).index = i;\r\n\t    o.weight = 0;\r\n\t}\r\n\r\n\tfor (i = 0; i < m; ++i) {\r\n\t    (o = links[i]).index = i;\r\n\t    if (typeof o.source == \"number\") o.source = nodes[o.source];\r\n\t    if (typeof o.target == \"number\") o.target = nodes[o.target];\r\n\t    if (! ('value' in o)) o.value = 1;\r\n\t    ++o.source.weight;\r\n\t    ++o.target.weight;\r\n\t}\r\n\r\n\tif (typeof linkDistance === \"function\")\r\n\t    for (i = 0; i < m; ++i)\r\n\t\tlinks[i].distance = +linkDistance.call(this, links[i], i);\r\n\telse\r\n\t    for (i = 0; i < m; ++i)\r\n\t\tlinks[i].distance = linkDistance;\r\n\r\n        edges = Array(nodes.length);\r\n        for (i = 0; i < nodes.length; ++i) {\r\n\t    edges[i] = [];\r\n        }\r\n\r\n\tif (directed) {\r\n            inEdges = Array(nodes.length);\r\n\t    outEdges = Array(nodes.length);\r\n            for (i = 0; i < nodes.length; ++i) {\r\n\t\tinEdges[i] = [];\r\n\t\toutEdges[i] = [];\r\n\t    }\r\n\t}\r\n\telse {\r\n\t    inEdges = outEdges = edges;\r\n\t}\r\n\r\n        for (i = 0; i < links.length; ++i) {\r\n\t    o = links[i];\r\n\t    edges[o.source.index].push(o);\r\n\t    if (o.source.index != o.target.index)\r\n\t\tedges[o.target.index].push(o);\r\n\t    if (directed)\r\n\t\tinEdges[o.source.index].push(o);\r\n\t    if (directed)\r\n\t\toutEdges[o.target.index].push(o);\r\n\t}\r\n\r\n\treturn graph;\r\n    }\r\n\r\n    graph.init = init;\r\n\r\n    graph.edges = function(node) { \r\n\tif (typeof node != \"number\") {\r\n\t    node = node.index;\r\n\t    if (reorder.debug) {\r\n\t\tconsole.log('received node %d', node);\r\n\t    }\r\n\t}\r\n\treturn edges[node]; \r\n    };\r\n\r\n    graph.degree = function(node) { \r\n\tif (typeof node != \"number\")\r\n\t    node = node.index;\r\n\treturn edges[node].length; \r\n    };\r\n\r\n    graph.inEdges = function (node) {\r\n\tif (typeof node != \"number\")\r\n\t    node = node.index;\r\n\treturn inEdges[node];\r\n    };\r\n\r\n    graph.inDegree = function(node) {\r\n\tif (typeof node != \"number\")\r\n\t    node = node.index;\r\n\treturn inEdges[node].length; \r\n    };\r\n\r\n    graph.outEdges = function(node) {\r\n\tif (typeof node != \"number\")\r\n\t    node = node.index;\r\n\treturn outEdges[node];\r\n    };\r\n\r\n    graph.outDegree = function(node) { \r\n\tif (typeof node != \"number\")\r\n\t    node = node.index;\r\n\treturn outEdges[node].length; \r\n    };\r\n\r\n    graph.sinks = function() {\r\n\tvar sinks = [],\r\n\t    i;\r\n\r\n\tfor (i = 0; i < nodes.length; i++) {\r\n\t    if (graph.outEdges(i).length === 0)\r\n\t\tsinks.push(i);\r\n\t}\r\n\treturn sinks;\r\n    };\r\n\r\n    graph.sources = function() {\r\n\tvar sources = [],\r\n\t    i;\r\n\r\n\tfor (i = 0; i < nodes.length; i++) {\r\n\t    if (graph.inEdges(i).length === 0)\r\n\t\tsources.push(i);\r\n\t}\r\n\treturn sources;\r\n    };\r\n\r\n    function distance(i) {\r\n\treturn links[i].distance;\r\n    }\r\n    graph.distance = distance;\r\n\r\n    function neighbors(node) {\r\n\tvar e = edges[node], ret = [];\r\n\tfor (var i = 0; i < e.length; ++i) {\r\n\t    var o = e[i];\r\n\t    if (o.source.index == node)\r\n\t\tret.push(o.target);\r\n\t    else \r\n\t\tret.push(o.source);\r\n\t}\r\n\treturn ret;\r\n    }\r\n    graph.neighbors = neighbors;\r\n\r\n    graph.other = function(o, node) {\r\n\tif (typeof o == \"number\")\r\n\t    o = links[o];\r\n\tif (o.source.index == node)\r\n\t    return o.target;\r\n\telse \r\n\t    return o.source;\r\n    };\r\n\r\n    function compute_components() {\r\n\tvar stack = [],\r\n\t    comp = 0, comps = [], ccomp,\r\n\t    n = nodes.length,\r\n\t    i, j, v, l, o, e;\r\n\r\n\tfor (i = 0; i < n; i++)\r\n\t    nodes[i].comp = 0;\r\n\r\n\tfor (j = 0; j < n; j++) {\r\n\t    if (nodes[j].comp !== 0)\r\n\t\tcontinue;\r\n\t    comp = comp+1; // next connected component\r\n\t    nodes[j].comp = comp;\r\n\t    stack.push(j);\r\n\t    ccomp = [j]; // current connected component list\r\n\r\n\t    while (stack.length) {\r\n\t\tv = stack.shift();\r\n\t\tl = edges[v];\r\n\t\tfor (i = 0; i < l.length; i++) {\r\n\t\t    e = l[i];\r\n\t\t    o = e.source;\r\n\t\t    if (o.index == v)\r\n\t\t\to = e.target;\r\n\t\t    if (o.index == v) // loop\r\n\t\t\tcontinue;\r\n\t\t    if (o.comp === 0) {\r\n\t\t\to.comp = comp;\r\n\t\t\tccomp.push(o.index);\r\n\t\t\tstack.push(o.index);\r\n\t\t    }\r\n\t\t}\r\n\t    }\r\n\t    if (ccomp.length) {\r\n\t\tccomp.sort(reorder.cmp_number);\r\n\t\tcomps.push(ccomp);\r\n\t    }\r\n\t}\r\n\tcomps.sort(function(a,b) { return b.length - a.length; });\r\n\treturn comps;\r\n    }\r\n\r\n    graph.components = function() {\r\n\tif (! components)\r\n\t    components = compute_components();\r\n\treturn components;\r\n    };\r\n\r\n    return graph;\r\n};\r\nreorder.graph_random_erdos_renyi = function(n, p, directed) {\r\n    if (p <= 0)\r\n\treturn reorder.graph_empty(n, directed);\r\n    else if (p >= 1)\r\n\treturn reorder.graph_complete(n, directed);\r\n\r\n    var nodes = graph_empty_nodes(n),\r\n\tlinks = [],\r\n\tv, w, i, lr, lp;\r\n\r\n    w = -1;\r\n    lp = Math.log(1.0 - p);\r\n\r\n    if (directed) {\r\n\tfor (v = 0; v < n; ) {\r\n\t    lr = Math.log(1.0 - Math.random());\r\n\t    w = w + 1 + Math.floor(lr/lp);\r\n\t    if (v == w)\r\n\t\tw = w+1;\r\n\t    while (w >= n && v < n) {\r\n\t\tw = w - n;\r\n\t\tv = v + 1;\r\n\t\tif (v == w)\r\n\t\t    w = w+1;\r\n\t    }\r\n\t    if (v < n)\r\n\t\tlinks.push({source: v, target: w});\r\n\t}\r\n    }\r\n    else {\r\n\tfor(v = 1; v < n; ) {\r\n\t    lr = Math.log(1.0 - Math.random());\r\n\t    w = w + 1 + Math.floor(lr/lp);\r\n\t    while (w >= v && v < n) {\r\n\t\tw = w - v;\r\n\t\tv = v + 1;\r\n\t    }\r\n\t    if (v < n)\r\n\t\tlinks.push({source: v, target: w});\r\n\t}\r\n    }\r\n    return reorder.graph(nodes, links, directed).init();\r\n};\r\n\r\nreorder.graph_random = reorder.graph_random_erdos_renyi;\r\nfunction graph_empty_nodes(n) {\r\n    var nodes = Array(n), i;\r\n    for (i = 0; i < n; i++) \r\n\tnodes[i] = {id: i};\r\n    return nodes;\r\n}\r\n\r\nreorder.graph_empty_nodes = graph_empty_nodes;\r\n\r\nreorder.graph_empty = function(n, directed) {\r\n    return reorder.graph(graph_empty_nodes(n), [], directed);\r\n};\r\nreorder.complete_graph = function(n, directed) {\r\n    var nodes = graph_empty_nodes(n),\r\n\tlinks = [],\r\n\ti, j;\r\n\r\n    if (directed) {\r\n\tfor (i = 0; i < n; i++) {\r\n\t    for (j = 0; j < n; j++) {\r\n\t\tif (i != j)\r\n\t\t    links.push({source: i, target: j });\r\n\t    }\r\n\t}\r\n    }\r\n    else {\r\n\tfor (i = 0; i < (n-1); i++) {\r\n\t    for (j = i+1; j < n; j++) \r\n\t\tlinks.push({source: i, target: j });\r\n\t}\r\n    }\r\n    return reorder.graph(nodes, links, directed).init();\r\n};\r\nreorder.graph_connect = function(graph, comps) {\r\n    var i, j, links = graph.links();\r\n\r\n    if (! comps)\r\n\tcomps = graph.components();\r\n    \r\n    for (i = 0; i < (comps.length-1); i++) {\r\n\tfor (j = i+1; j < comps.length; j++) {\r\n\t    links.push({source: comps[i][0], target: comps[j][0]});\r\n\t}\r\n    }\r\n    graph.links(links);\r\n    return graph.init();\r\n};\r\nreorder.bfs = function(graph, v, fn) {\r\n    var q = new Queue(),\r\n\tdiscovered = {}, i, e, v2, edges;\r\n    q.push(v);\r\n    discovered[v] = true;\r\n    fn(v, undefined);\r\n    while (q.length) {\r\n\tv = q.shift();\r\n\tfn(v, v);\r\n\tedges =\tgraph.edges(v);\r\n\tfor (i = 0; i < edges.length; i++) {\r\n\t    e = edges[i];\r\n\t    v2 = graph.other(e, v).index;\r\n\t    if (! discovered[v2]) {\r\n\t\tq.push(v2);\r\n\t\tdiscovered[v2] = true;\r\n\t\tfn(v, v2);\r\n\t    }\r\n\t}\r\n\tfn(v, -1);\r\n    }\r\n};\r\n\r\nreorder.bfs_distances = function(graph, v) {\r\n    var dist = {};\r\n    dist[v] = 0;\r\n    reorder.bfs(graph, v, function(v, c) {\r\n\tif (c >= 0 && v != c)\r\n\t    dist[c] = dist[v]+1;\r\n    });\r\n    return dist;\r\n};\r\n\r\nreorder.all_pairs_distance_bfs = function(graph, comps) {\r\n    if (! comps)\r\n\tcomps = [ graph.nodes_indices() ];\r\n    var nodes = comps.reduce(reorder.flatten)\r\n\t    .sort(reorder.cmp_number),\r\n\tmat = Array(nodes.length),\r\n\ti, j, dist;\r\n\r\n    for (i = 0; i < nodes.length; i++)\r\n\tmat[i] = Array(nodes.length);\r\n\r\n    for (i = 0; i < nodes.length; i++) {\r\n\tdist = reorder.bfs_distances(graph, i);\r\n\tfor (j in dist) {\r\n\t    mat[i][j] = dist[j];\r\n\t    mat[j][i] = dist[j];\r\n\t}\r\n    }\r\n    return mat;\r\n};\r\n\r\n\r\n/*jshint loopfunc:true */\r\nvar bfs_order = function(graph, comps) {\r\n    if (! comps)\r\n\tcomps = graph.components();\r\n\r\n    var i, comp, order = [];\r\n\r\n    for (i = 0; i < comps.length; i++) {\r\n\tcomp = comps[i];\r\n\treorder.bfs(graph, comp[0], function(v, c) {\r\n\t    if (c >= 0 && v != c)\r\n\t\torder.push(v);\r\n\t});\r\n    }\r\n    return order;\r\n};\r\nreorder.mat2graph = function(mat, directed) {\r\n    var n = mat.length,\r\n\tnodes = [],\r\n\tlinks = [],\r\n\tmax_value = Number.NEGATIVE_INFINITY,\r\n\ti, j, v, m;\r\n    \r\n    for (i = 0; i < n; i++)\r\n\tnodes.push({id: i});\r\n\r\n    for (i = 0; i < n; i++) {\r\n\tv = mat[i];\r\n\tm = (directed) ? 0 : i;\r\n\r\n\tfor (j = m; j < v.length; j++) {\r\n\t    if (j == nodes.length)\r\n\t\tnodes.push({id: j});\r\n\t    if (v[j] !== 0) {\r\n\t\tif (v[j] > max_value)\r\n\t\t    max_value = v[j];\r\n\t\tlinks.push({source: i, target: j, value: v[j]});\r\n\t    }\r\n\t}\r\n    }\r\n    return reorder.graph(nodes, links, directed)\r\n\t.linkDistance(function(l, i) {\r\n\t    return 1 + max_value - l.value;\r\n\t})\r\n\t.init();\r\n};\r\nreorder.graph2mat = function(graph, directed) {\r\n    var nodes = graph.nodes(),\r\n\tlinks = graph.links(),\r\n\tn = nodes.length,\r\n\ti, l, mat;\r\n\r\n    if (! directed)\r\n\tdirected = graph.directed();\r\n    if (directed) {\r\n\tvar rows = n, \r\n\t    cols = n;\r\n\t\r\n\tfor (i = n-1; i >= 0; i--) {\r\n\t    if (graph.inEdges(i).length !== 0)\r\n\t\tbreak;\r\n\t    else\r\n\t\trows--;\r\n\t}\r\n\tfor (i = n-1; i >= 0; i--) {\r\n\t    if (graph.outEdges(i).length !== 0)\r\n\t\tbreak;\r\n\t    else\r\n\t\tcols--;\r\n\t}\r\n\t//console.log(\"Rows: \"+rows+\" Cols: \"+cols);\r\n\tmat = reorder.zeroes(rows, cols);\r\n\t\r\n\tfor (i = 0; i < links.length; i++) {\r\n\t    l = links[i];\r\n\t    mat[l.source.index][l.target.index] = l.value ? l.value : 1;\r\n\t}\r\n    }\r\n    else {\r\n\tmat = reorder.zeroes(n, n);\r\n\t\r\n\tfor (i = 0; i < links.length; i++) {\r\n\t    l = links[i];\r\n\t    mat[l.source.index][l.target.index] = l.value ? l.value : 1;\r\n\t    mat[l.target.index][l.source.index] = l.value ? l.value : 1;\r\n\t}\r\n    }\r\n    return mat;\r\n};\r\n// Wilhelm Barth, Petra Mutzel, Michael Jünger: \r\n// Simple and Efficient Bilayer Cross Counting.\r\n// J. Graph Algorithms Appl. 8(2): 179-194 (2004)\r\n/*jshint loopfunc:true */\r\nfunction count_crossings(graph, north, south) {\r\n    var i, j, n,\r\n\tfirstIndex, treeSize, tree, index, weightSum,\r\n\tinvert = false, crosscount;\r\n\r\n    var comp = reorder.permutation(graph.nodes().length);\r\n\r\n    if (north===undefined) {\r\n\tnorth = comp.filter(function(n) { return graph.outDegree(n) !== 0; });\r\n\tsouth = comp.filter(function(n) { return graph.inDegree(n) !== 0; });\r\n    }\r\n\r\n    // Choose the smaller axis\r\n    if (north.length < south.length) {\r\n\tvar tmp = north;\r\n\tnorth = south;\r\n\tsouth = tmp;\r\n\tinvert = true;\r\n    }\r\n\r\n    var south_inv = inverse_permutation(south),\r\n\tsouthsequence = [];\r\n\r\n    for (i = 0; i < north.length; i++) {\r\n\tif (invert) {\r\n\t    n = graph.inEdges(north[i])\r\n\t\t.map(function(e) {\r\n\t\t    return south_inv[e.target.index];\r\n\t\t});\r\n\t}\r\n\telse {\r\n\t    n = graph.outEdges(north[i])\r\n\t\t.map(function(e) {\r\n\t\t    return south_inv[e.source.index];\r\n\t\t});\r\n\t}\r\n\tn.sort(reorder.cmp_number);\r\n\tsouthsequence = southsequence.concat(n);\r\n    }\r\n    \r\n    firstIndex = 1;\r\n    while (firstIndex < south.length)\r\n\tfirstIndex <<= 1;\r\n    treeSize = 2 * firstIndex - 1;\r\n    firstIndex -= 1;\r\n    tree = reorder.zeroes(treeSize);\r\n\r\n    crosscount = 0;\r\n    for (i = 0; i < southsequence.length; i++) {\r\n\tindex = southsequence[i] + firstIndex;\r\n\ttree[index]++;\r\n\twhile (index > 0) {\r\n\t    if (index%2) crosscount += tree[index+1];\r\n\t    index = (index - 1) >> 1;\r\n\t    tree[index]++;\r\n\t}\r\n    }\r\n    return crosscount;\r\n}\r\n\r\nreorder.count_crossings = count_crossings;\r\n// Accorging to\r\n// E. R. Gansner, E. Koutsofios, S. C. North, and K.-P. Vo. 1993. A\r\n// Technique for Drawing Directed Graphs. IEEE Trans. Softw. Eng. 19, 3\r\n// (March 1993), 214-230. DOI=10.1109/32.221135\r\n// http://dx.doi.org/10.1109/32.221135 \r\n// page 14: \"[...] reduce obvious crossings after the vertices have\r\n// been sorted, transforming a given ordering to one that is locally\r\n// optimal with respect to transposition of adjacent vertices. It\r\n// typically provides an additional 20-50% reduction in edge crossings.\r\n\r\nfunction count_in_crossings(graph, v, w, inv) {\r\n    var v_edges = graph.inEdges(v),\r\n\tw_edges = graph.inEdges(w),\r\n\tiv, iw, p0, cross = 0;\r\n\r\n    for (iw = 0; iw < w_edges.length; iw++) {\r\n\tp0 = inv[w_edges[iw].target.index];\r\n\tfor (iv = 0; iv < v_edges.length; iv++) {\r\n\t    if (inv[v_edges[iv].target.index] > p0)\r\n\t\tcross++;\r\n\t}\r\n    }\r\n    return cross;\r\n}\r\n\r\nfunction count_out_crossings(graph, v, w, inv) {\r\n    var v_edges = graph.outEdges(v),\r\n\tw_edges = graph.outEdges(w),\r\n\tiv, iw, p0, cross = 0;\r\n\r\n    for (iw = 0; iw < w_edges.length; iw++) {\r\n\tp0 = inv[w_edges[iw].source.index];\r\n\tfor (iv = 0; iv < v_edges.length; iv++) {\r\n\t    if (inv[v_edges[iv].source.index] > p0)\r\n\t\tcross++;\r\n\t}\r\n    }\r\n    return cross;\r\n}\r\n\r\n/**\r\n * Optimize two layers by swapping adjacent nodes when\r\n * it reduces the number of crossings.\r\n * @param {Graph} graph - the graph these two layers belong to\r\n * @param {list} layer1 - the ordered list of nodes in layer 1\r\n * @param {list} layer2 - the ordered list of nodes in layer 2\r\n * @returns {list} a tuple containing the new layer1, layer2, and crossings count\r\n */\r\nfunction adjacent_exchange(graph, layer1, layer2) {\r\n    layer1 = layer1.slice();\r\n    layer2 = layer2.slice();\r\n    var i, v, w, c0, c1,\r\n\tinv_layer1 = inverse_permutation(layer1),\r\n\tinv_layer2 = inverse_permutation(layer2),\r\n\tswapped = true,\r\n\timproved = 0;\r\n\r\n    while (swapped) {\r\n\tswapped = false;\r\n\tfor (i = 0; i < layer1.length-1; i++) {\r\n\t    v = layer1[i];\r\n\t    w = layer1[i+1];\r\n\t    // should reduce the in crossing and the out crossing\r\n\t    // otherwise what we gain horizontally is lost vertically\r\n\t    c0 = count_out_crossings(graph, v, w, inv_layer2);\r\n\t    c1 = count_out_crossings(graph, w, v, inv_layer2);\r\n\t    if (c0 > c1) {\r\n\t\tlayer1[i] = w;\r\n\t\tlayer1[i+1] = v;\r\n\t\tinv_layer1[w] = i;\r\n\t\tinv_layer1[v] = i+1;\r\n\t\tswapped = true;\r\n\t\timproved += c0 - c1;\r\n\t    }\r\n\t}\r\n\tfor (i = 0; i < layer2.length-1; i++) {\r\n\t    v = layer2[i];\r\n\t    w = layer2[i+1];\r\n\t    c0 = count_in_crossings(graph, v, w, inv_layer1);\r\n\t    c1 = count_in_crossings(graph, w, v, inv_layer1);\r\n\t    if (c0 > c1) {\r\n\t\tlayer2[i] = w;\r\n\t\tlayer2[i+1] = v;\r\n\t\tinv_layer2[w] = i;\r\n\t\tinv_layer2[v] = i+1;\r\n\t\tswapped = true;\r\n\t\timproved += c0 - c1;\r\n\t    }\r\n\t}\r\n    }\r\n\r\n    return [layer1, layer2, improved];\r\n}\r\n\r\nreorder.adjacent_exchange = adjacent_exchange;\r\nreorder.barycenter_order = function(graph, comps, max_iter) {\r\n    var orders = [[], [], 0];\r\n    // Compute the barycenter heuristic on each connected component\r\n    if (! comps) {\r\n\tcomps = graph.components();\r\n    }\r\n    for (var i = 0; i < comps.length; i++) {\r\n\tvar o = reorder.barycenter(graph, comps[i], max_iter);\r\n\torders = [ orders[0].concat(o[0]),\r\n\t\t   orders[1].concat(o[1]),\r\n\t\t   orders[2]+o[2] ];\r\n    }\r\n    return orders;\r\n};\r\n\r\n// Take the list of neighbor indexes and return the median according to \r\n// P. Eades and N. Wormald, Edge crossings in drawings of bipartite graphs.\r\n// Algorithmica, vol. 11 (1994) 379–403.\r\nfunction median(neighbors) {\r\n    if (neighbors.length === 0)\r\n\treturn -1; // should not happen\r\n    if (neighbors.length === 1)\r\n\treturn neighbors[0];\r\n    if (neighbors.length === 2)\r\n\treturn (neighbors[0]+neighbors[1])/2;\r\n    neighbors.sort(reorder.cmp_number);\r\n    if (neighbors.length % 2)\r\n\treturn neighbors[(neighbors.length-1)/2];\r\n    var rm = neighbors.length/2,\r\n\tlm = rm - 1,\r\n\trspan = neighbors[neighbors.length-1] - neighbors[rm],\r\n\tlspan = neighbors[lm] - neighbors[0];\r\n    if (lspan == rspan)\r\n\treturn (neighbors[lm] + neighbors[rm])/2;\r\n    else\r\n\treturn (neighbors[lm]*rspan + neighbors[rm]*lspan) / (lspan+rspan);\r\n}\r\n\r\nreorder.barycenter = function(graph, comp, max_iter) {\r\n    var nodes = graph.nodes(),\r\n\tlayer1, layer2, crossings, iter,\r\n\tbest_layer1, best_layer2, best_crossings, best_iter,\r\n\tlayer, inv_layer = {},\r\n\ti, v, neighbors, med;\r\n\r\n    layer1 = comp.filter(function(n) {\r\n\treturn graph.outDegree(n) !== 0;\r\n    });\r\n    layer2 = comp.filter(function(n) {\r\n\treturn graph.inDegree(n) !== 0;\r\n    });\r\n    if (comp.length < 3) {\r\n\treturn [layer1, layer2,\r\n\t\tcount_crossings(graph, layer1, layer2)];\r\n    }\r\n\r\n    if (! max_iter)\r\n\tmax_iter = 24;\r\n    else if ((max_iter%2)==1)\r\n\tmax_iter++; // want even number of iterations\r\n\r\n    inv_layer = inverse_permutation(layer2);\r\n\r\n    best_crossings = count_crossings(graph, layer1, layer2);\r\n    best_layer1 = layer1.slice();\r\n    best_layer2 = layer2.slice();\r\n    best_iter = 0;    \r\n    var inv_neighbor = function(e) {\r\n\t  var n = e.source == v ? e.target : e.source;\r\n\t  return inv_layer[n.index];\r\n        },\r\n\tbarycenter_sort = function(a, b) {\r\n\t    var d = med[a] - med[b];\r\n\t    if (d === 0) {\r\n\t\t// If both values are equal,\r\n\t\t// place the odd degree vertex on the left of the even\r\n\t\t// degree vertex\r\n\t\td = (graph.edges(b).length%2) - (graph.edges(a).length%2);\r\n\t    }\r\n\t    if (d < 0) return -1;\r\n\t    else if (d > 0) return 1;\r\n\t    return 0;\r\n\t};\r\n\r\n    for (layer = layer1, iter = 0;\r\n\t iter < max_iter;\r\n\t iter++, layer = (layer == layer1) ? layer2 : layer1) {\r\n\tmed = {};\r\n\tfor (i = 0; i < layer.length; i++) {\r\n\t    // Compute the median/barycenter for this node and set\r\n\t    // its (real) value into node.pos\r\n\t    v = nodes[layer[i]];\r\n\t    if (layer == layer1)\r\n\t\tneighbors = graph.outEdges(v.index);\r\n\t    else\r\n\t\tneighbors = graph.inEdges(v.index);\r\n\t    neighbors = neighbors.map(inv_neighbor);\r\n\t    med[v.index] = +median(neighbors);\r\n\t    //console.log('median['+i+']='+med[v.index]);\r\n\t}\r\n\tlayer.sort(barycenter_sort);\r\n\tfor (i = 0; i < layer.length; i++)\r\n\t    inv_layer = inverse_permutation(layer);\r\n\tcrossings = count_crossings(graph, layer1, layer2);\r\n\tif (crossings < best_crossings) {\r\n\t    best_crossings = crossings;\r\n\t    best_layer1 = layer1.slice();\r\n\t    best_layer2 = layer2.slice();\r\n\t    best_iter = iter;\r\n\t    max_iter = Math.max(max_iter, iter + 2); // we improved so go on\r\n\t}\r\n    }\r\n    if (reorder.debug) {\r\n\tconsole.log('Best iter: '+best_iter);\r\n    }\r\n\r\n    return [best_layer1, best_layer2, best_crossings];\r\n};\r\n/**\r\n * Returns a list of distance matrices, computed for the specified\r\n * connected components of a graph, or all the components if none is\r\n * specified.\r\n * @param {Graph} graph - the graph\r\n * @param {Array} comps [optional] the specified connected component list\r\n * @returns {Array} a list of distance matrices, in the order of the\r\n * nodes in the list of connected components.\r\n */\r\nreorder.all_pairs_distance = function(graph, comps) {\r\n    var distances = [];\r\n    if (! comps)\r\n\tcomps = graph.components();\r\n\r\n    for (var i = 0; i < comps.length; i++) \r\n\tdistances.push(all_pairs_distance_floyd_warshall(graph, comps[i]));\r\n    return distances;\r\n};\r\n\r\n/**\r\n * Returns a distance matrix, computed for the specified\r\n * connected component of a graph.\r\n * @param {Graph} graph - the graph\r\n * @param {Array} comp - the connected component as a list of nodes\r\n * @returns {Matrix} a distance matrix, in the order of the\r\n * nodes in the list of connected components.\r\n */\r\nfunction all_pairs_distance_floyd_warshall(graph, comp) {\r\n    var dist = reorder.infinities(comp.length, comp.length),\r\n\ti, j, k, inv;\r\n    // Floyd Warshall, \r\n    // see http://ai-depot.com/BotNavigation/Path-AllPairs.html\r\n    // O(n^3) unfortunately\r\n\r\n    inv = inverse_permutation(comp);\r\n\r\n    for (i = 0; i < comp.length; i++)\r\n\tdist[i][i] = 0;\r\n    \r\n    var build_dist = function(e) {\r\n\tif (e.source == e.target) return;\r\n\tif (! (e.source.index in inv) || ! (e.target.index in inv))\r\n\t    return; // ignore edges outside of comp\r\n\tvar u = inv[e.source.index],\r\n\t    v = inv[e.target.index];\r\n\tdist[v][u] = dist[u][v] = graph.distance(e.index);\r\n    };\r\n    for (i = 0; i < comp.length; i++) {\r\n\tgraph.edges(comp[i]).forEach(build_dist);\r\n    }\r\n\r\n    for (k=0; k<comp.length; k++) {\r\n\tfor (i=0; i<comp.length; i++)\r\n\t    if (dist[i][k] != Infinity) {\r\n\t\tfor (j=0; j<comp.length; j++)\r\n\t\t    if (dist[k][j] != Infinity\r\n\t\t\t&& dist[i][j] > dist[i][k] + dist[k][j]) {\r\n\t\t\tdist[i][j] = dist[i][k] + dist[k][j];\r\n\t\t\tdist[j][i] = dist[i][j];\r\n\t\t    }\r\n\t    }\r\n    }\r\n    return dist;\r\n}\r\n\r\nreorder.all_pairs_distance_floyd_warshall = all_pairs_distance_floyd_warshall;\r\n\r\n/**\r\n * Returns a distance matrix, computed for the specified\r\n * connected component of a graph, and the information to compute the\r\n * shortest paths.\r\n * @param {Graph} graph - the graph\r\n * @param {Array} comp - the connected component as a list of nodes\r\n * @returns {list} a distance matrix, in the order of the\r\n * nodes in the list of connected components, and a table used to\r\n * reconstruct the shortest paths with the {@link\r\n * floyd_warshall_path} function.\r\n */\r\nfunction floyd_warshall_with_path(graph, comp) {\r\n    if (! comp)\r\n\tcomp = graph.components()[0];\r\n\r\n    var dist = reorder.infinities(comp.length, comp.length),\r\n\tnext = Array(comp.length),\r\n\tdirected = graph.directed(),\r\n\ti, j, k, inv;\r\n    // Floyd Warshall, \r\n    // see http://ai-depot.com/BotNavigation/Path-AllPairs.html\r\n    // O(n^3) unfortunately\r\n\r\n    inv = inverse_permutation(comp);\r\n    \r\n    for (i = 0; i < comp.length; i++) {\r\n\tdist[i][i] = 0;\r\n\tnext[i] = Array(comp.length);\r\n    }\r\n    \r\n    var build_dist = function(e) {\r\n\tif (e.source == e.target) return;\r\n\tvar u = inv[e.source.index],\r\n\t    v = inv[e.target.index];\r\n\tdist[u][v] = graph.distance(e);\r\n\tnext[u][v] = v;\r\n\tif (! directed) {\r\n\t    dist[v][u] = graph.distance(e);\r\n\t    next[v][u] = u;\r\n\t}\r\n    };\r\n    \r\n    for (i = 0; i < comp.length; i++) {\r\n\tgraph.edges(comp[i]).forEach(build_dist);\r\n    }\r\n\r\n    for (k=0; k<comp.length; k++) {\r\n\tfor (i=0; i<comp.length; i++) {\r\n\t    for (j=0; j<comp.length; j++) {\r\n\t\tif (dist[i][j] > dist[i][k] + dist[k][j]) {\r\n\t\t    dist[i][j] = dist[i][k] + dist[k][j];\r\n\t\t    next[i][j] = next[i][k];\r\n\t\t    if (! directed) {\r\n\t\t\tdist[j][i] = dist[i][j];\r\n\t\t\tnext[j][i] = next[k][j];\r\n\t\t    }\r\n\t\t}\r\n\t    }\r\n\t}\r\n    }\r\n    return [dist, next];\r\n}\r\n\r\nreorder.floyd_warshall_with_path = floyd_warshall_with_path;\r\n\r\n/**\r\n * Returns the shortest path from node u to node v, from the table\r\n * returned by {@link floyd_warshall_with_path}.\r\n * @param {Array} next - the next information \r\n * @param {Integer} u - the starting node\r\n * @param {Integer} v - the ending node\r\n * @return {list} a list of nodes in the shortest path from u to v\r\n */\r\nfunction floyd_warshall_path(next, u, v) {\r\n    if (next[u][v] === undefined) return [];\r\n    var path = [u];\r\n    while (u != v) {\r\n\tu = next[u][v];\r\n\tpath.push(u);\r\n    }\r\n    return path;\r\n}\r\n\r\nreorder.floyd_warshall_path = floyd_warshall_path;\r\n// Converts a graph with weighted edges (weight in l.value)\r\n// into a distance matrix suitable for reordering with e.g.\r\n// Optimal Leaf Ordering.\r\n\r\nfunction distmat2valuemat(distmat) {\r\n    var n = distmat.length,\r\n\tvaluemat = reorder.zeroes(n, n),\r\n\tmax_dist = reorder.distmax(distmat),\r\n\ti, j;\r\n\r\n    for (i = 0; i < n; i++) {\r\n\tfor (j = i; j < n; j++) {\t    \r\n\t    valuemat[j][i] = valuemat[i][j] = 1+max_dist - distmat[i][j];\r\n\t}\r\n    }\r\n    return valuemat;\r\n}\r\nreorder.distmat2valuemat = distmat2valuemat;\r\n\r\nreorder.graph2valuemats = function(graph, comps) {\r\n    if (! comps)\r\n\tcomps = graph.components();\r\n\r\n    var\tdists = reorder.all_pairs_distance(graph, comps);\r\n    return dists.map(distmat2valuemat);\r\n};\r\n\r\nreorder.valuemats_reorder = function(valuemats, leaforder, comps) {\r\n    var orders = valuemats.map(leaforder);\r\n\r\n    if (comps) {\r\n\torders = orders.map(function(d, i) {\r\n\t    return reorder.permute(comps[i], d);\r\n\t});\r\n    }\r\n    return orders.reduce(reorder.flatten);\r\n};\r\nreorder.dist = function() {\r\n    var distance = reorder.distance.euclidean;\r\n\r\n    function dist(vectors) {\r\n\tvar n = vectors.length,\r\n            distMatrix = [];\r\n\r\n\tfor (var i = 0; i < n; i++) {\r\n\t    var d = [];\r\n\t    distMatrix[i] = d;\r\n\t    for (var j = 0; j < n; j++) {\r\n\t\tif (j < i) {\r\n\t\t     d.push(distMatrix[j][i]);\r\n\t\t} \r\n\t\telse if (i === j) {\r\n\t\t    d.push(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t    d.push(distance(vectors[i] , vectors[j]));\r\n\t\t}\r\n\t    }\r\n\t}\r\n\treturn distMatrix;\r\n    }\r\n\r\n    dist.distance = function(x) {\r\n\tif (!arguments.length) return distance;\r\n\tdistance = x;\r\n\treturn dist;\r\n    };\r\n\r\n    return dist;\r\n};\r\n\r\nreorder.distmax = function (distMatrix) {\r\n    var max = 0,\r\n\tn=distMatrix.length,\r\n\ti, j, row;\r\n\r\n    for (i = 0; i < n; i++) {\r\n\trow = distMatrix[i];\r\n\tfor (j = i+1; j < n; j++)\r\n\t    if (row[j] > max)\r\n\t\tmax = row[j];\r\n    }\r\n    return max;\r\n};\r\n\r\nreorder.distmin = function(distMatrix) {\r\n    var min = Infinity,\r\n\tn=distMatrix.length,\r\n\ti, j, row;\r\n\r\n    for (i = 0; i < n; i++) {\r\n\trow = distMatrix[i];\r\n\tfor (j = i+1; j < n; j++)\r\n\t    if (row[j] < min)\r\n\t\tmin = row[j];\r\n    }\r\n    return min;\r\n};\r\n\r\n\r\nreorder.dist_remove = function(dist, n, m) {\r\n    if (arguments.length < 3)\r\n\tm = n+1;\r\n    var i;\r\n    dist.splice(n, m-n);\r\n    for (i = dist.length; i-- > 0; )\r\n\tdist[i].splice(n, m-n);\r\n    return dist;\r\n};\r\n/* Fisher-Yates shuffle.\r\n   See http://bost.ocks.org/mike/shuffle/\r\n */\r\nreorder.randomPermute = function(array, i, j) {\r\n    if (arguments.length < 3) {\r\n\tj = array.length;\r\n\tif (arguments.length < 2) {\r\n\t    i = 0;\r\n\t}\r\n    }\r\n    var m = j-i, t, k;\r\n    while (m > 0) {\r\n\tk = i+Math.floor(Math.random() * m--);\r\n\tt = array[i+m];\r\n\tarray[i+m] = array[k];\r\n\tarray[k] = t;\r\n    }\r\n    return array;\r\n};\r\n\r\nreorder.randomPermutation = function(n) {\r\n    return reorder.randomPermute(reorder.permutation(n));\r\n};\r\n\r\nreorder.random_array = function(n, min, max) {\r\n    var ret = Array(n);\r\n    if (arguments.length == 1) {\r\n\twhile(n) ret[--n] = Math.random();\r\n    }\r\n    else if (arguments.length == 2) {\r\n\twhile(n) ret[--n] = Math.random()*min;\r\n    }\r\n    else {\r\n\twhile(n) ret[--n] = min + Math.random()*(max-min);\r\n    }\r\n    return ret;\r\n};\r\n\r\nreorder.random_matrix = function(p, n, m, sym) {\r\n    if (! m)\r\n\tm = n;\r\n    if (n != m)\r\n\tsym = false;\r\n    else if (! sym)\r\n\tsym = true;\r\n    var mat = reorder.zeroes(n, m), i, j, cnt;\r\n\r\n    if (sym) {\r\n\tfor (i = 0; i < n; i++) {\r\n\t    cnt = 0;\r\n\t    for (j = 0; j < i+1; j++) {\r\n\t\tif (Math.random() < p) {\r\n\t\t    mat[i][j] = mat[j][i] = 1;\r\n\t\t    cnt++;\r\n\t\t}\r\n\t    }\r\n\t    if (cnt === 0) {\r\n\t\tj = Math.floor(Math.random()*n/2);\r\n\t\tmat[i][j] = mat[j][i] = 1;\r\n\t    }\r\n\t}\r\n    }\r\n    else {\r\n\tfor (i = 0; i < n; i++) {\r\n\t    cnt = 0;\r\n\t    for (j = 0; j < m; j++) {\r\n\t\tif (Math.random() < p) {\r\n\t\t    mat[i][j] = 1;\r\n\t\t    cnt++;\r\n\t\t}\r\n\t    }\r\n\t    if (cnt === 0)\r\n\t\tmat[i][Math.floor(Math.random()*m)] = 1;\r\n\t}\r\n    }\r\n    return mat;\r\n};\r\n\r\nfunction permute_copy(list, perm) {\r\n    var m = perm.length;\r\n    var copy = list.slice();\r\n    while (m--)\r\n\tcopy[m] = list[perm[m]];\r\n    return copy;\r\n}\r\nreorder.permute = permute_copy;\r\n\r\nfunction permute_inplace(list, perm) {\r\n    var i, j, v, tmp;\r\n\r\n    //list = list.slice();\r\n    for (i = 0; i < list.length; i++) {\r\n\tj = perm[i];\r\n\tif (j < 0) {\r\n\t    perm[i] = -1 - j;\r\n\t    continue;\r\n\t}\r\n\tv = i;\r\n\twhile (j != i) {\r\n\t    tmp = list[j]; \r\n\t    list[j] = list[v];\r\n\t    list[v] = tmp;\r\n\t    v = j;\r\n\t    tmp = perm[j];\r\n\t    perm[j] = -1 - tmp;\r\n\t    j = tmp;\r\n\t}\r\n    }\r\n    return list;\r\n}\r\nreorder.permute_inplace = permute_inplace;\r\n\r\nreorder.permutetranspose = function(array, indexes) {\r\n    var m = array.length;\r\n    while (m-- > 0)\r\n\tarray[m] = reorder.permute(array[m], indexes);\r\n    return array;\r\n};\r\n\r\nreorder.stablepermute = function(list, indexes) {\r\n    var p = reorder.permute(list, indexes);\r\n    if (p[0] > p[p.length-1]) {\r\n\tp.reverse();\r\n    }\r\n    return p;\r\n};\r\nreorder.sort_order = function(v) {\r\n    return reorder.permutation(0, v.length).sort(\r\n\tfunction(a,b) { return v[a] - v[b]; });\r\n};\r\n\r\nreorder.sort_order_ascending = reorder.sort_order;\r\n\r\nreorder.sort_order_descending = function(v) {\r\n    return reorder.permutation(0, v.length).sort(\r\n\tfunction(a,b) { return v[b] - v[a]; });\r\n};\r\nif (typeof science == \"undefined\") {\r\n    science = {version: \"1.9.1\"}; // semver [jdf] should be defined\r\n    science.stats = {};\r\n}\r\n\r\nscience.stats.hcluster = function() {\r\n  var distance = reorder.distance.euclidean,\r\n      linkage = \"single\", // single, complete or average\r\n      distMatrix = null;\r\n\r\n  function hcluster(vectors) {\r\n    var n = vectors.length,\r\n        dMin = [],\r\n        cSize = [],\r\n//        distMatrix = [],\r\n        clusters = [],\r\n        c1,\r\n        c2,\r\n        c1Cluster,\r\n        c2Cluster,\r\n        p,\r\n        root,\r\n        i,\r\n        j,\r\n\tid = 0;\r\n\r\n    // Initialise distance matrix and vector of closest clusters.\r\n      if (distMatrix === null) {\r\n\t\tdistMatrix = [];\r\n\t\ti = -1; \r\n\t\twhile (++i < n) {\r\n\t\t\tdMin[i] = 0;\r\n\t\t\tdistMatrix[i] = [];\r\n\t\t\tj = -1; \r\n\t\t\twhile (++j < n) {\r\n\t\t\t\tdistMatrix[i][j] = i === j ? Infinity : distance(vectors[i] , vectors[j]);\r\n\t\t\t\tif (distMatrix[i][dMin[i]] > distMatrix[i][j]) dMin[i] = j;\r\n\t\t\t}\r\n\t\t}\r\n      }\r\n      else {\r\n\t  if (distMatrix.length < n || distMatrix[0].length < n)\r\n\t      throw {error: \"Provided distance matrix length \"+distMatrix.length+\" instead of \"+n};\r\n\t  i = -1; while (++i < n) {\r\n\t      dMin[i] = 0;\r\n\t      j = -1; while (++j < n) {\r\n\t\t  if (i === j)\r\n\t\t      distMatrix[i][j] = Infinity;\r\n\t\t  if (distMatrix[i][dMin[i]] > distMatrix[i][j]) dMin[i] = j;\r\n\t      }\r\n\t  }\r\n      }\r\n    // create leaves of the tree\r\n    i = -1; while (++i < n) {\r\n\tif (i != id) console.log(\"i = %d, id = %d\", i, id);\r\n      clusters[i] = [];\r\n      clusters[i][0] = {\r\n        left: null,\r\n        right: null,\r\n        dist: 0,\r\n        centroid: vectors[i],\r\n\tid: id++, //[jdf] keep track of original data index\r\n        size: 1,\r\n        depth: 0\r\n      };\r\n      cSize[i] = 1;\r\n    }\r\n\r\n    // Main loop\r\n    for (p = 0; p < n-1; p++) {\r\n      // find the closest pair of clusters\r\n      c1 = 0;\r\n      for (i = 0; i < n; i++) {\r\n        if (distMatrix[i][dMin[i]] < distMatrix[c1][dMin[c1]]) c1 = i;\r\n      }\r\n      c2 = dMin[c1];\r\n\r\n      // create node to store cluster info \r\n      c1Cluster = clusters[c1][0];\r\n      c2Cluster = clusters[c2][0];\r\n\r\n      var newCluster = {\r\n        left: c1Cluster,\r\n        right: c2Cluster,\r\n        dist: distMatrix[c1][c2],\r\n        centroid: calculateCentroid(c1Cluster.size, c1Cluster.centroid,\r\n          c2Cluster.size, c2Cluster.centroid),\r\n\tid: id++,\r\n        size: c1Cluster.size + c2Cluster.size,\r\n        depth: 1 + Math.max(c1Cluster.depth, c2Cluster.depth)\r\n      };\r\n      clusters[c1].splice(0, 0, newCluster);\r\n      cSize[c1] += cSize[c2];\r\n\r\n      // overwrite row c1 with respect to the linkage type\r\n      for (j = 0; j < n; j++) {\r\n        switch (linkage) {\r\n          case \"single\":\r\n            if (distMatrix[c1][j] > distMatrix[c2][j])\r\n              distMatrix[j][c1] = distMatrix[c1][j] = distMatrix[c2][j];\r\n            break;\r\n          case \"complete\":\r\n            if (distMatrix[c1][j] < distMatrix[c2][j])\r\n              distMatrix[j][c1] = distMatrix[c1][j] = distMatrix[c2][j];\r\n            break;\r\n          case \"average\":\r\n            distMatrix[j][c1] = distMatrix[c1][j] = (cSize[c1] * distMatrix[c1][j] + cSize[c2] * distMatrix[c2][j]) / (cSize[c1] + cSize[j]);\r\n            break;\r\n        }\r\n      }\r\n      distMatrix[c1][c1] = Infinity;\r\n\r\n      for (i = 0; i < n; i++)\r\n        distMatrix[i][c2] = distMatrix[c2][i] = Infinity;\r\n\r\n      // update dmin and replace ones that previous pointed to c2 to point to c1\r\n      for (j = 0; j < n; j++) {\r\n        if (dMin[j] == c2) dMin[j] = c1;\r\n        if (distMatrix[c1][j] < distMatrix[c1][dMin[c1]]) dMin[c1] = j;\r\n      }\r\n\r\n      // keep track of the last added cluster\r\n      root = newCluster;\r\n    }\r\n\r\n    return root;\r\n  }\r\n\r\n  hcluster.linkage = function(x) {\r\n    if (!arguments.length) return linkage;\r\n    linkage = x;\r\n    return hcluster;\r\n  };\r\n\r\n  hcluster.distance = function(x) {\r\n    if (!arguments.length) return distance;\r\n    distance = x;\r\n    return hcluster;\r\n  };\r\n\r\n  hcluster.distanceMatrix = function(x) {\r\n    if (!arguments.length) return distMatrix;\r\n    distMatrix = x.map(function(y) { return y.slice(0); });\r\n    return hcluster;\r\n  };\r\n\r\n  return hcluster;\r\n};\r\n\r\nfunction calculateCentroid(c1Size, c1Centroid, c2Size, c2Centroid) {\r\n  var newCentroid = [],\r\n      newSize = c1Size + c2Size,\r\n      n = c1Centroid.length,\r\n      i = -1;\r\n  while (++i < n) {\r\n    newCentroid[i] = (c1Size * c1Centroid[i] + c2Size * c2Centroid[i]) / newSize;\r\n  }\r\n  return newCentroid;\r\n}\r\n/**\r\n * optimal dendrogram ordering\r\n * \r\n * implementation of binary tree ordering described in [Bar-Joseph et al., 2003]\r\n * by Renaud Blanch.\r\n * JavaScript translation by Jean-Daniel Fekete.\r\n * \r\n * [Bar-Joseph et al., 2003]\r\n * K-ary Clustering with Optimal Leaf Ordering for Gene Expression Data.\r\n * Ziv Bar-Joseph, Erik D. Demaine, David K. Gifford, Angèle M. Hamel,\r\n * Tommy S. Jaakkola and Nathan Srebro\r\n * Bioinformatics, 19(9), pp 1070-8, 2003\r\n * http://www.cs.cmu.edu/~zivbj/compBio/k-aryBio.pdf\r\n */\r\n\r\nreorder.optimal_leaf_order = function() {\r\n    var distanceMatrix = null,\r\n        distance = reorder.distance.euclidean,\r\n\t\tlinkage = \"complete\",\r\n        leavesMap = {},\r\n        orderMap = {};\r\n\r\n    function isLeaf(n) {\r\n\t\treturn n.depth === 0;\r\n    }\r\n\r\n    function leaves(n) {\r\n\t\tif (n === null) return [];\r\n\t\tif (n.id in leavesMap)\r\n\t\t\treturn leavesMap[n.id];\r\n\t\treturn (leavesMap[n.id] = _leaves(n));\r\n    }\r\n\r\n    function _leaves(n) {\r\n\t\tif (n === null) return [];\r\n\t\tif (n.depth === 0) return [n.id];\r\n\t\treturn leaves(n.left).concat(leaves(n.right));\r\n    }\r\n\r\n    function order(v, i, j) {\r\n\t\tvar key = \"k\"+v.id + \"-\"+i+\"-\"+j; // ugly key\r\n\t\tif (key in orderMap) \r\n\t\t\treturn orderMap[key];\r\n\t\treturn (orderMap[key] = _order(v, i, j));\r\n    }\r\n    \r\n    function _order(v, i, j) {\r\n\t\tif (v.depth === 0) //isLeaf(v))\r\n\t\t\treturn [0, [v.id]];\r\n\t\tvar l = v.left, r = v.right;\r\n\t\tvar L = leaves(l), R = leaves(r);\r\n\t\t\r\n\t\tvar w, x;\r\n\t\tif (L.indexOf(i) !== -1 && R.indexOf(j) !== -1) {\r\n\t\t\tw = l; x = r;\t    \r\n\t\t}\r\n\t\telse if (R.indexOf(i) !== -1 && L.indexOf(j) !== -1) {\r\n\t\t\tw = r; x = l;\r\n\t\t}\r\n\t\telse \r\n\t\t\tthrow {error: \"Node is not common ancestor of \"+i+\", \"+j};\r\n\t\tvar Wl = leaves(w.left), Wr = leaves(w.right);\r\n\t\tvar Ks = Wr.indexOf(i) != -1 ? Wl : Wr;\r\n\t\tif (Ks.length === 0) \r\n\t\t\tKs = [i];\r\n\r\n\t\tvar Xl = leaves(x.left), Xr = leaves(x.right);\r\n\t\tvar Ls = Xr.indexOf(j) != -1 ? Xl : Xr;\r\n\t\tif (Ls.length === 0)\r\n\t\t\tLs = [j];\r\n\r\n\t\tvar min = Infinity, optimal_order = [];\r\n\r\n\t\tfor (var k = 0; k < Ks.length; k++) {\r\n\t\t\tvar w_min = order(w, i, Ks[k]);\r\n\t\t\tfor (var m = 0; m < Ls.length; m++) {\r\n\t\t\t\tvar x_min = order(x, Ls[m], j);\r\n\t\t\t\tvar dist = w_min[0] + distanceMatrix[Ks[k]][Ls[m]] + x_min[0];\r\n\t\t\t\tif (dist < min) {\r\n\t\t\t\t\tmin = dist;\r\n\t\t\t\t\toptimal_order = w_min[1].concat(x_min[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [min, optimal_order];\r\n    }\r\n\r\n    function orderFull(v) {\r\n        leavesMap = {};\r\n        orderMap = {};\r\n\t\tvar min = Infinity,\r\n\t\t\toptimal_order = [],\r\n\t\t\tleft = leaves(v.left),\r\n\t\t\tright = leaves(v.right);\r\n\t\t\r\n\t\tif (reorder.debug)\r\n\t\t\tconsole.log(reorder.printhcluster(v,0));\r\n\r\n\t\tfor (var i = 0; i < left.length; i++) {\r\n\t\t\tfor (var j = 0; j < right.length; j++) {\r\n\t\t\t\tvar so = order(v, left[i], right[j]);\r\n\t\t\t\tif (so[0] < min) {\r\n\t\t\t\t\tmin = so[0];\r\n\t\t\t\t\toptimal_order = so[1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tdistanceMatrix = null;\r\n\t\treturn optimal_order;\r\n    }\r\n\r\n    function optimal_leaf_order(matrix) {\r\n\t\tif (distanceMatrix === null)\r\n\t\t\tdistanceMatrix = (reorder.dist().distance(distance))(matrix);\r\n\t\tvar hcluster = science.stats.hcluster()\r\n\t\t\t.linkage(linkage)\r\n\t\t\t.distanceMatrix(distanceMatrix);\r\n\t\tvar hcluster_result = hcluster(matrix);\r\n\t\tconsole.log(\"hcluster\", science.stats.hcluster());\r\n\t\tconsole.log(\"distancematrix, hcluster_result\", distanceMatrix, hcluster_result);\r\n\t\treturn orderFull(hcluster_result);\r\n\t}\r\n\toptimal_leaf_order.order = orderFull;\r\n\toptimal_leaf_order.reorder = optimal_leaf_order;\r\n\r\n\toptimal_leaf_order.distance = function(x) {\r\n\t\tif (!arguments.length) return distance;\r\n\t\tdistance = x;\r\n\t\tdistanceMatrix = null;\r\n\t\treturn optimal_leaf_order;\r\n\t};\r\n\r\n\toptimal_leaf_order.linkage = function(x) {\r\n\t\tif (!arguments.length) return linkage;\r\n\t\tlinkage = x;\r\n\t\treturn optimal_leaf_order;\r\n\t};\r\n\r\n\toptimal_leaf_order.distance_matrix = function(x) {\r\n\t\tif (!arguments.length) return distanceMatrix;\r\n\t\t// copy\r\n\t\tdistanceMatrix = x.map(function(y) { return y.slice(0); });\r\n\t\treturn optimal_leaf_order;\r\n    };\r\n    optimal_leaf_order.distanceMatrix = optimal_leaf_order.distance_matrix; // compatibility\r\n\r\n    return optimal_leaf_order;\r\n};\r\n\r\n\r\n\r\nreorder.order = function() {\r\n    var distance = reorder.distance.euclidean,\r\n        ordering = reorder.optimal_leaf_order,\r\n        linkage = \"complete\",\r\n        distanceMatrix = null,\r\n        vector,\r\n        except = [],\r\n        debug = 0,\r\n        i = 0, j = Infinity;\r\n\r\n\r\n    function _reset() {\r\n        distance = reorder.distance.euclidean;\r\n        ordering = reorder.optimal_leaf_order;\r\n        linkage = \"complete\";\r\n        distanceMatrix = null;\r\n        vector = null;\r\n        except = [];\r\n        i = 0;\r\n        j = Infinity;\r\n    }\r\n\r\n    function order(v) {\r\n        vector = v;\r\n        j = Math.min(j, v.length);\r\n        var i0 = (i > 0 ? i-1 : 0),\r\n            j0 = (j < vector.length ? j+1: j),\r\n            k, low, high;\r\n\r\n        for (k = except.length-1; k > 0 ; k -= 2) {\r\n            low = except[k-1];\r\n            high = except[k];\r\n            if (high >= j0) {\r\n                if (j0 > j) {\r\n                    j0 = Math.min(j0, low+1);\r\n                    except.splice(k-1, 2);\r\n                }\r\n                else {\r\n                    high = j0;\r\n                }\r\n            }\r\n            else if (low <= i0) {\r\n                if (i0 < i) {\r\n                    i0 = Math.max(i0, high-1);\r\n                    except.splice(k-1, 2);\r\n                }\r\n                else {\r\n                    low = i0;\r\n                }\r\n            }\r\n            else if ((high-low) < 3)\r\n                except.splice(k-1, 2);\r\n        }\r\n\r\n        try {\r\n            return _order_limits(i0, j0);\r\n        }\r\n        finally {\r\n            _reset();\r\n        }\r\n    }\r\n\r\n    function _order_limits(i0, j0) {\r\n        var orig = vector,\r\n            perm,\r\n            row,\r\n            k,\r\n            l;\r\n\r\n        vector = vector.slice(i0, j0); // always make a copy\r\n        if (i === 0 && j == vector.length)\r\n            return _order_except();\r\n\r\n        if (reorder.debug)\r\n            console.log(\"i0=\"+i0+\" j0=\"+j0);\r\n\r\n        if (distanceMatrix !== null) {\r\n            if (j0 !== vector.length)\r\n                reorder.dist_remove(distanceMatrix, j0, vector.length);\r\n            if (i0 > 0)\r\n                reorder.dist_remove(distanceMatrix, 0, i0);\r\n        }\r\n        else {\r\n            _compute_dist();\r\n        }\r\n        // Apply constraints on the min/max indices\r\n\r\n        var max = reorder.distmax(distanceMatrix);\r\n        if (i0 < i) {\r\n            // row i0 should be far away from each rows so move it away\r\n            // by changing the distance matrix, adding \"max\" to each\r\n            // distance from row/column 0 \r\n            row = distanceMatrix[0];\r\n            for (k = row.length; k-- > 1; )\r\n                row[k] += max;\r\n            for (k = distanceMatrix.length; k-- > 1; )\r\n                distanceMatrix[k][0] += max;\r\n            max += max;\r\n            // also fix the exception list\r\n            if (i0 !== 0) {\r\n                for (k = 0; k < except.length; k++)\r\n                    except[k] -= i0;\r\n            }\r\n        }\r\n        if (j0 > j) {\r\n            // move j0 even farther so that\r\n            // i0 and j0 are farthest from each other.\r\n            // add 2*max to each distance from row/col\r\n            // j-i-1\r\n            l = distanceMatrix.length-1;\r\n            row = distanceMatrix[l];\r\n            for (k = l; k-- > 0; ) {\r\n                row[k] += max;\r\n                distanceMatrix[k][l] += max;\r\n            }\r\n        }\r\n        // the algorithm should work as is, except\r\n        // the order can be reversed in the end.\r\n\r\n        perm = _order_except();\r\n        if (i0 < i) {\r\n            if (perm[0] !== 0)\r\n                perm.reverse();\r\n            if (j0 > j) {\r\n                reorder.assert(perm[0] === 0 && perm[perm.length-1]==perm.length-1,\r\n                       \"Invalid constrained permutation endpoints\");\r\n            }\r\n            else {\r\n                reorder.assert(perm[0] === 0,\r\n                       \"Invalid constrained permutation start\");\r\n            }\r\n        }\r\n        else if (j0 > j) {\r\n            if (perm[perm.length-1] !== (perm.length-1))\r\n                perm = perm.reverse();\r\n            reorder.assert(perm[perm.length-1] == perm.length-1,\r\n                           \"Invalid constrained permutation end\");\r\n        }\r\n        if (i0 !== 0) {\r\n            perm = reorder\r\n                .permutation(i0)\r\n                .concat(perm.map(function(v) { return v + i0; }));\r\n        }\r\n        if (orig.length > j0) {\r\n            perm = perm.concat(reorder.range(j0, orig.length));\r\n        }\r\n        return perm;\r\n    }\r\n\r\n    function _order_except() {\r\n        var perm,\r\n            k,\r\n            l,\r\n            low,\r\n            high,\r\n            pos;\r\n\r\n        if (except.length === 0)\r\n            return _order_equiv();\r\n\r\n        // TODO: postpone the calculation to avoid computing the except items\r\n        _compute_dist();\r\n        // Apply constaints on the fixed order between the indices\r\n        // in \"except\" \r\n        // We do it end-to-start to keep the indices right\r\n\r\n        for (k = except.length-1; k > 0 ; k -= 2) {\r\n            low = except[k-1];\r\n            high = except[k];\r\n            distanceMatrix = reorder.dist_remove(distanceMatrix, low+1, high-1);\r\n            vector.splice(low+1, high-low-2);\r\n            if (reorder.debug)\r\n                console.log(\"Except[\"+low+\", \"+high+\"]\");\r\n            if (distanceMatrix[low][low+1] !== 0) {\r\n                // boundaries are equal, they will survive\r\n                distanceMatrix[low][low+1] = distanceMatrix[low+1][low] = -1;\r\n            }\r\n        }\r\n        \r\n        perm = _order_equiv();\r\n\r\n        // put back except ranges\r\n        //TODO\r\n        for (k = 0; k < except.length ; k += 2) {\r\n            low = except[k];\r\n            high = except[k+1];\r\n            // Prepare for inserting range [low+1,high-1]\r\n            for (l = 0; l < perm.length; l++) {\r\n                if (perm[l] > low)\r\n                    perm[l] += (high-low-2);\r\n                else if (perm[l] == low)\r\n                    pos = l;\r\n            }\r\n            if (pos > 0 && perm[pos-1] == (high-1)) {\r\n                // reversed order\r\n                Array.prototype.splice\r\n                    .apply(perm,\r\n                           [pos, 0].concat(reorder.range(high-2,low,-1)));\r\n            }\r\n            else if (perm[pos+1] == (high-1)) {\r\n                Array.prototype.splice\r\n                    .apply(perm,\r\n                           [pos+1, 0].concat(reorder.range(low+1,high-1)));\r\n            }\r\n            else {\r\n                throw \"Range not respected\";\r\n            }\r\n        }\r\n\r\n        return perm;\r\n    }\r\n\r\n    function _order_equiv() {\r\n        var perm,\r\n            row,\r\n            e,\r\n            j,\r\n            k,\r\n            l,\r\n            m,\r\n            n,\r\n            has_1 = false,\r\n            equiv = [],\r\n            fix_except = {};\r\n\r\n        _compute_dist();\r\n\r\n        // Collect nodes with distance==0 in equiv table\r\n        // At this stage, exceptions are stored with -1\r\n        for (k = 0; k < (distanceMatrix.length-1); k++) {\r\n            row = distanceMatrix[k];\r\n            e = [];\r\n            j = row.indexOf(-1);\r\n            if (j !== -1) {\r\n                fix_except[k] = [k,j]; // keep track for later fix\r\n                has_1 = true;\r\n            }\r\n            // top down to keep the indices\r\n            for (l = row.length; --l >  k; ) {\r\n                if (row[l] === 0) {\r\n                    j = distanceMatrix[l].indexOf(-1);\r\n                    if (j !== -1) {\r\n                        // move the constraint to the representative\r\n                        // of the equiv. class \"k\"\r\n                        fix_except[k] = [l,j]; // keep track for later fix\r\n                        distanceMatrix[j][k] = row[j] = -1;\r\n                        has_1 = true;\r\n                    }\r\n                    e.unshift(l);\r\n                    // remove equivalent item from dist and vector\r\n                    distanceMatrix = reorder.dist_remove(distanceMatrix, l);\r\n                    vector.splice(l, 1);\r\n                }\r\n                else if (row[l] < 0)\r\n                    has_1 = true;\r\n            }\r\n            if (e.length !== 0) {\r\n                e.unshift(k);\r\n                equiv.push(e);\r\n            }\r\n        }\r\n\r\n        if (has_1) {\r\n            for (k = 0; k < (distanceMatrix.length-1); k++) {\r\n                row = distanceMatrix[k];\r\n                for (l = k+1; l < (row.length-1); l++) {\r\n                    if (distanceMatrix[l][l+1] == -1) {\r\n                        distanceMatrix[l+1][l] = distanceMatrix[l][l+1] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        perm = _order();\r\n\r\n        // put back equivalent rows\r\n        for (k = equiv.length; k-- > 0; ) {\r\n            e = equiv[k];\r\n            l = perm.indexOf(e[0]);\r\n            m = fix_except[e[0]];\r\n            if (m && m[0] == e[0]) {\r\n                l = _fix_exception(perm, l, m[0], m[1], 0);\r\n                m = undefined;\r\n            }\r\n            for (n = 1; n < e.length; n++) {\r\n                perm = _perm_insert(perm, l, e[n]);\r\n                if (m && m[0] == e[n]) {\r\n                    l = _fix_exception(perm, l, m[0], m[1], n);\r\n\t\t    m = undefined;\r\n                }\r\n            }\r\n            \r\n        }\r\n        // // put back equivalent rows\r\n        // //TODO fix index that varies when insertions are done in the perm\r\n        // for (k = equiv.length; k-- > 0; ) {\r\n        //     e = equiv[k];\r\n        //     l = perm.indexOf(e[0]);\r\n        // }\r\n        return perm;\r\n    }\r\n\r\n    function _fix_exception(perm, l, m, next, len) {\r\n        var i, j, k;\r\n\r\n        // for (k = 0; k < except.length; k += 2) {\r\n        //     if (m == except[k]) {\r\n        //         next = m+1;\r\n        //         break;\r\n        //     }\r\n        //     else if (m == except[k]+1) {\r\n        //         next = m-1;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // if (next == 0) {\r\n        //     throw \"Exception not found\";\r\n        //     return;\r\n        // }\r\n\r\n        if (l > 0 && perm[l-1] == next) {\r\n            _swap(perm, l, perm.indexOf(m));\r\n            return l+1;\r\n        }\r\n        else if (perm[l+len+1] == next) {\r\n            _swap(perm, l+len, perm.indexOf(m));\r\n            return l;\r\n        }\r\n        else\r\n            throw \"Index not found\";\r\n    }\r\n\r\n    function _swap(perm, a, b) {\r\n        if (a == b) return;\r\n        var c = perm[a];\r\n        perm[a] = perm[b];\r\n        perm[b] = c;\r\n    }\r\n\r\n    function _order() {\r\n        if (reorder.debug > 1)\r\n            reorder.printmat(distanceMatrix);\r\n        if (reorder.debug > 2)\r\n            reorder.printmat(vector);\r\n\r\n        var perm = ordering()\r\n                .linkage(linkage)\r\n                .distanceMatrix(distanceMatrix)(vector);\r\n        if (reorder.debug)\r\n            console.log(\"Permutation: \"+perm);\r\n\r\n        return perm;\r\n    }\r\n\r\n    function _perm_insert(perm, i, nv) {\r\n         perm = perm\r\n             .map(function(v) { return (v < nv) ? v : v+1; });\r\n         perm.splice(i, 0, nv);\r\n         return perm;\r\n     }\r\n\r\n    function _compute_dist() {\r\n        if (distanceMatrix === null)\r\n            distanceMatrix = (reorder.dist().distance(distance))(vector);\r\n        return distanceMatrix;\r\n    }\r\n\r\n    order.distance = function(x) {\r\n        if (!arguments.length) return distance;\r\n        distance = x;\r\n        return order;\r\n    };\r\n\r\n    order.linkage = function(x) {\r\n        if (!arguments.length) return linkage;\r\n        linkage = x;\r\n        return order;\r\n    };\r\n\r\n\r\n    order.limits = function(x, y) {\r\n        if (!arguments.length) return [i, j];\r\n        i = x;\r\n        j = y;\r\n        return order;\r\n    };\r\n\r\n    order.except = function(list) {\r\n        if (!arguments.length) return except.slice(0);\r\n        except = list.sort(function(a,b) {\r\n            if (a >= b)\r\n                throw \"Invalid list, indices not sorted\";\r\n            return a-b;\r\n        });\r\n        return order;\r\n    };\r\n\r\n    function _orderExcept(vector, i, j) {\r\n        var distanceMatrix = (reorder.dist().distance(distance))(vector);\r\n        var row, k, l, rev = false, args, pos = -1;\r\n\r\n        // Set a null distance to stick i/i+1 together\r\n        // TODO: check if no other pair is also ==0\r\n        distanceMatrix[i][i+1] = 0;\r\n        distanceMatrix[i+1][i] = 0;\r\n        var perm = ordering().distanceMatrix(distanceMatrix)(vector);\r\n        pos = perm.indexOf(i);\r\n        for (k = 0; k < perm.length; k++) {\r\n            l = perm[k];\r\n            if (l > i)\r\n                perm[k] += j-i-2;\r\n        }\r\n        if (pos !== 0 && perm[pos-1] === (j-1))\r\n            rev = true;\r\n        if (rev) {\r\n            perm.reverse();\r\n            pos = perm.length-pos-1;\r\n        }\r\n        args = [pos+1, 0].concat(reorder.range(i+1,j-1));\r\n        Array.prototype.splice.apply(perm, args);\r\n        return perm;\r\n    }\r\n\r\n    order.orderrowsexcept = order.orderexcept;\r\n\r\n    return order;\r\n};\r\nreorder.covariance = reorder.dot;\r\n\r\nreorder.covariancetranspose = function(v, a, b) {\r\n    var n = v.length,\r\n\tcov = 0,\r\n\ti;\r\n    for (i = 0; i < n; i++) {\r\n\tcov += v[i][a]*v[i][b];\r\n    }\r\n    return cov;\r\n};\r\n\r\nreorder.variancecovariance = function(v) {\r\n    var o = v[0].length,\r\n\tcov = Array(o),\r\n\ti, j;\r\n\r\n    for (i = 0; i < o; i++) {\r\n\tcov[i] = Array(o);\r\n    }\r\n    for (i = 0; i < o; i++) {\r\n\tfor (j = i; j < o; j++)\r\n\t    cov[i][j] = cov[j][i] = reorder.covariancetranspose(v, i, j);\r\n    }\r\n    return cov;\r\n};\r\nreorder.laplacian = function(graph, comp) {\r\n    var n = comp.length,\r\n\tlap = reorder.zeroes(n, n),\r\n\tinv = inverse_permutation(comp),\r\n\ti, j, k, row, sum, edges, v, e, other;\r\n\r\n    reorder.assert(! graph.directed(), \"Laplacian only for undirected graphs\");\r\n    for (i = 0; i < n; i++) {\r\n\tv = comp[i];\r\n\trow = lap[i];\r\n\tsum = 0;\r\n\tedges = graph.edges(v);\r\n\tfor (j = 0; j < edges.length; j++) {\r\n\t    e = edges[j];\r\n\t    other = inv[graph.other(e, v).index];\r\n\t    if (other != i) {\r\n\t\tsum += e.value;\r\n\t\trow[other] = -e.value;\r\n\t    }\r\n\t}\r\n\trow[i] = sum;\r\n    }\r\n\r\n    return lap;\r\n};\r\nfunction normalize(v) {\r\n    var norm = reorder.length(v),\r\n\ti = v.length;\r\n    if (norm === 0 || Math.abs(norm - 1) < 1e-9) return 1;\r\n    while (i-- > 0)\r\n\tv[i] /= norm;\r\n    return norm;\r\n}\r\n\r\nreorder.poweriteration = function(v, eps, init) {\r\n    if (! eps) \r\n\teps = 1e-9;\r\n\t\r\n    var n = v.length,\r\n\tb,\r\n\ti,\r\n\tj,\r\n\ttmp = Array(n),\r\n\tnorm,\r\n\ts = 100,\r\n\te;\r\n\r\n    reorder.assert(n == v[0].length, \"poweriteration needs a square matrix\");\r\n    if (! init) {\r\n\tb = reorder.random_array(n);\r\n    }\r\n    else\r\n\tb = init.slice(); // copy\r\n    normalize(b);\r\n    while (s-- > 0) {\r\n\tfor(i=0; i<n; i++) {\r\n            tmp[i] = 0;\r\n            for (j=0; j<n; j++) tmp[i] += v[i][j] * b[j];\r\n\t}\r\n\tnormalize(tmp);\r\n\tif (reorder.dot(tmp, b) > (1.0 - eps))\r\n\t    break;\r\n\tvar t = tmp; tmp = b; b = t; // swap b/tmp\r\n    }\r\n    return tmp;\r\n};\r\n\r\nreorder.poweriteration_n = function(v, p, init, eps, start) {\r\n    if (! eps) \r\n\teps = 1e-9;\r\n\t\r\n    var n = v.length,\r\n\tb = Array(p), \r\n\ti, j, k, l,\r\n\tbk, dot, row,\r\n\ttmp = Array(n),\r\n\ts = 100,\r\n\teigenvalue = Array(p);\r\n\r\n    reorder.assert(n == v[0].length, \"poweriteration needs a square matrix\");\r\n    if (! init) {\r\n\tfor (i = 0; i < p; i++) {\r\n\t    row = b[i] = reorder.random_array(n);\r\n\t    eigenvalue[i] = normalize(row);\r\n\t}\r\n    }\r\n    else {\r\n\tfor (i = 0; i < p; i++) {\r\n\t    b[i] = init[i].slice(); // copy\r\n\t    eigenvalue[i] = normalize(b[i]);\r\n\t}\r\n    }\r\n    if (! start)\r\n\tstart = 0;\r\n\t\r\n    for (k = start; k < p; k++) {\r\n\tbk = b[k];\r\n\twhile (s-- > 0) {\r\n\t    // Orthogonalize vector\r\n\t    for (l = 0; l < k; l++) {\r\n\t\trow = b[l];\r\n\t\tdot = reorder.dot(bk, row);\r\n\t\tfor (i = 0; i < n; i++)\r\n\t\t    bk[i] -= dot*row[i];\r\n\t    }\r\n\t    \r\n\t    for(i=0; i<n; i++) {\r\n\t\ttmp[i] = 0;\r\n\t\tfor (j=0; j<n; j++) \r\n\t\t    tmp[i] += v[i][j] * bk[j];\r\n\t    }\r\n\t    eigenvalue[k] = normalize(tmp);\r\n\t    if (reorder.dot(tmp, bk) > (1 - eps))\r\n\t    \tbreak;\r\n\t    bk = tmp; tmp = b[k]; b[k] = bk;  // swap b/tmp\r\n\t}\r\n\tif (reorder.debug)\r\n\t    console.log('eig[%d]=%j',k, bk);\r\n    }\r\n    return [b, eigenvalue];\r\n};\r\n// Compute te Fiedler vector, the smallest non-null eigenvector of a matrix.\r\n// See:\r\n// Yehuda Koren, Liran Carmel, David Harel\r\n// ACE: A Fast Multiscale Eigenvector Computation for Drawing Huge Graphs\r\n// Extended version, available at:\r\n// http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.19.7702&rep=rep1&type=pdf\r\n// Transform the matrix B to reverse the order of the eigenvectors.\r\n// B' = g . (I - B) where g is the Gershgorin bound, an upper bound\r\n// for (the absolute value of) the largest eigenvalue of a matrix.\r\n// Also, the smallest eigenvector is 1^n \r\n\r\nfunction gershgorin_bound(B) {\r\n    var i, j, max = 0, n = B.length, \r\n\tt, row;\r\n    for (i = 0; i < n; i++) {\r\n\trow = B[i];\r\n\tt = row[i];\r\n\tfor (j = 0; j < n; j++)\r\n\t    if (j != i)\r\n\t\tt += Math.abs(row[j]);\r\n\tif (t > max)\r\n\t    max = t;\r\n    }\r\n    if (reorder.debug) {\r\n\tconsole.log('gershgorin_bound=%d', max);\r\n    }\r\n    return max;\r\n}\r\n\r\nfunction fiedler_vector(B, eps) {\r\n    var g = gershgorin_bound(B),\r\n\tn = B.length,\r\n\t// Copy B\r\n\tBhat = B.map(function(row) { return row.slice(); }),\r\n\ti, j, row;\r\n    for (i = 0; i < n; i++) {\r\n\trow = Bhat[i];\r\n\tfor (j = 0; j < n; j++) {\r\n\t    if (i == j)\r\n\t\trow[j] = g - row[j];\r\n\t    else\r\n\t\trow[j] = - row[j];\r\n\t}\r\n    }\r\n    var init = [ reorder.array1d(n, 1), reorder.random_array(n) ],\r\n\teig = reorder.poweriteration_n(Bhat, 2, init, eps, 1);\r\n    return eig[0][1];\r\n}\r\n\r\nreorder.fiedler_vector = fiedler_vector;\r\nfunction spectral_order(graph, comps) {\r\n    var i, vec, comp, perm, order = [];\r\n    if (! comps)\r\n\tcomps = graph.components();\r\n\r\n    for (i = 0; i < comps.length; i++) {\r\n\tcomp = comps[i];\r\n\tvec = reorder.fiedler_vector(reorder.laplacian(graph, comp));\r\n\tperm = reorder.sort_order(vec);\r\n\torder = order.concat(reorder.permute(comp, perm));\r\n    }\r\n    return order;\r\n}\r\n\r\nreorder.spectral_order = spectral_order;\r\n// Takes a matrix, substract the mean of each row\r\n// so that the mean is 0\r\nfunction center(v) {\r\n    var n = v.length;\r\n\r\n    if (n === 0) return null;\r\n    \r\n    var mean = reorder.meancolumns(v),\r\n\to = mean.length,\r\n\tv1 = Array(n),\r\n\ti, j, row;\r\n\r\n    for (i = 0; i < n; i++) {\r\n\trow = v[i].slice(0);\r\n\tfor (j = 0; j < o; j++) {\r\n\t    row[j] -= mean[j];\r\n\t}\r\n\tv1[i] = row;\r\n    }\r\n    return v1;\r\n}\r\n\r\n\r\n// See http://en.wikipedia.org/wiki/Power_iteration\r\nreorder.pca1d = function(v, eps) {\r\n    var n = v.length;\r\n\r\n    if (v.length === 0) return null;\r\n\r\n    v = center(v);\r\n    var cov = reorder.variancecovariance(v);\r\n    return reorder.poweriteration(cov, eps);\r\n};\r\n\r\nreorder.pca_order = function(v, eps) {\r\n    return reorder.sort_order(reorder.pca1d(v, eps));\r\n};\r\n//Corresponence Analysis\r\n// see http://en.wikipedia.org/wiki/Correspondence_analysis\r\n\r\nfunction sumrows(v) {\r\n    var n = v.length,\r\n\to = v[0].length,\r\n\tsumrow = Array(n),\r\n\ti, j, row, s;\r\n\r\n    for (i = 0; i < n; i++) {\r\n\trow = v[i];\r\n\ts = 0;\r\n\tfor (j = 0; j < o; j++) \r\n\t    s += row[j];\r\n\tsumrow[i] = s;\r\n    }\r\n    return sumrow;\r\n}\r\n\r\nfunction sumcols(v) {\r\n    var n = v.length,\r\n\to = v[0].length,\r\n\tsumcol = reorder.zeroes(o),\r\n\ti, j, row;\r\n\r\n    for (i = 0; i < n; i++) {\r\n\trow = v[i];\r\n\tfor (j = 0; j < o; j++)\r\n\t    sumcol[j] += row[j];\r\n    }\r\n    return sumcol;\r\n}\r\n\r\n// Implementation of the decorana fortran code\r\n// See Hill, M. O. 1979. DECORANA - A FORTRAN program for detrended\r\n// correspondence analysis an reciprocal averaging. Cornell University,\r\n// Ithaca, New York. \r\n// And\r\n// Hill, M. O. 1973. Reciprocal averaging: an eigenvector method of\r\n// ordination. J. Ecol. 61:237-49\r\n// The Fortan implementation is available in the \"vegan\" R package:\r\n// https://cran.r-project.org/web/packages/vegan/index.html\r\n\r\nfunction decorana(dat) {\r\n    var ZEROEIG = 1e-7, // consider as zero eigenvalue\r\n\tx, y, aidot, adotj, mi, n, s1,\r\n\tnr = dat.length,\r\n\tnc = dat[0].length;\r\n    \r\n    adotj = sumcols(dat);\r\n    aidot = sumrows(dat);\r\n    //console.log('adotj='); reorder.printvec(adotj);\r\n    //console.log('aidot='); reorder.printvec(aidot);\r\n\r\n    s1 = eigy(reorder.array1d(nr, 1.0),\r\n\t      reorder.array1d(nc, 1.0),\r\n\t      nr, nc, dat, aidot, adotj);\r\n    if (s1.eig < ZEROEIG) {\r\n        s1.rows = s1.cols = [];\r\n\ts1.eig = 0;\r\n    }\r\n    else {\r\n\tx = s1.rows;\r\n\ty = s1.cols;\r\n\tyxmult(y, x, nr, nc, dat);\r\n\tfor (var i = 0; i < nr; i++)\r\n\t    x[i] /= aidot[i];\r\n    }\r\n    return s1;\r\n}\r\n\r\nfunction trans(y, yy, x, aidot, mi, n, dat,prt) {\r\n    var i, j, a1;\r\n    if (prt) console.log('TRANS '+prt);\r\n    yxmult(y,x,mi,n,dat,prt);\r\n    for (i = 0; i < mi; i++) {\r\n\tx[i] = x[i]/aidot[i]; // 10\r\n    }\r\n    // 100\r\n    // a1 = 0.0;\r\n    // for (i = 0; i < mi; i++) \r\n    // \ta1 += aidot[i]*x[i]; // 110\r\n    // for (i = 0; i < mi; i++)\r\n    // \tx[i] -= a1; // 120\r\n    // 200\r\n    xymult(x,yy,mi,n, dat,prt);\r\n}\r\n\r\nfunction printvec(y) {\r\n    console.log('');\r\n    for (var i = 0; i < y.length; i++) {\r\n\tconsole.log('i:'+(i+1)+' v:  '+y[i].toFixed(5));\r\n    }\r\n}\r\n\r\nfunction xymult(x, y, mi, n, dat, prt) {\r\n    var i, j, ax, row;\r\n\r\n    if (prt) {\r\n\tconsole.log('xymult');\r\n\tprintvec(y,5, null, 'y=');\r\n    }\r\n    for (j = 0; j < n; j++)\r\n\ty[j] = 0.0; // 10\r\n    for (i = 0; i < mi; i++) {\r\n\tax = x[i];\r\n\trow = dat[i];\r\n\tfor (j = 0; j < n; j++) \r\n\t    y[j] += ax*row[j]; // 20\r\n    }\r\n    if (prt) {\r\n\t//console.log('xymult[1]=');\r\n\tprintvec(y,5, null, 'y=');\r\n    }\r\n}\r\n\r\nfunction yxmult(y,x,mi,n,dat,prt) {\r\n    var i, j, ax, row;\r\n    if (prt) {\r\n\tconsole.log('yxmult');\r\n\tprintvec(x,5, null, 'x=');\r\n    }\r\n    for (i = 0; i < mi; i++) {\r\n\tax = 0.0;\r\n\trow = dat[i];\r\n\tfor (j = 0; j < n; j++) {\r\n\t    ax += y[j]*row[j]; // 10\r\n\t}\r\n\tx[i] = ax; // 20\r\n    }\r\n    if (prt) {\r\n\t//console.log('yxmult[1]='); \r\n\tprintvec(x,5, null, 'x=');\r\n    }\r\n}\r\n\r\nfunction eigy(x, y, mi, n, dat, aidot, adotj) {\r\n    var i, j, tot, icount, a, ay, ex,\r\n\ta11, a12, a22, a23, a33, a34, a44, \r\n\tres, ax1, ax2, ax3, ax4,\r\n\tb13, b14, b24, row,\r\n\ty2 = reorder.zeroes(n),\r\n\ty3 = reorder.zeroes(n),\r\n\ty4 = reorder.zeroes(n),\r\n\ty5 = reorder.zeroes(n),\r\n\ttol;\r\n\r\n    tot = 0.0;\r\n    for (j = 0; j < n; j++) {\r\n\ttot += adotj[j];\r\n\ty[j] = j+1.0; // 10\r\n    }\r\n    y[0] = 1.1;\r\n    tol=0.000005;\r\n    trans(y,y,x,aidot,mi,n,dat);//,1);\r\n    icount = 0;\r\n    while(true) {\r\n\t// 20\r\n\ta = 0.0;\r\n\tfor (j = 0; j < n; j++)\r\n\t    a += y[j]*adotj[j]; // 30\r\n\ta /= tot;\r\n\tex = 0.0;\r\n\tfor (j = 0; j < n; j++) {\r\n\t    ay = y[j]-a;\r\n\t    ex += ay*ay*adotj[j];\r\n\t    y[j] = ay; // 40\r\n\t}\r\n\tex = Math.sqrt(ex);\r\n\tfor (j = 0; j < n; j++)\r\n\t    y[j] /= ex; // 50\r\n\ttrans(y,y2,x,aidot,mi,n,dat);//,2);\r\n\ta=0.0;\r\n\ta11=0.0;\r\n\ta12=0.0;\r\n\ta22=0.0;\r\n\ta23=0.0;\r\n\ta33=0.0;\r\n\ta34=0.0;\r\n\ta44=0.0;\r\n\tfor (j = 0; j < n; j++) {\r\n\t    ay = y2[j];\r\n\t    y2[j] = ay/adotj[j];\r\n\t    a += ay;\r\n\t    a11 += ay*y[j]; // 60\r\n\t}\r\n\ta /= tot;\r\n\tfor (j = 0; j < n; j++) {\r\n\t    ay = y2[j]-(a+a11*y[j]);\r\n\t    a12 += ay*ay*adotj[j];\r\n\t    y2[j] = ay; // 70\r\n\t}\r\n\ta12 = Math.sqrt(a12);\r\n\tfor (j = 0; j < n; j++)\r\n\t    y2[j] /= a12; // 80\r\n\tif (a12 < tol || icount > 999)\r\n\t    break;\r\n\ticount++;\r\n\ttrans(y2,y3,x,aidot,mi,n,dat);//,3);\r\n\ta = 0.0;\r\n\tb13 = 0.0;\r\n\tfor (j = 0; j < n; j++) {\r\n\t    ay = y3[j];\r\n\t    y3[j] = ay/adotj[j];\r\n\t    a += ay;\r\n\t    a22 +=ay*y2[j];\r\n\t    b13 += ay*y[j]; // 90\r\n\t}\r\n\ta /= tot;\r\n\tfor (j = 0; j < n; j++) {\r\n\t    ay = y3[j]-(a+a22*y2[j]+b13*y[j]);\r\n\t    a23 += ay*ay*adotj[j];\r\n\t    y3[j]=ay; // 100\r\n\t}\r\n\ta23=Math.sqrt(a23);\r\n\tif (a23 > tol) {\r\n\t    // 105\r\n\t    for (j = 0; j < n; j++) {\r\n\t\ty3[j] /= a23; // 110\r\n\t    }\r\n\t    trans(y3,y4,x,aidot,mi,n,dat);//,4);\r\n\t    a = 0.0;\r\n\t    b14 = 0.0;\r\n\t    b24 = 0.0;\r\n\t    for (j = 0; j < n; j++) {\r\n\t\tay = y4[j];\r\n\t\ty4[j] /= adotj[j];\r\n\t\ta += ay;\r\n\t\ta33 += ay*y3[j];\r\n\t\tb14 += ay*y[j];\r\n\t\tb24 += ay*y2[j]; // 120\r\n\t    }\r\n\t    a /= tot;\r\n\t    for (j = 0; j < n; j++) {\r\n\t\tay = y4[j]-(a+a33*y3[j]+b14*y[j]+b24*y2[j]);\r\n\t\ta34 += ay*ay*adotj[j];\r\n\t\ty4[j] = ay; // 130\r\n\t    }\r\n\t    a34=Math.sqrt(a34);\r\n\t    if(a34 > tol) {\r\n\t\t// 135\r\n\t\tfor (j = 0; j < n; j++)\r\n\t\t    y4[j] /= a34; // 140\r\n\t\ttrans(y4,y5,x,aidot,mi,n,dat);//,5);\r\n\t\tfor (j = 0; j < n; j++)\r\n\t\t    a44 += y4[j]*y5[j]; // 150\r\n\t    }\r\n\t    else {\r\n\t\ta34=0.0;\r\n\t    }\r\n\t}\r\n\telse {\r\n\t    a23 = 0.0;\r\n\t}\r\n\t// 160\r\n\tres = solve_tridiag(tol, a11, a12, a22, a23, a33, a34, a44);\r\n\tax1 = res[0]; ax2 = res[1]; ax3 = res[2]; ax4 =res[3];\r\n\t// console.log('i '+icount+\r\n\t// \t    ' ax1 '+ax1.toFixed(6)+\r\n\t// \t    ' ax2 '+ax2.toFixed(6)+\r\n\t// \t    ' ax3 '+ax3.toFixed(6)+\r\n\t// \t    ' ax4 '+ax4.toFixed(6));\r\n\r\n\t// 180\r\n\tif(a12 < tol) break;\r\n\tfor (j = 0; j < n; j++)\r\n\t    y[j]= ax1*y[j]+ax2*y2[j]+ax3*y3[j]+ax4*y4[j]; // 190\r\n\t// goto 20\r\n    }\r\n    // 200\r\n    //console.log('eigenvalue',a11.toFixed(6));\r\n    if (a12 > tol && reorder.debug > 0) {\r\n\tconsole.log(\"residual bigger than tolerance on axis 1\");\r\n    }\r\n    var aymax = y[0],\r\n\taymin = y[0],\r\n\tsign = 1;\r\n    for (j = 1; j < n; j++) {\r\n\ta = y[j];\r\n\tif (a < aymin)\r\n\t    aymin = a;\r\n\telse if (a > aymax)\r\n\t    aymax = a;\r\n    }\r\n    if (-aymin > aymax) {\r\n\tfor (j = 0; j < n; j++) // 210\r\n\t    y[j] = -y[j];\r\n    }\r\n    yxmult(y,x,mi,n,dat);//,true);\r\n    for (i = 0; i < mi; i++)\r\n\tx[i] /= aidot[i]; // 220\r\n    // 225\r\n    var axlong = 0.0;\r\n    for (i = 0; i < mi; i++)\r\n\taxlong += aidot[i]*sqr(x[i]); // 230\r\n    axlong = Math.sqrt(axlong);\r\n    for (i = 0; i < mi; i++)\r\n\tx[i] /= axlong; // 240\r\n    for (j = 0; j < n; j++)\r\n\ty[j] /= axlong; // 250\r\n    var sumsq=0.0,\r\n\tax;\r\n    for (i = 0; i < mi; i++) {\r\n\tax = x[i];\r\n\trow = dat[i];\r\n\tfor (j = 0; j < n; j++) {\r\n\t    sumsq += row[j]*sqr(ax-y[j]); // 255\r\n\t}\r\n\t// 260\r\n    }\r\n    var sd = Math.sqrt(sumsq/tot);\r\n    if (a11 >= 0.999) {\r\n\tsd = aymax/axlong;\r\n\tvar sd1 = -aymin/axlong;\r\n\tif (sd1 > sd)\r\n\t    sd = sd1;\r\n    }\r\n    // 265\r\n    for (j = 0; j < n; j++)\r\n\ty[j] /= sd; // 270\r\n    \r\n    //printvec(x);\r\n    //printvec(y);\r\n    return {rows: x, cols: y, eig: a11};\r\n}\r\n\r\nfunction sqr(x) { return x*x; }\r\n\r\nfunction solve_tridiag(tol, a11, a12, a22, a23, a33, a34, a44) {\r\n    var ax1=1.0, // 160\r\n\tax2=0.1,\r\n\tax3=0.01,\r\n\tax4=0.001,\r\n\titimes,\r\n\taxx1, axx2, axx3, axx4, ex, exx, resi;\r\n    //console.log('a11:'+a11+' a12:'+a12+' a22:'+a22);\r\n    //console.log('a23:'+a23+' a33:'+a33+' a34:'+a34+' a44:'+a44);\r\n    for (itimes = 0; itimes < 100; itimes++) {\r\n\taxx1=a11*ax1+a12*ax2;\r\n\taxx2=a12*ax1+a22*ax2+a23*ax3;\r\n\taxx3=a23*ax2+a33*ax3+a34*ax4;\r\n\taxx4=a34*ax3+a44*ax4;\r\n\tax1=a11*axx1+a12*axx2;\r\n\tax2=a12*axx1+a22*axx2+a23*axx3;\r\n\tax3=a23*axx2+a33*axx3+a34*axx4;\r\n\tax4=a34*axx3+a44*axx4;\r\n\tex=Math.sqrt(sqr(ax1)+sqr(ax2)+sqr(ax3)+sqr(ax4));\r\n\tax1=ax1/ex;\r\n\tax2=ax2/ex;\r\n\tax3=ax3/ex;\r\n\tax4=ax4/ex;\r\n\tif((itimes+1)%5 === 0) {\r\n\t    exx=Math.sqrt(ex);\r\n\t    resi=Math.sqrt(sqr(ax1-axx1/exx)+sqr(ax2-axx2/exx)+\r\n\t\t\t   sqr(ax3-axx3/exx)+sqr(ax4-axx4/exx));\r\n\t}\r\n\tif (resi < tol*0.05)\r\n\t    break;\r\n\t// 170\r\n    }\r\n    // 180\r\n    return [ax1, ax2, ax3, ax4];\r\n}\r\n\r\nreorder.ca_decorana = decorana;\r\nreorder.ca = decorana;\r\n\r\nreorder.ca_order = function(dat) {\r\n    var res = reorder.ca(dat);\r\n    return { rows: reorder.sort_order(res.rows),\r\n\t     cols: reorder.sort_order(res.cols),\r\n\t     details: res };\r\n};\r\n\r\n/*jshint loopfunc:true */\r\nreorder.cuthill_mckee = function(graph, comp) {\r\n    if (comp.length < 3)\r\n\treturn comp;\r\n\r\n    var nodes = graph.nodes(),\r\n\tstart = comp[0], \r\n\tmin_deg = graph.degree(start),\r\n\ti, n, edges, e,\r\n\tvisited = {},\r\n\tqueue = new Queue(),\r\n\tinv = inverse_permutation(comp),\r\n\tperm = [];\r\n\r\n    for (i = 0; i < comp.length; i++) {\r\n\tn = comp[i];\r\n\tif (graph.degree(n) < min_deg) {\r\n\t    min_deg = graph.degree(n);\r\n\t    start = n;\r\n\t    if (min_deg == 1)\r\n\t\tbreak;\r\n\t}\r\n    }\r\n    queue.push(start);\r\n    while (queue.length !== 0) {\r\n\tn = queue.shift();\r\n\tif (visited[n])\r\n\t    continue;\r\n\tvisited[n] = true;\r\n\tperm.push(n);\r\n\te = graph.edges(n)\r\n\t    .map(function(edge) { return graph.other(edge, n).index; })\r\n\t    .filter(function(n) { return !visited[n] && (n in inv); })\r\n\t    .sort(function(a, b) { // ascending by degree\r\n\t\treturn graph.degree(a) - graph.degree(b);\r\n\t    });\r\n\r\n\te.forEach(queue.push, queue);\r\n    }\r\n    return perm;\r\n};\r\n\r\nreorder.reverse_cuthill_mckee = function(graph, comp) {\r\n    return reorder.cuthill_mckee(graph, comp).reverse();\r\n};\r\n\r\n\r\nreorder.cuthill_mckee_order = function(graph, comps) {\r\n    var i, comp, order = [];\r\n    if (! comps) {\r\n\tcomps = graph.components();\r\n    }\r\n    for (i = 0; i < comps.length; i++) {\r\n\tcomp = comps[i];\r\n\torder = order.concat(\r\n\t    reorder.cuthill_mckee(graph, comp));\r\n    }\r\n    return order;\r\n};\r\n\r\nreorder.reverse_cuthill_mckee_order = function(graph, comps) {\r\n    var i, comp, order = [];\r\n    if (! comps) {\r\n\tcomps = graph.components();\r\n    }\r\n    for (i = 0; i < comps.length; i++) {\r\n\tcomp = comps[i];\r\n\torder = order.concat(\r\n\t    reorder.reverse_cuthill_mckee(graph, comp));\r\n    }\r\n    return order;\r\n};\r\n\r\nreorder.condition = function(matrix) {\r\n    var i, j, min, max, v, s, row,\r\n\tret = [];\r\n\r\n    for (i = 0; 0 < matrix.length; i++) {\r\n\trow = matrix[i].slice();\r\n\trow.push(ret);\r\n\tfor (j = 0; j < ret.length; j++) {\r\n\t\tv = row[j];\r\n\t\t// b>=b\r\n\t    if (v !== null) {\r\n\t\tmin = max = row[j];\r\n\t\tbreak;\r\n\t    }\r\n\t}\r\n\tfor (; j < ret.length; j++) {\r\n\t    v = row[j];\r\n\t    if (v < min) min = v;\r\n\t    else if (v > max) max = v;\r\n\t}\r\n\ts = max != min ? 1.0 / (max - min) : 0;\r\n\tfor (j = 1; j < ret.length; j++) {\r\n\t    v = row[j];\r\n\t    if (v !== null && v >= v)\r\n\t\trow[j] = row[j]*s - min;\r\n\t    else\r\n\t\tv = NaN;\r\n\t}\r\n\r\n    }\r\n    return ret;\r\n};\r\nfunction array_to_dicts(data, axes) {\r\n    if (arguments.length < 2) \r\n\taxes = reorder.range(data[0].length);\r\n    var ret = [], row, dict, i, j;\r\n    for (i = 0; i < data.length; i++) {\r\n\trow = data[i];\r\n\tdict = {};\r\n\tfor (j = 0; j < row.length; j++) {\r\n\t    dict[axes[j]] = row[j];\r\n\t}\r\n\tret.push(dict);\r\n    }\r\n    return ret;\r\n}\r\n\r\nreorder.array_to_dicts = array_to_dicts;\r\n\r\nfunction dicts_to_array(dicts, keys) {\r\n    if (arguments.length < 2)\r\n\tkeys = Object.keys(dicts[0]);\r\n    var n = keys.length,\r\n\tm = dicts.length,\r\n\tarray = Array(m), i, j, row;\r\n\r\n    for (i = 0; i < m; i++) {\r\n\trow = Array(n);\r\n\tarray[i] = row;\r\n\tfor (j = 0; j < n; j++)\r\n\t    row[j] = dicts[i][keys[j]];\r\n    }\r\n    return array;\r\n}\r\n\r\nreorder.dicts_to_array = dicts_to_array;\r\n\r\nfunction abs_matrix(x) {\r\n    return x.map(function(y) { return y.map(Math.abs); });\r\n}\r\n\r\nfunction pcp_flip_axes(perm, naxes, pcor) {\r\n    var i, c, sign = 1, signs = [1], negs=0;\r\n    for (i = 1; i < perm.length; i++) {\r\n\tc = pcor[perm[i-1]][perm[i]];\r\n\tif (c < 0)\r\n\t    sign = -sign;\r\n\tif (sign < 0) {\r\n\t    signs.push(-1);\r\n\t    negs++;\r\n\t}\r\n\telse\r\n\t    signs.push(1);\r\n    }\r\n    if (reorder.debug)\r\n\tconsole.log(signs);\r\n    sign = (negs > (perm.length-negs)) ? -1 : 1;\r\n    if (sign==-1) {\r\n\tfor (i = 0; i < (perm.length-1); i++)\r\n\t    signs[i] = signs[i]*sign;\r\n    }\r\n    return signs;\r\n}\r\n\r\nfunction pcp(data, axes) {\r\n    if (! axes)\r\n\taxes = reorder.range(data[0].length);\r\n    \r\n    var tdata = reorder.transpose(data),\r\n\tpcor = reorder.correlation.pearsonMatrix(tdata),\r\n\tabs_pcor = abs_matrix(pcor),\r\n\th1 = science.stats.hcluster()\r\n\t    .linkage(\"complete\")\r\n\t    .distanceMatrix(abs_pcor)(tdata),\r\n\tperm = reorder.optimal_leaf_order()\r\n\t    .distanceMatrix(abs_pcor)(tdata),\r\n\tnaxes = reorder.permute(axes, perm);\r\n    tdata = reorder.permute(tdata, perm);\r\n\r\n    \r\n    var signs = pcp_flip_axes(perm, naxes, pcor),\r\n\tndata = reorder.transpose(tdata);\r\n    return [ndata, perm, naxes, signs, pcor];\r\n}\r\n\r\nreorder.pcp = pcp;\r\n\r\nfunction parcoords(p) {\r\n    p.detectDimensions()\r\n\t.autoscale();\r\n\r\n    var data = p.data(),\r\n\ttypes = p.types(),\r\n\tdimensions = p.dimensions(),\r\n\ttdata = [], row, discarded = [],\r\n\ti, j, k, d;\r\n\r\n    for (i = 0; i < dimensions.length; i++) {\r\n\td = dimensions[i];\r\n\tif (types[d] == 'number') {\r\n\t    row = [];\r\n\t    for (j = 0; j < data.length; j++)\r\n\t\trow.push(data[j][d]);\r\n\t    tdata.push(row);\r\n\t}\r\n\telse if (types[d] == 'date') {\r\n\t    row = [];\r\n\t    for (j = 0; j < data.length; j++)\r\n\t\trow.push(data[j][d].getTime()*0.001);\r\n\t    tdata.push(row);\r\n\t}\r\n\telse {\r\n\t    // remove dimension\r\n\t    dimensions.splice(i, 1);\r\n\t    discarded.push(d);\r\n\t    i--;\r\n\t}\r\n    }\r\n    var pcor = reorder.correlation.pearsonMatrix(tdata),\r\n\tabs_pcor = abs_matrix(pcor),\r\n\th1 = science.stats.hcluster()\r\n\t    .linkage(\"complete\")\r\n\t    .distanceMatrix(abs_pcor)(tdata),\r\n\tperm = reorder.optimal_leaf_order()\r\n\t    .distanceMatrix(abs_pcor)(tdata),\r\n\tnaxes = reorder.permute(dimensions, perm);\r\n    tdata = reorder.permute(tdata, perm);\r\n    \r\n    var signs = pcp_flip_axes(perm, naxes, pcor);\r\n    for (i = 0; i < signs.length; i++) {\r\n\tif (signs[i] < 0)\r\n\t    p.flip(dimensions[i]);\r\n    }\r\n    dimensions = discarded.reverse().concat(dimensions); // put back string columns\r\n    return p.dimensions(dimensions);\r\n}\r\n\r\nreorder.parcoords = parcoords;\r\n\r\nexport default reorder;","// Parallel Sets by Jason Davies, http://www.jasondavies.com/\r\n// Functionality based on http://eagereyes.org/parallel-sets\r\n/* global d3 */\r\n/* eslint indent: \"off\" */\r\nconst d3 = require(\"d3\");\r\n(function() {\r\n  d3.parsets = function() {\r\n    var event = d3.dispatch(\"sortDimensions\", \"sortCategories\", \"ribbonClick\",\"categoryClick\"),\r\n        dimensions_ = autoDimensions,\r\n        dimensionFormat = String,\r\n        tooltip_ = defaultTooltip,\r\n        categoryTooltip = defaultCategoryTooltip,\r\n        value_,\r\n        spacing = 20,\r\n        width,\r\n        height,\r\n        tension = 1,\r\n        tension0,\r\n        duration = 500;\r\n\r\n    // https://stackoverflow.com/questions/47844765/d3-rebind-in-d3-v4\r\n    // Copies a variable number of methods from source to target.\r\n    d3.rebind = function(target, source) {\r\n      var i = 1, n = arguments.length, method;\r\n      while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\r\n      return target;\r\n    };\r\n\r\n    // Method is assumed to be a standard D3 getter-setter:\r\n    // If passed with no arguments, gets the value.\r\n    // If passed with arguments, sets the value and returns the target.\r\n    function d3_rebind(target, source, method) {\r\n      return function() {\r\n        var value = method.apply(source, arguments);\r\n        return value === source ? target : value;\r\n      };\r\n    }\r\n\r\n    function d3_functor(v) {\r\n      return typeof v === \"function\" ? v : function() { return v; };\r\n    }\r\n\r\n    function parsets(selection) {\r\n      selection.each(function(data, i) {\r\n        //console.log(\"parsets \", data);\r\n        var g = d3.select(this),\r\n            ordinal = d3.scaleOrdinal(),\r\n            dragging = false,\r\n            dimensionNames = dimensions_.call(this, data, i),\r\n            dimensions = [],\r\n            tree = {children: {}, count: 0},\r\n            nodes,\r\n            total,\r\n            ribbon,\r\n            ribbonEnter;\r\n\r\n        d3.select(window).on(\"mousemove.parsets.\" + ++parsetsId, unhighlight);\r\n\r\n        if (tension0 == null) tension0 = tension;\r\n        g.selectAll(\".ribbon, .ribbon-mouse\")\r\n            .data([\"ribbon\", \"ribbon-mouse\"], String)\r\n          .enter().append(\"g\")\r\n            .attr(\"class\", String);\r\n\r\n        updateDimensions();\r\n        if (tension != tension0) {\r\n          var t = d3.transition(g);\r\n          if (t.tween) t.tween(\"ribbon\", tensionTween);\r\n          else tensionTween()(1);\r\n        }\r\n\r\n        function tensionTween() {\r\n          var i = d3.interpolateNumber(tension0, tension);\r\n          return function(t) {\r\n            tension0 = i(t);\r\n            ribbon.merge(ribbonEnter).attr(\"d\", ribbonPath);\r\n          };\r\n        }\r\n\r\n        function updateDimensions() {\r\n          // Cache existing bound dimensions to preserve sort order.\r\n          var dimension = g.selectAll(\"g.dimension\"),\r\n              cache = {};\r\n          dimension.each(function(d) { cache[d.name] = d; });\r\n          dimensionNames.forEach(function(d) {\r\n            if (!cache.hasOwnProperty(d)) {\r\n              cache[d] = {name: d, categories: []};\r\n            }\r\n            dimensions.push(cache[d]);\r\n          });\r\n          dimensions.sort(compareY);\r\n          // Populate tree with existing nodes.\r\n          g.select(\".ribbon\").selectAll(\"path\")\r\n              .each(function(d) {\r\n                var path = d.path.split(\"\\0\"),\r\n                    node = tree,\r\n                    n = path.length - 1;\r\n                for (var i = 0; i < n; i++) {\r\n                  var p = path[i];\r\n                  node = node.children.hasOwnProperty(p) ? node.children[p]\r\n                      : node.children[p] = {children: {}, count: 0};\r\n                }\r\n                node.children[d.name] = d;\r\n              });\r\n          tree = buildTree(tree, data, dimensions.map(dimensionName), value_);\r\n          cache = dimensions.map(function(d) {\r\n            var t = {};\r\n            d.categories.forEach(function(c) {\r\n              t[c.name] = c;\r\n            });\r\n            return t;\r\n          });\r\n          (function categories(d, i) {\r\n            if (!d.children) return;\r\n            var dim = dimensions[i],\r\n                t = cache[i];\r\n            for (var k in d.children) {\r\n              if (!t.hasOwnProperty(k)) {\r\n                dim.categories.push(t[k] = {name: k});\r\n              }\r\n              categories(d.children[k], i + 1);\r\n            }\r\n          })(tree, 0);\r\n          dimensions.forEach((d,i)=>{\r\n            dimensions[i].categories = d.categories.sort((a,b)=>{\r\n              return a.name < b.name?-1:1;\r\n            })\r\n          })\r\n          ordinal.domain([]).range(d3.range(dimensions[0].categories.length));\r\n          nodes = layout(tree, dimensions, ordinal);\r\n          total = getTotal(dimensions);\r\n          dimensions.forEach(function(d) {\r\n            d.count = total;\r\n          });\r\n          dimension = dimension.data(dimensions, dimensionName);\r\n\r\n          var dEnter = dimension.enter().append(\"g\")\r\n              .attr(\"class\", \"dimension\")\r\n              .attr(\"transform\", function(d) { return \"translate(0,\" + d.y + \")\"; })\r\n              .on(\"mousedown.parsets\", cancelEvent);\r\n          dimension.merge(dEnter).each(function(d) {\r\n                d.y0 = d.y;\r\n                d.categories.forEach(function(d) { d.x0 = d.x; });\r\n              });\r\n          dEnter.append(\"rect\")\r\n              .attr(\"width\", width)\r\n              .attr(\"y\", -45)\r\n              .attr(\"height\", 45);\r\n          var textEnter = dEnter.append(\"text\")\r\n              .attr(\"class\", \"dimension\")\r\n              .attr(\"transform\", \"translate(0,-25)\");\r\n          textEnter.append(\"tspan\")\r\n              .attr(\"class\", \"name\")\r\n              .text(dimensionFormatName);\r\n          textEnter.append(\"tspan\")\r\n              .attr(\"class\", \"sort alpha\")\r\n              .attr(\"dx\", \"2em\")\r\n              .text(\"alpha »\")\r\n              .on(\"mousedown.parsets\", cancelEvent);\r\n          textEnter.append(\"tspan\")\r\n              .attr(\"class\", \"sort size\")\r\n              .attr(\"dx\", \"2em\")\r\n              .text(\"size »\")\r\n              .on(\"mousedown.parsets\", cancelEvent);\r\n          dimension.merge(dEnter)\r\n              .call(d3.drag()\r\n                // .origin(identity)\r\n                .on(\"start\", function(d) {\r\n                  dragging = true;\r\n                  d.y0 = d.y;\r\n                })\r\n                .on(\"drag\", function(d) {\r\n                  d.y0 = d.y = d3.event.y;\r\n                  for (var i = 1; i < dimensions.length; i++) {\r\n                    if (height * dimensions[i].y < height * dimensions[i - 1].y) {\r\n                      dimensions.sort(compareY);\r\n                      dimensionNames = dimensions.map(dimensionName);\r\n                      ordinal.domain([]).range(d3.range(dimensions[0].categories.length));\r\n                      nodes = layout(tree = buildTree({children: {}, count: 0}, data, dimensionNames, value_), dimensions, ordinal);\r\n                      total = getTotal(dimensions);\r\n                      g.selectAll(\".ribbon, .ribbon-mouse\").selectAll(\"path\").remove();                      \r\n                      updateCategories(dimension.merge(dEnter));\r\n                      updateRibbons();\r\n                      dimension.merge(dEnter).transition().duration(duration)\r\n                          .attr(\"transform\", translateY)\r\n                          .tween(\"ribbon\", ribbonTweenY);\r\n\r\n                      // This isn't really doing anything...\r\n                      event.call(\"sortDimensions\");\r\n                      break;\r\n                    }\r\n                  }\r\n                  d3.select(this)\r\n                      .attr(\"transform\", \"translate(0,\" + d.y + \")\")\r\n                      .transition();\r\n                  ribbon.merge(ribbonEnter).filter(function(r) { return r.source.dimension === d || r.target.dimension === d; })\r\n                      .attr(\"d\", ribbonPath);\r\n                })\r\n                .on(\"end\", function(d) {\r\n                  dragging = false;\r\n                  unhighlight();\r\n                  var y0 = 45,\r\n                      dy = (height - y0 - 2) / (dimensions.length - 1);\r\n                  dimensions.forEach(function(d, i) {\r\n                    d.y = y0 + i * dy;\r\n                  });\r\n                  transition(d3.select(this))\r\n                      .attr(\"transform\", \"translate(0,\" + d.y + \")\")\r\n                      .tween(\"ribbon\", ribbonTweenY);\r\n                }));\r\n          dimension.merge(dEnter).select(\"text\").select(\"tspan.sort.alpha\")\r\n              .on(\"click.parsets\", sortBy(\"alpha\", function(a, b) { return a.name < b.name ? 1 : -1; }, dimension));\r\n          dimension.merge(dEnter).select(\"text\").select(\"tspan.sort.size\")\r\n              .on(\"click.parsets\", sortBy(\"size\", function(a, b) { return a.count - b.count; }, dimension));\r\n          dimension.merge(dEnter).transition().duration(duration)\r\n              .attr(\"transform\", function(d) { return \"translate(0,\" + d.y + \")\"; })\r\n              .tween(\"ribbon\", ribbonTweenY);\r\n          dimension.exit().remove();\r\n\r\n          updateCategories(dimension.merge(dEnter));\r\n          updateRibbons();\r\n        }\r\n\r\n        function sortBy(type, f, dimension) {\r\n          return function(d) {\r\n            var direction = this.__direction = -(this.__direction || 1);\r\n            d3.select(this).text(direction > 0 ? type + \" »\" : \"« \" + type);\r\n            d.categories.sort(function() { return direction * f.apply(this, arguments); });\r\n            nodes = layout(tree, dimensions, ordinal);\r\n            updateRibbons();\r\n            updateCategories(dimension.merge(dimension.enter()));\r\n            \r\n            event.call(\"sortCategories\");\r\n          };\r\n        }\r\n\r\n        function updateRibbons() {\r\n          //console.log(\"UpdateRibbons\")\r\n          ribbon = g.select(\".ribbon\").selectAll(\"path\")\r\n              .data(nodes, function(d) { return d.path; });\r\n          ribbonEnter = ribbon.enter().append(\"path\")\r\n              .each(function(d) {\r\n                d.source.x0 = d.source.x;\r\n                d.target.x0 = d.target.x;\r\n              });\r\n\r\n          ribbonEnter.merge(ribbon)\r\n              .attr(\"class\", function(d) { return \"category-\" + d.major; })\r\n              .attr(\"d\", ribbonPath);\r\n          ribbonEnter.merge(ribbon).sort(function(a, b) { return b.count - a.count; });\r\n          ribbon.exit().remove();\r\n\r\n\r\n          var mouse = g.select(\".ribbon-mouse\").selectAll(\"path\")\r\n              .data(nodes, function(d) { return d.path; });\r\n          var mouseEnter = mouse.enter().append(\"path\");   \r\n\r\n          mouseEnter.merge(mouse)\r\n              .on(\"mousemove.parsets\", function(d) {\r\n                unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\r\n                if (dragging) return;\r\n                highlight(d = d.node, true);\r\n                showTooltip(tooltip_.call(this, d));\r\n                d3.event.stopPropagation();\r\n              })\r\n              .on(\"click.parsets\",function(d){\r\n                ribbon.merge(ribbonEnter).classed(\"active\", false);\r\n                ribbon.merge(ribbonEnter).classed(\"selected\", false);\r\n                if (dragging) return;\r\n                highlightAndSelect(d = d.node, true);\r\n                //console.log(\"ribbon Click\", d);\r\n                event.call(\"ribbonClick\",this, {\"data\":d,\"selected\":true});\r\n                //highlight(d = d.node, true);\r\n                d3.event.stopPropagation();\r\n              });\r\n          mouse.merge(mouseEnter)\r\n              .sort(function(a, b) { return b.count - a.count; })\r\n              .attr(\"d\", ribbonPathStatic);\r\n          mouse.exit().remove();\r\n        }\r\n\r\n        // Animates the x-coordinates only of the relevant ribbon paths.\r\n        function ribbonTweenX(d) {\r\n          var nodes = [d],\r\n              r = ribbon.merge(ribbonEnter).filter(function(r) {\r\n                var s, t;\r\n                if (r.source.node === d) nodes.push(s = r.source);\r\n                if (r.target.node === d) nodes.push(t = r.target);\r\n                return s || t;\r\n              }),\r\n              i = nodes.map(function(d) { return d3.interpolateNumber(d.x0, d.x); }),\r\n              n = nodes.length;\r\n          return function(t) {\r\n            for (var j = 0; j < n; j++) nodes[j].x0 = i[j](t);\r\n            r.attr(\"d\", ribbonPath);\r\n          };\r\n        }\r\n\r\n        // Animates the y-coordinates only of the relevant ribbon paths.\r\n        function ribbonTweenY(d) {\r\n          var r = ribbon.merge(ribbonEnter).filter(function(r) { return r.source.dimension.name == d.name || r.target.dimension.name == d.name; }),\r\n              i = d3.interpolateNumber(d.y0, d.y);\r\n          return function(t) {\r\n            d.y0 = i(t);\r\n            r.attr(\"d\", ribbonPath);\r\n          };\r\n        }\r\n\r\n        // Highlight a node and its descendants, and optionally its ancestors.\r\n        function highlight(d, ancestors) {\r\n          if (dragging) return;\r\n          var highlight = [];\r\n          (function recurse(d) {\r\n            highlight.push(d);\r\n            for (var k in d.children) recurse(d.children[k]);\r\n          })(d);\r\n          highlight.shift();\r\n          if (ancestors) while (d) {\r\n            highlight.push(d); d = d.parent;\r\n          }\r\n          ribbon.merge(ribbonEnter).filter(function(d) {\r\n            var active = highlight.indexOf(d.node) >= 0;\r\n            if (active) this.parentNode.appendChild(this);\r\n            return active;\r\n          }).classed(\"active\", true);\r\n          \r\n        }\r\n        function highlightAndSelect(d, ancestors) {\r\n          if (dragging) return;\r\n          var highlight = [];\r\n          (function recurse(d) {\r\n            highlight.push(d);\r\n            for (var k in d.children) recurse(d.children[k]);\r\n          })(d);\r\n          highlight.shift();\r\n          if (ancestors) while (d) {\r\n            highlight.push(d); d = d.parent;\r\n          }\r\n          ribbon.merge(ribbonEnter).filter(function(d) {\r\n            var active = highlight.indexOf(d.node) >= 0;\r\n            if (active) this.parentNode.appendChild(this);\r\n            return active;\r\n          }).classed(\"selected\", true).classed(\"active\", true);\r\n          \r\n        }\r\n        function unselectedRibbon(ribbon){\r\n          return ribbon.filter(function(d){\r\n            return !d3.select(this).classed(\"selected\");\r\n          })\r\n        }\r\n        // Unhighlight all nodes.\r\n        function unhighlight() {\r\n          if (dragging) return;\r\n          unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\r\n          hideTooltip();\r\n        }\r\n\r\n        function updateCategories(g) {          \r\n          var category = g.selectAll(\"g.category\")\r\n              .data(function(d) { return d.categories; }, function(d) { return d.dimension.name+\"_\"+d.name; });\r\n          \r\n          var categoryEnter = category.enter().append(\"g\")\r\n              .attr(\"class\", \"category\");\r\n\r\n          categoryEnter.merge(category)\r\n              .attr(\"transform\", function(d) { return \"translate(\" + d.x + \")\"; });\r\n          //console.log(\"Category enter update exit data\", category.enter(), category, category.exit(), g.data())\r\n          // TODO: Don't really understand why I had to comment this one out\r\n          // TODO: Very weird to see the duplicate data. \r\n          // TODO: Suprised when dragging it, I don't see duplicate data.\r\n          //category.exit().remove();\r\n          category\r\n              .merge(categoryEnter)\r\n              .on(\"mousemove.parsets\", function(d) {\r\n                unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\r\n                if (dragging) return;\r\n                d.nodes.forEach(function(d) { highlight(d); });\r\n                showTooltip(categoryTooltip.call(this, d));\r\n                d3.event.stopPropagation();\r\n              })\r\n              .on(\"mouseout.parsets\", unhighlight)\r\n              .on(\"mousedown.parsets\", cancelEvent)\r\n              \r\n              .call(d3.drag()\r\n                // .origin(identity)\r\n                .on(\"start\", function(d) {\r\n                  dragging = true;\r\n                  d.x0 = d.x;\r\n                })\r\n                .on(\"drag\", function(d) {\r\n                  d.x = d3.event.x;\r\n                  var categories = d.dimension.categories;\r\n                  for (var i = 0, c = categories[0]; ++i < categories.length;) {\r\n                    if (c.x + c.dx / 2 > (c = categories[i]).x + c.dx / 2) {\r\n                      categories.sort(function(a, b) { return a.x + a.dx / 2 - b.x - b.dx / 2; });\r\n                      nodes = layout(tree, dimensions, ordinal);\r\n                      updateRibbons();\r\n                      updateCategories(g);\r\n                      highlight(d.node);\r\n                      event.call(\"sortCategories\");\r\n                      break;\r\n                    }\r\n                  }\r\n                  var x = 0,\r\n                      p = spacing / (categories.length - 1);\r\n                  categories.forEach(function(e) {\r\n                    if (d === e) e.x0 = d3.event.x;\r\n                    e.x = x;\r\n                    x += e.count / total * (width - spacing) + p;\r\n                  });\r\n                  d3.select(this)\r\n                      .attr(\"transform\", function(d) { return \"translate(\" + d.x0 + \")\"; })\r\n                      .transition();\r\n                  ribbon.merge(ribbonEnter).filter(function(r) { return r.source.node === d || r.target.node === d; })\r\n                      .attr(\"d\", ribbonPath);\r\n                })\r\n                .on(\"end\", function(d) {\r\n                  dragging = false;\r\n                  unhighlight();\r\n                  updateRibbons();\r\n                  transition(d3.select(this))\r\n                      .attr(\"transform\", \"translate(\" + d.x + \")\")\r\n                      .tween(\"ribbon\", ribbonTweenX);\r\n                }))\r\n                .on(\"click.parsets\",function(d){\r\n                  if (dragging) return;\r\n                  ribbon.merge(ribbonEnter).classed(\"active\", false);\r\n                  ribbon.merge(ribbonEnter).classed(\"selected\", false);\r\n                  \r\n                  d.nodes.forEach(function(d) { highlightAndSelect(d); });\r\n                  event.call(\"categoryClick\",this, {\"data\":d,\"selected\":true});\r\n                  d3.event.stopPropagation();\r\n                });\r\n          category.merge(categoryEnter).transition().duration(duration)\r\n              .attr(\"transform\", function(d) { return \"translate(\" + d.x + \")\"; })\r\n              .tween(\"ribbon\", ribbonTweenX);\r\n\r\n          categoryEnter.append(\"rect\")\r\n              .attr(\"width\", function(d) { return d.dx; })\r\n              .attr(\"y\", -20)\r\n              .attr(\"height\", 20);\r\n          categoryEnter.append(\"line\")\r\n              .style(\"stroke-width\", 2);\r\n          categoryEnter.append(\"text\")\r\n              .attr(\"dy\", \"-.3em\");\r\n          category.merge(categoryEnter).select(\"rect\")\r\n              .attr(\"width\", function(d) { return d.dx; })\r\n              .attr(\"class\", function(d) {\r\n                return \"category-\" + (d.dimension === dimensions[0] ? ordinal(d.name) : \"background\");\r\n              });\r\n          category.merge(categoryEnter).select(\"line\")\r\n              .attr(\"x2\", function(d) { return d.dx; });\r\n          category.merge(categoryEnter).select(\"text\")\r\n              .text(truncateText(function(d) { return d.name; }, function(d) { return d.dx; }));\r\n        }\r\n      });\r\n    }\r\n\r\n    parsets.dimensionFormat = function(_) {\r\n      if (!arguments.length) return dimensionFormat;\r\n      dimensionFormat = _;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.dimensions = function(_) {\r\n      if (!arguments.length) return dimensions_;\r\n      dimensions_ = d3_functor(_);\r\n      return parsets;\r\n    };\r\n\r\n    parsets.value = function(_) {\r\n      if (!arguments.length) return value_;\r\n      value_ = d3_functor(_);\r\n      return parsets;\r\n    };\r\n\r\n    parsets.width = function(_) {\r\n      if (!arguments.length) return width;\r\n      width = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.height = function(_) {\r\n      if (!arguments.length) return height;\r\n      height = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.spacing = function(_) {\r\n      if (!arguments.length) return spacing;\r\n      spacing = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.tension = function(_) {\r\n      if (!arguments.length) return tension;\r\n      tension = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.duration = function(_) {\r\n      if (!arguments.length) return duration;\r\n      duration = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.tooltip = function(_) {\r\n      if (!arguments.length) return tooltip;\r\n      tooltip_ = _ == null ? defaultTooltip : _;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.categoryTooltip = function(_) {\r\n      if (!arguments.length) return categoryTooltip;\r\n      categoryTooltip = _ == null ? defaultCategoryTooltip : _;\r\n      return parsets;\r\n    };\r\n\r\n    var body = d3.select(\"body\");\r\n    var tooltip = body.append(\"div\")\r\n        .style(\"display\", \"none\")\r\n        .attr(\"class\", \"parsets tooltip\");\r\n\r\n    return d3.rebind(parsets, event, \"on\").value(1).width(960).height(600);\r\n\r\n    function dimensionFormatName(d, i) {\r\n      return dimensionFormat.call(this, d.name, i);\r\n    }\r\n\r\n    function showTooltip(html) {\r\n      var m = d3.mouse(body.node());\r\n      tooltip\r\n          .style(\"display\", null)\r\n          .style(\"left\", m[0] + 30 + \"px\")\r\n          .style(\"top\", m[1] - 20 + \"px\")\r\n          .html(html);\r\n    }\r\n\r\n    function hideTooltip() {\r\n      tooltip.style(\"display\", \"none\");\r\n    }\r\n\r\n    function transition(g) {\r\n      return duration ? g.transition().duration(duration).ease(parsetsEase) : g;\r\n    }\r\n\r\n    function layout(tree, dimensions, ordinal) {\r\n      var nodes = [],\r\n          nd = dimensions.length,\r\n          y0 = 45,\r\n          dy = (height - y0 - 2) / (nd - 1);\r\n      dimensions.forEach(function(d, i) {\r\n        d.categories.forEach(function(c) {\r\n          c.dimension = d;\r\n          c.count = 0;\r\n          c.nodes = [];\r\n        });\r\n        d.y = y0 + i * dy;\r\n      });\r\n\r\n      // Compute per-category counts.\r\n      var total = (function rollup(d, i) {\r\n        if (!d.children) return d.count;\r\n        var dim = dimensions[i],\r\n            total = 0;\r\n        dim.categories.forEach(function(c) {\r\n          var child = d.children[c.name];\r\n          if (!child) return;\r\n          c.nodes.push(child);\r\n          var count = rollup(child, i + 1);\r\n          c.count += count;\r\n          total += count;\r\n        });\r\n        return total;\r\n      })(tree, 0);\r\n\r\n      // Stack the counts.\r\n      dimensions.forEach(function(d) {\r\n        d.categories = d.categories.filter(function(d) { return d.count; });\r\n        var x = 0,\r\n            p = spacing / (d.categories.length - 1);\r\n        d.categories.forEach(function(c) {\r\n          c.x = x;\r\n          c.dx = c.count / total * (width - spacing);\r\n          c.in = {dx: 0};\r\n          c.out = {dx: 0};\r\n          x += c.dx + p;\r\n        });\r\n      });\r\n\r\n      var dim = dimensions[0];\r\n      \r\n      //console.log(\"dimensions\", dim, dimensions)\r\n      dim.categories.forEach(function(c) {\r\n        var k = c.name;\r\n        if (tree.children.hasOwnProperty(k)) {\r\n          recurse(c, {node: tree.children[k], path: k}, 1, ordinal(k));\r\n        }\r\n      });\r\n\r\n      function recurse(p, d, depth, major) {\r\n        var node = d.node,\r\n            dimension = dimensions[depth];\r\n        dimension.categories.forEach(function(c) {\r\n          var k = c.name;\r\n          if (!node.children.hasOwnProperty(k)) return;\r\n          var child = node.children[k];\r\n          child.path = d.path + \"\\0\" + k;\r\n          var target = child.target || {node: c, dimension: dimension};\r\n          target.x = c.in.dx;\r\n          target.dx = child.count / total * (width - spacing);\r\n          c.in.dx += target.dx;\r\n          var source = child.source || {node: p, dimension: dimensions[depth - 1]};\r\n          source.x = p.out.dx;\r\n          source.dx = target.dx;\r\n          p.out.dx += source.dx;\r\n\r\n          child.node = child;\r\n          child.source = source;\r\n          child.target = target;\r\n          child.major = major;\r\n          nodes.push(child);\r\n          if (depth + 1 < dimensions.length) recurse(c, child, depth + 1, major);\r\n        });\r\n      }\r\n      return nodes;\r\n    }\r\n\r\n    // Dynamic path string for transitions.\r\n    function ribbonPath(d) {\r\n      var s = d.source,\r\n          t = d.target;\r\n      return ribbonPathString(s.node.x0 + s.x0, s.dimension.y0, s.dx, t.node.x0 + t.x0, t.dimension.y0, t.dx, tension0);\r\n    }\r\n\r\n    // Static path string for mouse handlers.\r\n    function ribbonPathStatic(d) {\r\n      var s = d.source,\r\n          t = d.target;\r\n      return ribbonPathString(s.node.x + s.x, s.dimension.y, s.dx, t.node.x + t.x, t.dimension.y, t.dx, tension);\r\n    }\r\n\r\n    function ribbonPathString(sx, sy, sdx, tx, ty, tdx, tension) {\r\n      var m0, m1;\r\n      return (tension === 1 ? [\r\n          \"M\", [sx, sy],\r\n          \"L\", [tx, ty],\r\n          \"h\", tdx,\r\n          \"L\", [sx + sdx, sy],\r\n          \"Z\"]\r\n       : [\"M\", [sx, sy],\r\n          \"C\", [sx, m0 = tension * sy + (1 - tension) * ty], \" \",\r\n               [tx, m1 = tension * ty + (1 - tension) * sy], \" \", [tx, ty],\r\n          \"h\", tdx,\r\n          \"C\", [tx + tdx, m1], \" \", [sx + sdx, m0], \" \", [sx + sdx, sy],\r\n          \"Z\"]).join(\"\");\r\n    }\r\n\r\n    function compareY(a, b) {\r\n      a = height * a.y; b = height * b.y;\r\n      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : a <= a ? -1 : b <= b ? 1 : NaN;\r\n    }\r\n  };\r\n  d3.parsets.tree = buildTree;\r\n\r\n  function autoDimensions(d) {\r\n    return d.length ? d3.keys(d[0]).sort() : [];\r\n  }\r\n\r\n  function cancelEvent() {\r\n    d3.event.stopPropagation();\r\n    d3.event.preventDefault();\r\n  }\r\n\r\n  function dimensionName(d) { return d.name; }\r\n\r\n  function getTotal(dimensions) {\r\n    return dimensions[0].categories.reduce(function(a, d) {\r\n      return a + d.count;\r\n    }, 0);\r\n  }\r\n\r\n  // Given a text function and width function, truncates the text if necessary to\r\n  // fit within the given width.\r\n  function truncateText(text, width) {\r\n    return function(d, i) {\r\n      var t = this.textContent = text(d, i),\r\n          w = width(d, i);\r\n      if (this.getComputedTextLength() < w) return t;\r\n      this.textContent = \"…\" + t;\r\n      var lo = 0,\r\n          hi = t.length + 1,\r\n          x;\r\n      while (lo < hi) {\r\n        var mid = lo + hi >> 1;\r\n        if ((x = this.getSubStringLength(0, mid)) < w) lo = mid + 1;\r\n        else hi = mid;\r\n      }\r\n      return lo > 1 ? t.substr(0, lo - 2) + \"…\" : \"\";\r\n    };\r\n  }\r\n\r\n  var percent = d3.format(\".2%\"),\r\n      comma = d3.format(\"d\"),\r\n      parsetsEase = d3.easeElastic,\r\n      parsetsId = 0;\r\n\r\n  // Construct tree of all category counts for a given ordered list of\r\n  // dimensions.  Similar to d3.nest, except we also set the parent.\r\n  function buildTree(root, data, dimensions, value) {\r\n    zeroCounts(root);\r\n    var n = data.length,\r\n        nd = dimensions.length;\r\n    for (var i = 0; i < n; i++) {\r\n      var d = data[i],\r\n          v = +value(d, i),\r\n          node = root;\r\n      for (var j = 0; j < nd; j++) {\r\n        var dimension = dimensions[j],\r\n            category = d[dimension],\r\n            children = node.children;\r\n        node.count += v;\r\n        node = children.hasOwnProperty(category) ? children[category]\r\n            : children[category] = {\r\n              children: j === nd - 1 ? null : {},\r\n              count: 0,\r\n              parent: node,\r\n              dimension: dimension,\r\n              name: category\r\n            };\r\n      }\r\n      node.count += v;\r\n    }\r\n    return root;\r\n  }\r\n\r\n  function zeroCounts(d) {\r\n    d.count = 0;\r\n    if (d.children) {\r\n      for (var k in d.children) zeroCounts(d.children[k]);\r\n    }\r\n  }\r\n\r\n  function identity(d) { return d; }\r\n\r\n  function translateY(d) { return \"translate(0,\" + d.y + \")\"; }\r\n\r\n  function defaultTooltip(d) {\r\n    var count = d.count,\r\n        path = [];\r\n    while (d.parent) {\r\n      if (d.name) path.unshift(d.name);\r\n      d = d.parent;\r\n    }\r\n    return path.join(\" → \") + \"<br>\" + comma(count) + \" (\" + percent(count / d.count) + \")\";\r\n  }\r\n\r\n  function defaultCategoryTooltip(d) {\r\n    return d.name + \"<br>\" + comma(d.count) + \" (\" + percent(d.count / d.dimension.count) + \")\";\r\n  }\r\n})();","//import * as selection from \"d3-selection\";\r\n//import * as drag from \"d3-drag\";\r\nimport * as d3 from \"d3\";\r\nimport classifyPoint from \"robust-point-in-polygon\";\r\n\r\nexport default function() {\r\n\r\n    var items =[],\r\n        closePathDistance = 75,\r\n        closePathSelect = true,\r\n        isPathClosed = false,\r\n        hoverSelect = true,\r\n        targetArea,\r\n        on = {start:function(){}, draw: function(){}, end: function(){}};\r\n\r\n    // Function to execute on call\r\n    function lasso(_this) {\r\n        //console.log(\"lasso initialize\",_this);\r\n        // add a new group for the lasso\r\n        var g = _this.append(\"g\")\r\n            .attr(\"class\",\"lasso\");\r\n        \r\n        // add the drawn path for the lasso\r\n        var dyn_path = g.append(\"path\")\r\n            .attr(\"class\",\"drawn\");\r\n        \r\n        // add a closed path\r\n        var close_path = g.append(\"path\")\r\n            .attr(\"class\",\"loop_close\");\r\n        \r\n        // add an origin node\r\n        var origin_node = g.append(\"circle\")\r\n            .attr(\"class\",\"origin\");\r\n\r\n        // The transformed lasso path for rendering\r\n        var tpath;\r\n\r\n        // The lasso origin for calculations\r\n        var origin;\r\n\r\n        // The transformed lasso origin for rendering\r\n        var torigin;\r\n\r\n        // Store off coordinates drawn\r\n        var drawnCoords;\r\n\r\n         // Apply drag behaviors\r\n        var dragAction = d3.drag()\r\n            .on(\"start\",dragstart)\r\n            .on(\"drag\",dragmove)\r\n            .on(\"end\",dragend);\r\n\r\n        // Call drag\r\n        targetArea.call(dragAction);\r\n\r\n        function dragstart() {\r\n            // Init coordinates\r\n            drawnCoords = [];\r\n\r\n            // Initialize paths\r\n            tpath = \"\";\r\n            dyn_path.attr(\"d\",null);\r\n            close_path.attr(\"d\",null);\r\n\r\n            // Set every item to have a false selection and reset their center point and counters\r\n            items.nodes().forEach(function(e) {            \r\n                e.__lasso.possible = false;\r\n                e.__lasso.selected = false;\r\n                e.__lasso.hoverSelect = false;\r\n                e.__lasso.loopSelect = false;\r\n                \r\n                var box = e.getBoundingClientRect();\r\n                e.__lasso.lassoPoint = [Math.round(box.left + box.width/2),Math.round(box.top + box.height/2)];\r\n            });\r\n\r\n            // if hover is on, add hover function\r\n            if(hoverSelect) {\r\n                items.on(\"mouseover.lasso\",function() {\r\n                    // if hovered, change lasso selection attribute to true\r\n                    this.__lasso.hoverSelect = true;\r\n                });\r\n            }\r\n\r\n            // Run user defined start function\r\n            on.start();\r\n        }\r\n\r\n        function dragmove() {\r\n            // Get mouse position within body, used for calculations\r\n            var x,y;\r\n            if(d3.event.sourceEvent.type === \"touchmove\") {\r\n                x = d3.event.sourceEvent.touches[0].clientX;\r\n                y = d3.event.sourceEvent.touches[0].clientY;\r\n            }\r\n            else {\r\n                x = d3.event.sourceEvent.clientX;\r\n                y = d3.event.sourceEvent.clientY;\r\n            }\r\n            \r\n\r\n            // Get mouse position within drawing area, used for rendering\r\n            var tx = d3.mouse(this)[0];\r\n            var ty = d3.mouse(this)[1];\r\n\r\n            // Initialize the path or add the latest point to it\r\n            if (tpath===\"\") {\r\n                tpath = tpath + \"M \" + tx + \" \" + ty;\r\n                origin = [x,y];\r\n                torigin = [tx,ty];\r\n                // Draw origin node\r\n                origin_node\r\n                    .attr(\"cx\",tx)\r\n                    .attr(\"cy\",ty)\r\n                    .attr(\"r\",7)\r\n                    .attr(\"display\",null);\r\n            }\r\n            else {\r\n                tpath = tpath + \" L \" + tx + \" \" + ty;\r\n            }\r\n\r\n            drawnCoords.push([x,y]);\r\n\r\n            // Calculate the current distance from the lasso origin\r\n            var distance = Math.sqrt(Math.pow(x-origin[0],2)+Math.pow(y-origin[1],2));\r\n\r\n            // Set the closed path line\r\n            var close_draw_path = \"M \" + tx + \" \" + ty + \" L \" + torigin[0] + \" \" + torigin[1];\r\n\r\n            // Draw the lines\r\n            dyn_path.attr(\"d\",tpath);\r\n\r\n            close_path.attr(\"d\",close_draw_path);\r\n\r\n            // Check if the path is closed\r\n            isPathClosed = distance<=closePathDistance ? true : false;\r\n\r\n            // If within the closed path distance parameter, show the closed path. otherwise, hide it\r\n            if(isPathClosed && closePathSelect) {\r\n                close_path.attr(\"display\",null);\r\n            }\r\n            else {\r\n                close_path.attr(\"display\",\"none\");\r\n            }\r\n\r\n            items.nodes().forEach(function(n) {\r\n                n.__lasso.loopSelect = (isPathClosed && closePathSelect) ? (classifyPoint(drawnCoords,n.__lasso.lassoPoint) < 1) : false; \r\n                n.__lasso.possible = n.__lasso.hoverSelect || n.__lasso.loopSelect; \r\n            });\r\n\r\n            on.draw();\r\n        }\r\n\r\n        function dragend() {\r\n            // Remove mouseover tagging function\r\n            items.on(\"mouseover.lasso\",null);\r\n\r\n            items.nodes().forEach(function(n) {\r\n                n.__lasso.selected = n.__lasso.possible;\r\n                n.__lasso.possible = false;\r\n            });\r\n\r\n            // Clear lasso\r\n            dyn_path.attr(\"d\",null);\r\n            close_path.attr(\"d\",null);\r\n            origin_node.attr(\"display\",\"none\");\r\n\r\n            // Run user defined end function\r\n            on.end();\r\n        }\r\n    }\r\n\r\n    // Set or get list of items for lasso to select\r\n    lasso.items  = function(_) {\r\n        if (!arguments.length) return items;\r\n        items = _;\r\n        var nodes = items.nodes();\r\n        nodes.forEach(function(n) {\r\n            n.__lasso = {\r\n                \"possible\": false,\r\n                \"selected\": false\r\n            };\r\n        });\r\n        return lasso;\r\n    };\r\n\r\n    // Return possible items\r\n    lasso.possibleItems = function() {\r\n        return items.filter(function() {\r\n            return this.__lasso.possible;\r\n        });\r\n    }\r\n\r\n    // Return selected items\r\n    lasso.selectedItems = function() {\r\n        return items.filter(function() {\r\n            return this.__lasso.selected;\r\n        });\r\n    }\r\n\r\n    // Return not possible items\r\n    lasso.notPossibleItems = function() {\r\n        return items.filter(function() {\r\n            return !this.__lasso.possible;\r\n        });\r\n    }\r\n\r\n    // Return not selected items\r\n    lasso.notSelectedItems = function() {\r\n        return items.filter(function() {\r\n            return !this.__lasso.selected;\r\n        });\r\n    }\r\n\r\n    // Distance required before path auto closes loop\r\n    lasso.closePathDistance  = function(_) {\r\n        if (!arguments.length) return closePathDistance;\r\n        closePathDistance = _;\r\n        return lasso;\r\n    };\r\n\r\n    // Option to loop select or not\r\n    lasso.closePathSelect = function(_) {\r\n        if (!arguments.length) return closePathSelect;\r\n        closePathSelect = _===true ? true : false;\r\n        return lasso;\r\n    };\r\n\r\n    // Not sure what this is for\r\n    lasso.isPathClosed = function(_) {\r\n        if (!arguments.length) return isPathClosed;\r\n        isPathClosed = _===true ? true : false;\r\n        return lasso;\r\n    };\r\n\r\n    // Option to select on hover or not\r\n    lasso.hoverSelect = function(_) {\r\n        if (!arguments.length) return hoverSelect;\r\n        hoverSelect = _===true ? true : false;\r\n        return lasso;\r\n    };\r\n\r\n    // Events\r\n    lasso.on = function(type,_) {\r\n        if(!arguments.length) return on;\r\n        if(arguments.length===1) return on[type];\r\n        var types = [\"start\",\"draw\",\"end\"];\r\n        if(types.indexOf(type)>-1) {\r\n            on[type] = _;\r\n        }\r\n        return lasso;\r\n    };\r\n\r\n    // Area where lasso can be triggered from\r\n    lasso.targetArea = function(_) {\r\n        if(!arguments.length) return targetArea;\r\n        targetArea = _;\r\n        return lasso;\r\n    }\r\n\r\n\r\n    \r\n    return lasso;\r\n};","// create main global object\r\nvar tsnejs = tsnejs || { REVISION: 'ALPHA' };\r\n\r\n(function(global) {\r\n  \"use strict\";\r\n\r\n  // utility function\r\n  var assert = function(condition, message) {\r\n    if (!condition) { throw message || \"Assertion failed\"; }\r\n  }\r\n\r\n  // syntax sugar\r\n  var getopt = function(opt, field, defaultval) {\r\n    if(opt.hasOwnProperty(field)) {\r\n      return opt[field];\r\n    } else {\r\n      return defaultval;\r\n    }\r\n  }\r\n\r\n  // return 0 mean unit standard deviation random number\r\n  var return_v = false;\r\n  var v_val = 0.0;\r\n  var gaussRandom = function() {\r\n    if(return_v) { \r\n      return_v = false;\r\n      return v_val; \r\n    }\r\n    var u = 2*Math.random()-1;\r\n    var v = 2*Math.random()-1;\r\n    var r = u*u + v*v;\r\n    if(r == 0 || r > 1) return gaussRandom();\r\n    var c = Math.sqrt(-2*Math.log(r)/r);\r\n    v_val = v*c; // cache this for next function call for efficiency\r\n    return_v = true;\r\n    return u*c;\r\n  }\r\n\r\n  // return random normal number\r\n  var randn = function(mu, std){ return mu+gaussRandom()*std; }\r\n\r\n  // utilitity that creates contiguous vector of zeros of size n\r\n  var zeros = function(n) {\r\n    if(typeof(n)==='undefined' || isNaN(n)) { return []; }\r\n    if(typeof ArrayBuffer === 'undefined') {\r\n      // lacking browser support\r\n      var arr = new Array(n);\r\n      for(var i=0;i<n;i++) { arr[i]= 0; }\r\n      return arr;\r\n    } else {\r\n      return new Float64Array(n); // typed arrays are faster\r\n    }\r\n  }\r\n\r\n  // utility that returns 2d array filled with random numbers\r\n  // or with value s, if provided\r\n  var randn2d = function(n,d,s) {\r\n    var uses = typeof s !== 'undefined';\r\n    var x = [];\r\n    for(var i=0;i<n;i++) {\r\n      var xhere = [];\r\n      for(var j=0;j<d;j++) { \r\n        if(uses) {\r\n          xhere.push(s); \r\n        } else {\r\n          xhere.push(randn(0.0, 1e-4)); \r\n        }\r\n      }\r\n      x.push(xhere);\r\n    }\r\n    return x;\r\n  }\r\n\r\n  // compute L2 distance between two vectors\r\n  var L2 = function(x1, x2) {\r\n    var D = x1.length;\r\n    var d = 0;\r\n    for(var i=0;i<D;i++) { \r\n      var x1i = x1[i];\r\n      var x2i = x2[i];\r\n      d += (x1i-x2i)*(x1i-x2i);\r\n    }\r\n    return d;\r\n  }\r\n\r\n  // compute pairwise distance in all vectors in X\r\n  var xtod = function(X) {\r\n    var N = X.length;\r\n    var dist = zeros(N * N); // allocate contiguous array\r\n    for(var i=0;i<N;i++) {\r\n      for(var j=i+1;j<N;j++) {\r\n        var d = L2(X[i], X[j]);\r\n        dist[i*N+j] = d;\r\n        dist[j*N+i] = d;\r\n      }\r\n    }\r\n    return dist;\r\n  }\r\n\r\n  // compute (p_{i|j} + p_{j|i})/(2n)\r\n  var d2p = function(D, perplexity, tol) {\r\n    var Nf = Math.sqrt(D.length); // this better be an integer\r\n    var N = Math.floor(Nf);\r\n    assert(N === Nf, \"D should have square number of elements.\");\r\n    var Htarget = Math.log(perplexity); // target entropy of distribution\r\n    var P = zeros(N * N); // temporary probability matrix\r\n\r\n    var prow = zeros(N); // a temporary storage compartment\r\n    for(var i=0;i<N;i++) {\r\n      var betamin = -Infinity;\r\n      var betamax = Infinity;\r\n      var beta = 1; // initial value of precision\r\n      var done = false;\r\n      var maxtries = 50;\r\n\r\n      // perform binary search to find a suitable precision beta\r\n      // so that the entropy of the distribution is appropriate\r\n      var num = 0;\r\n      while(!done) {\r\n        //debugger;\r\n\r\n        // compute entropy and kernel row with beta precision\r\n        var psum = 0.0;\r\n        for(var j=0;j<N;j++) {\r\n          var pj = Math.exp(- D[i*N+j] * beta);\r\n          if(i===j) { pj = 0; } // we dont care about diagonals\r\n          prow[j] = pj;\r\n          psum += pj;\r\n        }\r\n        // normalize p and compute entropy\r\n        var Hhere = 0.0;\r\n        for(var j=0;j<N;j++) {\r\n          if(psum == 0) {\r\n             var pj = 0;\r\n          } else {\r\n             var pj = prow[j] / psum;\r\n          }\r\n          prow[j] = pj;\r\n          if(pj > 1e-7) Hhere -= pj * Math.log(pj);\r\n        }\r\n\r\n        // adjust beta based on result\r\n        if(Hhere > Htarget) {\r\n          // entropy was too high (distribution too diffuse)\r\n          // so we need to increase the precision for more peaky distribution\r\n          betamin = beta; // move up the bounds\r\n          if(betamax === Infinity) { beta = beta * 2; }\r\n          else { beta = (beta + betamax) / 2; }\r\n\r\n        } else {\r\n          // converse case. make distrubtion less peaky\r\n          betamax = beta;\r\n          if(betamin === -Infinity) { beta = beta / 2; }\r\n          else { beta = (beta + betamin) / 2; }\r\n        }\r\n\r\n        // stopping conditions: too many tries or got a good precision\r\n        num++;\r\n        if(Math.abs(Hhere - Htarget) < tol) { done = true; }\r\n        if(num >= maxtries) { done = true; }\r\n      }\r\n\r\n      // console.log('data point ' + i + ' gets precision ' + beta + ' after ' + num + ' binary search steps.');\r\n      // copy over the final prow to P at row i\r\n      for(var j=0;j<N;j++) { P[i*N+j] = prow[j]; }\r\n\r\n    } // end loop over examples i\r\n\r\n    // symmetrize P and normalize it to sum to 1 over all ij\r\n    var Pout = zeros(N * N);\r\n    var N2 = N*2;\r\n    for(var i=0;i<N;i++) {\r\n      for(var j=0;j<N;j++) {\r\n        Pout[i*N+j] = Math.max((P[i*N+j] + P[j*N+i])/N2, 1e-100);\r\n      }\r\n    }\r\n\r\n    return Pout;\r\n  }\r\n\r\n  // helper function\r\n  function sign(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; }\r\n\r\n  var tSNE = function(opt) {\r\n    var opt = opt || {};\r\n    this.perplexity = getopt(opt, \"perplexity\", 30); // effective number of nearest neighbors\r\n    this.dim = getopt(opt, \"dim\", 2); // by default 2-D tSNE\r\n    this.epsilon = getopt(opt, \"epsilon\", 10); // learning rate\r\n\r\n    this.iter = 0;\r\n  }\r\n\r\n  tSNE.prototype = {\r\n\r\n    // this function takes a set of high-dimensional points\r\n    // and creates matrix P from them using gaussian kernel\r\n    initDataRaw: function(X) {\r\n      var N = X.length;\r\n      var D = X[0].length;\r\n      assert(N > 0, \" X is empty? You must have some data!\");\r\n      assert(D > 0, \" X[0] is empty? Where is the data?\");\r\n      var dists = xtod(X); // convert X to distances using gaussian kernel\r\n      this.P = d2p(dists, this.perplexity, 1e-4); // attach to object\r\n      this.N = N; // back up the size of the dataset\r\n      this.initSolution(); // refresh this\r\n    },\r\n\r\n    // this function takes a given distance matrix and creates\r\n    // matrix P from them.\r\n    // D is assumed to be provided as a list of lists, and should be symmetric\r\n    initDataDist: function(D) {\r\n      var N = D.length;\r\n      assert(N > 0, \" X is empty? You must have some data!\");\r\n      // convert D to a (fast) typed array version\r\n      var dists = zeros(N * N); // allocate contiguous array\r\n      for(var i=0;i<N;i++) {\r\n        for(var j=i+1;j<N;j++) {\r\n          var d = D[i][j];\r\n          dists[i*N+j] = d;\r\n          dists[j*N+i] = d;\r\n        }\r\n      }\r\n      this.P = d2p(dists, this.perplexity, 1e-4);\r\n      this.N = N;\r\n      this.initSolution(); // refresh this\r\n    },\r\n\r\n    // (re)initializes the solution to random\r\n    initSolution: function() {\r\n      // generate random solution to t-SNE\r\n      this.Y = randn2d(this.N, this.dim); // the solution\r\n      this.gains = randn2d(this.N, this.dim, 1.0); // step gains to accelerate progress in unchanging directions\r\n      this.ystep = randn2d(this.N, this.dim, 0.0); // momentum accumulator\r\n      this.iter = 0;\r\n    },\r\n\r\n    // return pointer to current solution\r\n    getSolution: function() {\r\n      return this.Y;\r\n    },\r\n\r\n    // perform a single step of optimization to improve the embedding\r\n    step: function() {\r\n      this.iter += 1;\r\n      var N = this.N;\r\n\r\n      var cg = this.costGrad(this.Y); // evaluate gradient\r\n      var cost = cg.cost;\r\n      var grad = cg.grad;\r\n\r\n      // perform gradient step\r\n      var ymean = zeros(this.dim);\r\n      for(var i=0;i<N;i++) {\r\n        for(var d=0;d<this.dim;d++) {\r\n          var gid = grad[i][d];\r\n          var sid = this.ystep[i][d];\r\n          var gainid = this.gains[i][d];\r\n\r\n          // compute gain update\r\n          var newgain = sign(gid) === sign(sid) ? gainid * 0.8 : gainid + 0.2;\r\n          if(newgain < 0.01) newgain = 0.01; // clamp\r\n          this.gains[i][d] = newgain; // store for next turn\r\n\r\n          // compute momentum step direction\r\n          var momval = this.iter < 250 ? 0.5 : 0.8;\r\n          var newsid = momval * sid - this.epsilon * newgain * grad[i][d];\r\n          this.ystep[i][d] = newsid; // remember the step we took\r\n\r\n          // step!\r\n          this.Y[i][d] += newsid; \r\n\r\n          ymean[d] += this.Y[i][d]; // accumulate mean so that we can center later\r\n        }\r\n      }\r\n\r\n      // reproject Y to be zero mean\r\n      for(var i=0;i<N;i++) {\r\n        for(var d=0;d<this.dim;d++) {\r\n          this.Y[i][d] -= ymean[d]/N;\r\n        }\r\n      }\r\n\r\n      //if(this.iter%100===0) console.log('iter ' + this.iter + ', cost: ' + cost);\r\n      return cost; // return current cost\r\n    },\r\n\r\n    // for debugging: gradient check\r\n    debugGrad: function() {\r\n      var N = this.N;\r\n\r\n      var cg = this.costGrad(this.Y); // evaluate gradient\r\n      var cost = cg.cost;\r\n      var grad = cg.grad;\r\n\r\n      var e = 1e-5;\r\n      for(var i=0;i<N;i++) {\r\n        for(var d=0;d<this.dim;d++) {\r\n          var yold = this.Y[i][d];\r\n\r\n          this.Y[i][d] = yold + e;\r\n          var cg0 = this.costGrad(this.Y);\r\n\r\n          this.Y[i][d] = yold - e;\r\n          var cg1 = this.costGrad(this.Y);\r\n          \r\n          var analytic = grad[i][d];\r\n          var numerical = (cg0.cost - cg1.cost) / ( 2 * e );\r\n          console.log(i + ',' + d + ': gradcheck analytic: ' + analytic + ' vs. numerical: ' + numerical);\r\n\r\n          this.Y[i][d] = yold;\r\n        }\r\n      }\r\n    },\r\n\r\n    // return cost and gradient, given an arrangement\r\n    costGrad: function(Y) {\r\n      var N = this.N;\r\n      var dim = this.dim; // dim of output space\r\n      var P = this.P;\r\n\r\n      var pmul = this.iter < 100 ? 4 : 1; // trick that helps with local optima\r\n\r\n      // compute current Q distribution, unnormalized first\r\n      var Qu = zeros(N * N);\r\n      var qsum = 0.0;\r\n      for(var i=0;i<N;i++) {\r\n        for(var j=i+1;j<N;j++) {\r\n          var dsum = 0.0;\r\n          for(var d=0;d<dim;d++) {\r\n            var dhere = Y[i][d] - Y[j][d];\r\n            dsum += dhere * dhere;\r\n          }\r\n          var qu = 1.0 / (1.0 + dsum); // Student t-distribution\r\n          Qu[i*N+j] = qu;\r\n          Qu[j*N+i] = qu;\r\n          qsum += 2 * qu;\r\n        }\r\n      }\r\n      // normalize Q distribution to sum to 1\r\n      var NN = N*N;\r\n      var Q = zeros(NN);\r\n      for(var q=0;q<NN;q++) { Q[q] = Math.max(Qu[q] / qsum, 1e-100); }\r\n\r\n      var cost = 0.0;\r\n      var grad = [];\r\n      for(var i=0;i<N;i++) {\r\n        var gsum = new Array(dim); // init grad for point i\r\n        for(var d=0;d<dim;d++) { gsum[d] = 0.0; }\r\n        for(var j=0;j<N;j++) {\r\n          cost += - P[i*N+j] * Math.log(Q[i*N+j]); // accumulate cost (the non-constant portion at least...)\r\n          var premult = 4 * (pmul * P[i*N+j] - Q[i*N+j]) * Qu[i*N+j];\r\n          for(var d=0;d<dim;d++) {\r\n            gsum[d] += premult * (Y[i][d] - Y[j][d]);\r\n          }\r\n        }\r\n        grad.push(gsum);\r\n      }\r\n\r\n      return {cost: cost, grad: grad};\r\n    }\r\n  }\r\n\r\n  global.tSNE = tSNE; // export tSNE class\r\n})(tsnejs);\r\n\r\n\r\n// export the library to window, or to module in nodejs\r\n(function(lib) {\r\n  \"use strict\";\r\n  if (typeof module === \"undefined\" || typeof module.exports === \"undefined\") {\r\n    window.tsnejs = lib; // in ordinary browser attach library to window\r\n  } else {\r\n    module.exports = lib; // in nodejs\r\n  }\r\n})(tsnejs);","// Color Helper\r\n\r\nconst d3_10color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"];\r\nconst color_brewer1 = [\"#fbb4ae\",\"#b3cde3\", \"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\",\"#fddaec\"];\r\nconst color_brewer2 = [\"#b3e2cd\",\"#fdcdac\", \"#cbd5e8\", \"#f4cae4\", \"#e6f5c9\", \"#fff2ae\", \"#f1e2cc\", \"#cccccc\"];\r\nconst COLORS: string[] = [\r\n    \"#1A7AB1\",\r\n    \"#ADC8E6\",\r\n    \"#FF772D\",\r\n    \"#FFB87F\",\r\n    \"#2AA13A\",\r\n    \"#98E090\",\r\n    \"#FF9398\",\r\n    \"#9467B9\",\r\n    \"#C5B0D3\",\r\n    \"#C49B95\",\r\n    \"#E474C0\",\r\n    \"#F7B4D1\",\r\n    \"#BCBC3D\",\r\n    \"#07C1CD\"\r\n    ]\r\n\r\nconst GREEN: string[] = [\r\n    \"#498B77\",\r\n    \"#89C2AE\",\r\n    \"#C1D6D3\"\r\n]\r\nconst BLUE: string[] = [\r\n    \"#3E97C7\",\r\n    \"#72B3CF\",\r\n    \"#8FCCDD\",\r\n    \"#C8DADE\"\r\n\r\n]\r\nconst ORANGE: string[] = [\r\n    \"#E96206\",\r\n    \"#F79143\",\r\n    \"#F6AD76\",\r\n    \"#F7CEA7\"\r\n]\r\nconst PINK: string[] = [\r\n    \"#F6B1C3\",\r\n    \"#F07F93\",\r\n    \"#DE4863\",\r\n    \"#BC0F46\"\r\n\r\n]\r\nconst RED: string[] = [\"#DC143C\"];\r\nconst YELLOW : string[] = ['#fee08b'];\r\nconst GRAY: string[] = ['#999999'];\r\nconst getLinearColor = (ColorList: string[], step:number) => {\r\n    let totalColor = ColorList.length;\r\n    let divide = 1/ (totalColor - 1);\r\n    let location = Math.floor(step / divide);\r\n    if(location == totalColor - 1){\r\n        location = location - 1;\r\n    }\r\n    let offset = step - location * divide;\r\n    let adjusted_offset = offset / divide;\r\n    return getGradientColor(ColorList[location], ColorList[location+1], adjusted_offset);\r\n}\r\nconst getGradientColor = (startColor : string,endColor :string,step : number) => {\r\n    let colorRgb = (sColor : string)=>{\r\n        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n        var sColor = sColor.toLowerCase();\r\n        if(sColor && reg.test(sColor)){\r\n            if(sColor.length === 4){\r\n                var sColorNew = \"#\";\r\n                for(var i=1; i<4; i+=1){\r\n                    sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));\r\n                }\r\n                sColor = sColorNew;\r\n            }\r\n            var sColorChange = [];\r\n            for(var i=1; i<7; i+=2){\r\n                sColorChange.push(parseInt(\"0x\"+sColor.slice(i,i+2)));\r\n            }\r\n            return sColorChange;\r\n        }else{\r\n            return sColor;\r\n        }\r\n    };\r\n    startColor = startColor.replace(/\\s+/g,\"\");\r\n    endColor = endColor.replace(/\\s+/g,\"\");\r\n    let startRGB : any = colorRgb(startColor);//转换为rgb数组模式\r\n    //console.log(startRGB);\r\n    let startR = startRGB[0];\r\n    let startG = startRGB[1];\r\n    let startB = startRGB[2];\r\n\r\n    let endRGB : any = colorRgb(endColor);\r\n    //console.log(endRGB);\r\n\r\n    let endR = endRGB[0];\r\n    let endG = endRGB[1];\r\n    let endB = endRGB[2];\r\n    if(step>1){\r\n        console.log(\"out of range step: \", step);\r\n        step = 1;\r\n    }else if(step<0){\r\n        console.log(\"out of range step: \", step);\r\n        step = 0;\r\n    }\r\n    let sR = (endR-startR)*step;//总差值\r\n    let sG = (endG-startG)*step;\r\n    let sB = (endB-startB)*step;\r\n    var R = parseInt((sR+startR));\r\n    var G = parseInt((sG+startG));\r\n    var B = parseInt((sB+startB));\r\n    var strHex = \"#\";\r\n    var aColor = new Array();\r\n    aColor[0] = R;\r\n    aColor[1] = G;\r\n    aColor[2] = B;\r\n    for(let j=0; j<3; j++){\r\n        let hex : string = Number(aColor[j]).toString(16);\r\n        let shex : string = Number(aColor[j])<10 ? '0'+hex :hex;\r\n        if(shex === \"0\"){\r\n            shex += shex;\r\n        }\r\n        strHex += shex;\r\n    }\r\n    return strHex;\r\n}\r\n\r\n\r\nconst EChartsColor = [\r\n    \"#c23531\",\r\n    \"#2f4554\",\r\n    \"#61a0a8\",\r\n    \"#d48265\",\r\n    \"#91c7ae\",\r\n    \"#749f83\"\r\n]\r\n\r\nconst DefaultColor = BLUE[1];\r\nconst StartColor = BLUE[0];\r\nconst EndColor = RED[0];\r\nconst getCoraNodeColor = ( node_label:number,color_encode:number = 2) =>{\r\n    if(color_encode === 1 || color_encode === 2 || color_encode === 3){\r\n        return d3_10color[node_label];\r\n    }else if(color_encode === 5){\r\n        if(node_label){\r\n            return GREEN[0];\r\n        }else{\r\n            return RED[0];\r\n        }\r\n    }\r\n    \r\n}\r\nconst getCoraTextColor = (node_label:number) =>{\r\n    if(node_label === 0){\r\n\r\n        // Train\r\n        return BLUE[0];\r\n    }else{\r\n        return GRAY[0];\r\n    }\r\n}\r\n\r\nconst getInfectionNodeColor = (show_mode:number, node_features:any, color_mode = 0) => {\r\n    if(show_mode == 1){\r\n        // Input Graph\r\n        // Assume size of node_features  = 4\r\n        if(node_features[0] == 1){\r\n            // Sick\r\n            return RED[0];\r\n        }else if(node_features[0] == -1 && node_features[1] == -1){\r\n            // Normal\r\n            return BLUE[0];\r\n        }else if(node_features[0] == -1 && node_features[1] == 1){\r\n            // Immune\r\n            return GREEN[0];\r\n        }\r\n    }else if (show_mode == 2){\r\n        // Grouth Truth\r\n        if(node_features[0] == 1){\r\n            // Label : Sick\r\n            return RED[0];\r\n        }else if(node_features[0] == 0){\r\n            // Label : Normal\r\n            return BLUE[0];\r\n        }\r\n    }else if (show_mode == 3){\r\n        // Model Output\r\n        let value = (1/(1+Math.exp(-node_features[0])));\r\n        return getLinearColor([StartColor,\"#FFFFFF\", EndColor], value);\r\n    }else if(show_mode==4){\r\n        // Explaination\r\n        if(color_mode === 0){\r\n            // LRP & Node Classification\r\n            let value = (1/(1+Math.exp(-node_features)));\r\n            return getLinearColor([StartColor,\"#FFFFFF\", EndColor], value);\r\n        }else if(color_mode === 1){\r\n            // SA / GBP \r\n            let value = node_features;\r\n            if(value>1){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 1;\r\n            }else if(value < 0){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 0;\r\n            }\r\n            return getLinearColor([\"#FFFFFF\", EndColor], value);\r\n        }else if(color_mode === 2){\r\n            // Graph Classification\r\n            let value = node_features;\r\n            if(value>1){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 1;\r\n            }else if(value < 0){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 0;\r\n            }\r\n            return getLinearColor([StartColor,\"#FFFFFF\", EndColor], value);\r\n        }\r\n        \r\n    }\r\n    return DefaultColor;\r\n}\r\nconst getInfectionEdgeColor = (show_mode:number, edge_features:any, color_mode =0 ) => {\r\n    if(show_mode == 1 || show_mode == 2 || show_mode == 3){\r\n        // Input Graph / Ground Truth / Model Output\r\n        // Assume size of node_features  = 4\r\n        if(edge_features[0] == 1){\r\n            // Virtual\r\n            return BLUE[2];\r\n        }else if(edge_features[0] == -1){\r\n            // Normal\r\n            return GRAY[0];\r\n        }\r\n    }else if(show_mode==4){\r\n        // Explaination\r\n        //let value = (1/(1+Math.exp(-edge_features)));\r\n        //return getLinearColor([StartColor,\"#DDDDDD\", EndColor], value);\r\n        if(color_mode === 0){\r\n            // LRP\r\n            let value = (1/(1+Math.exp(-edge_features)));\r\n            return getLinearColor([StartColor,\"#DDDDDD\", EndColor], value);\r\n        }else if(color_mode === 1){\r\n            // SA / GBP\r\n            let value = edge_features;\r\n            if(value>1){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 1;\r\n            }else if(value < 0){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 0;\r\n            }\r\n            return getLinearColor([\"#DDDDDD\", EndColor], value);\r\n        }\r\n    }\r\n    return DefaultColor;\r\n}\r\n\r\n// Transform Data Helper\r\nfunction constructNeighborSet(graph_in:any){\r\n    let senders = graph_in.senders;\r\n    let receivers = graph_in.receivers;\r\n    let node_num = graph_in.feature.length;\r\n    let NeighborSet:any = {};\r\n    for(let i = 0; i<node_num ;i++){\r\n        NeighborSet[i] = [];\r\n    }\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in NeighborSet){\r\n        }else{\r\n            NeighborSet[nowreceiver] = []\r\n        }\r\n        NeighborSet[nowreceiver].push(senders[i]);\r\n    }\r\n    return NeighborSet;\r\n}\r\nfunction constructPathDict(message_passing:any){\r\n    let senders = message_passing.senders;\r\n    let receivers = message_passing.receivers;\r\n    let values = message_passing.values;\r\n    let PathDict:any = {};\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in PathDict){\r\n        }else{\r\n            PathDict[nowreceiver] = {}\r\n        }\r\n        PathDict[nowreceiver][senders[i]] = values[i];\r\n    }\r\n    return PathDict;\r\n}\r\nfunction getTrainColor(node_id:any, train_set:any){\r\n    if(train_set.has(node_id)){\r\n        return \"#fff\";\r\n        //return \"#000\";\r\n    }else{\r\n        return \"#fff\";\r\n    }\r\n}\r\nfunction getNodeStatisticStr(selectedNodeLength: number, totalNodeLength: number){\r\n    let str : string = \"\" + selectedNodeLength + \"/\"+ totalNodeLength;\r\n    let percentage : number ;\r\n    if(totalNodeLength === 0){\r\n\r\n    }else{\r\n        percentage = selectedNodeLength / totalNodeLength * 100;\r\n        str = str + \" (\" + percentage.toFixed(2) +\"%)\"\r\n    }\r\n    return str;\r\n}\r\nconst plainOptions = ['Train', 'Valid', 'Test','Others'];\r\nconst defaultCheckedList = ['Train', 'Valid', 'Test', 'Others'];\r\nfunction getInspectCategoryOptions(){\r\n    return plainOptions;\r\n}\r\nfunction getDefaultInspectCategoryOptions(){\r\n    return defaultCheckedList;\r\n}\r\n\r\nfunction compareSelectedNodeIdList(list_a:any, list_b:any){\r\n    if(list_a.length === list_b.length){\r\n        for(let i = 0; i<list_a.length; i++){\r\n            if(list_a[i] === list_b[i]){\r\n\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\nfunction cropAnchorsList(anchors_list:any, K_value:any){\r\n    anchors_list.sort((a:any,b:any)=>{\r\n        if(a.anchor_similarity>b.anchor_similarity){\r\n            return -1;\r\n        }else{\r\n            return 1;\r\n        }\r\n    })\r\n    if(K_value<1){\r\n        K_value = 1;\r\n    }\r\n    if(K_value > anchors_list.length){\r\n        K_value = anchors_list.length;\r\n    }\r\n    anchors_list = anchors_list.slice(0,K_value);\r\n    return anchors_list;\r\n}\r\n\r\nfunction calculateFeatureSimilarity(feature1:any, feature2:any){\r\n    let len1 = feature1.length;\r\n    let len2 = feature2.length;\r\n    let common = 0;\r\n    for(let k = 0; k<len1; k++){\r\n        if(feature2.indexOf(feature1[k])>=0){\r\n            common = common + 1;\r\n        }\r\n    }\r\n    let total_length = len1+len2 - common;\r\n    if(total_length === 0){\r\n        return 0;\r\n    }else{\r\n        return common / total_length; \r\n    }\r\n}\r\n\r\nfunction calculateCosSimilarity(feature1:any, feature1_value:any, feature2:any, feature2_value:any){\r\n    let len1 = feature1.length;\r\n    let len2 = feature2.length;\r\n    let common = 0;\r\n    let norm_1 = 0;\r\n    let norm_2 = 0;\r\n    let eps = 1e-8;\r\n    for(let k = 0; k<len1; k++){\r\n        let idx2 = feature2.indexOf(feature1[k]);\r\n        if(idx2>=0){\r\n            common = common + feature1_value[k]*feature2_value[idx2];\r\n        }\r\n        norm_1 = norm_1 + feature1_value[k]*feature1_value[k];\r\n    }\r\n    for(let k = 0; k<len2; k++){\r\n        norm_2 = norm_2 + feature2_value[k]*feature2_value[k];\r\n    }\r\n    norm_1 = Math.sqrt(norm_1);\r\n    norm_2 = Math.sqrt(norm_2);\r\n    if(norm_1<eps){\r\n        norm_1 = eps;\r\n    }\r\n    if(norm_2<eps){\r\n        norm_2 = eps;\r\n    }\r\n    let cos = common / (norm_1 * norm_2);\r\n    if(cos>=1){\r\n        cos = 1;\r\n    }else if(cos<0){\r\n        cos = 0;\r\n    }\r\n    return cos;\r\n    \r\n}\r\n\r\nfunction getSimilarityFeatureSet(node_list:any, anchor_list:any, feature_list:any, feature_value_list:any, label_list:any, k:number=5){\r\n    let feature_similarity_list:any = {};\r\n    //console.log(\"getF \", feature_list, feature_list.length);\r\n    for(let i = 0; i<node_list.length; i++){\r\n        let max_feature_similarity = 0;\r\n        let max_anchor_set = [];\r\n        let all_anchor_similarity_list:any = [];\r\n        for(let j = 0; j<anchor_list.length; j++){\r\n            let idx_1 = node_list[i];\r\n            let idx_2 = anchor_list[j];\r\n            let feature_sim = calculateCosSimilarity(feature_list[idx_1], feature_value_list[idx_1], feature_list[idx_2], feature_value_list[idx_2]);\r\n            if(feature_sim > max_feature_similarity){\r\n                max_feature_similarity = feature_sim;\r\n                max_anchor_set = [anchor_list[j]];\r\n            }else if(feature_sim === max_feature_similarity){\r\n                max_anchor_set.push(anchor_list[j]);\r\n            }\r\n            all_anchor_similarity_list.push({\r\n                \"anchor_id\":idx_2,\r\n                \"anchor_label\":label_list[idx_2],\r\n                \"anchor_similarity\":feature_sim\r\n            })\r\n        }\r\n        all_anchor_similarity_list = all_anchor_similarity_list.sort((a:any,b:any)=>{\r\n            return a.anchor_similarity > b.anchor_similarity ? -1:1;\r\n        })\r\n        let topk_anchor_similarity_list = all_anchor_similarity_list.slice(0,k);\r\n        feature_similarity_list[\"\"+node_list[i]] = {\r\n            \"feature_similarity\":max_feature_similarity,\r\n            \"feature_sim_set\":max_anchor_set,\r\n            \"topk_anchor_similarity_list\":topk_anchor_similarity_list\r\n        }\r\n    }\r\n    return feature_similarity_list;\r\n}\r\n\r\n\r\n\r\nfunction getShortestPathDistanceSet(node_list:any, node_num:number,  neighbor_set:any, anchor_list:any){\r\n    console.log(\"getShortestPathDistanceSet begin anchor_list.length\", anchor_list.length);\r\n    let shortest_path_list:any = {};\r\n    let anchor_set = new Set(anchor_list);\r\n    //console.log(\"anchor_set\", anchor_set);\r\n    for(let i = 0 ;i < node_list.length; i++){\r\n        let queue = [];\r\n        queue.push([node_list[i], 0]);\r\n        let shortest_path_distance:any = \"inf\";\r\n        let shortest_path_set : any = [];\r\n        let mask = new Array(node_num).fill(0);\r\n        //console.log(\"mask\", mask);\r\n        while(queue.length > 0){\r\n            let curr:any = queue.shift();\r\n            if(mask[curr[0]]){\r\n                continue;\r\n            }\r\n            mask[curr[0]] = 1;\r\n            if(anchor_set.has(curr[0])){\r\n                //console.log(\"discoverd\", curr[0]);\r\n                if(shortest_path_distance === \"inf\"){\r\n                    shortest_path_distance = curr[1];\r\n                    shortest_path_set.push(curr[0]);\r\n                }else if(shortest_path_distance === curr[1]){\r\n                    shortest_path_set.push(curr[0]);\r\n\r\n                }else{\r\n                    break;\r\n                }\r\n            }else{\r\n                let neighbors = neighbor_set[curr[0]];\r\n                for(let j = 0; j <neighbors.length; j++){\r\n                    if(!mask[neighbors[j]]){\r\n                        queue.push([neighbors[j], curr[1]+1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        shortest_path_list[\"\"+node_list[i]] = {\r\n            \"shortest_path_distance\":shortest_path_distance,\r\n            \"shortest_path_set\":shortest_path_set\r\n        }\r\n        //break;\r\n\r\n    }\r\n    console.log(\"getShortestPathDistanceSet end\");\r\n    return shortest_path_list;\r\n}\r\n\r\nfunction updateCNtable(cn_table:any, cgt:any, cpt:any, ngt: any, npt:any){\r\n    if(cgt === ngt){\r\n        cn_table[\"cgt_ngt\"] = cn_table[\"cgt_ngt\"] + 1;\r\n    }\r\n    if(cgt === npt){\r\n        cn_table[\"cgt_npt\"] = cn_table[\"cgt_npt\"] + 1;\r\n    }\r\n    if(cpt === ngt){\r\n        cn_table[\"cpt_ngt\"] = cn_table[\"cpt_ngt\"] + 1;\r\n    }\r\n    if(cpt === npt){\r\n        cn_table[\"cpt_npt\"] = cn_table[\"cpt_npt\"] + 1;\r\n    }\r\n    return cn_table;\r\n}\r\n\r\nfunction constructMetaInformation(node_num:number, NeighborSet:any,graph_target:any, graph_out:any){\r\n    let degree_list = [];\r\n    let one_hop_accuracy_list = [];\r\n    let cn_consistency_list = [];\r\n    \r\n    for(let i = 0; i < node_num; i++) {\r\n        let degree = 0;\r\n        let one_hop_accuracy = 0;\r\n        let center_node_gt = graph_target[i];\r\n        let center_node_pt = graph_out[i];\r\n        let cn = {\r\n            \"cgt_npt\":0,\r\n            \"cgt_ngt\":0,\r\n            \"cpt_npt\":0,\r\n            \"cpt_ngt\":0\r\n        }\r\n        if(i in NeighborSet){\r\n            degree = NeighborSet[i].length;\r\n            let correctnum = 0;\r\n            for(let j = 0; j < degree; j ++){\r\n                let nownode = NeighborSet[i][j];\r\n                if(graph_target[nownode] === graph_out[nownode]){\r\n                    correctnum = correctnum + 1;\r\n                }\r\n                cn = updateCNtable(cn,center_node_gt, center_node_pt, graph_target[nownode], graph_out[nownode]);\r\n            }\r\n            if(degree === 0){\r\n                one_hop_accuracy = 0;\r\n                cn[\"cgt_ngt\"] = 0;\r\n                cn[\"cgt_npt\"] = 0;\r\n                cn[\"cpt_ngt\"] = 0;\r\n                cn[\"cpt_npt\"] = 0;\r\n            }else{\r\n                one_hop_accuracy = correctnum / degree;\r\n                cn[\"cgt_ngt\"] = cn[\"cgt_ngt\"] / degree;\r\n                cn[\"cgt_npt\"] = cn[\"cgt_npt\"] / degree;\r\n                cn[\"cpt_ngt\"] = cn[\"cpt_ngt\"] / degree;\r\n                cn[\"cpt_npt\"] = cn[\"cpt_npt\"] / degree;\r\n            }\r\n            \r\n            \r\n        }\r\n\r\n        degree_list.push(degree);\r\n        one_hop_accuracy_list.push(one_hop_accuracy);\r\n        cn_consistency_list.push(cn);\r\n    }\r\n    return {\r\n        \"degree_list\": degree_list,\r\n        \"one_hop_accuracy_list\":one_hop_accuracy_list,\r\n        \"cn_consistency_list\":cn_consistency_list\r\n    }\r\n}\r\n\r\nfunction constructSelectedMask(node_num:number,CheckedList:any, mask:any){\r\n            \r\n    let train_mask = mask.train;\r\n    let test_mask = mask.test;\r\n    let valid_mask=  mask.valid;\r\n    let all_mask = [...train_mask,...test_mask,...valid_mask];\r\n    let other_mask = [];\r\n    for(let i = 0; i < node_num; i++){\r\n        if(all_mask.indexOf(i)>=0){\r\n\r\n        }else{\r\n            other_mask.push(i);\r\n        }\r\n    }\r\n    let selected_mask:any[] = [];\r\n    //console.log(\"Train\",CheckedList,CheckedList.indexOf(\"Train\")>=0);\r\n    if(CheckedList.indexOf(\"Train\")>=0){\r\n        selected_mask = selected_mask.concat(train_mask);\r\n    }\r\n    if(CheckedList.indexOf(\"Test\")>=0){\r\n        selected_mask = selected_mask.concat(test_mask);\r\n    }\r\n\r\n    if(CheckedList.indexOf(\"Valid\")>=0){\r\n        selected_mask = selected_mask.concat(valid_mask);\r\n    }\r\n\r\n    if(CheckedList.indexOf(\"Others\")>=0){\r\n        selected_mask = selected_mask.concat(other_mask);\r\n    }\r\n    //selected_mask.sort();\r\n    return selected_mask;\r\n\r\n}\r\n/*\r\nfunction constructRange(data_list:any){\r\n    let range:any = [];\r\n    for(let i =0 ;i <data_list.length; i++){\r\n        if(range.indexOf(data_list)>=0){\r\n\r\n        }else{\r\n            range.push(data_list[i]);\r\n        }\r\n    }\r\n    range.sort();\r\n    return range;\r\n}*/\r\n\r\nfunction normalized(array:any){\r\n    var total = 0;\r\n    for(let i = 0 ; i < array.length; i++){\r\n        total = total + array[i];\r\n    }\r\n    if(total === 0){\r\n        return array;\r\n    }else{\r\n        for(let i = 0 ;i<array.length; i++){\r\n            array[i] = array[i] / total;\r\n        }\r\n        return array;\r\n    }\r\n    \r\n}\r\nfunction getLabelDistribution(node_list:any, total_label:any, num_classes:any){\r\n    let node_info = new Array(num_classes).fill(0);\r\n    //let mfs_set = feature_similarity_list[\"\"+index].feature_sim_set;\r\n    for(let j = 0; j<node_list.length; j++){\r\n        let label = total_label[node_list[j]];\r\n        node_info[label] = node_info[label] + 1;\r\n    }\r\n    return normalized(node_info);\r\n}\r\nfunction getLabelDistribution2(node_list:any, num_classes:any){\r\n    let node_info = new Array(num_classes).fill(0);\r\n    //let mfs_set = feature_similarity_list[\"\"+index].feature_sim_set;\r\n    for(let j = 0; j<node_list.length; j++){\r\n        let label = node_list[j].anchor_label;\r\n        node_info[label] = node_info[label] + 1;\r\n    }\r\n    return normalized(node_info);\r\n}\r\n\r\nfunction getNodeColorInfo(index:number,graph_target:any, individual:any, selected_models_list:any, train_mask_set:any){\r\n    let ground_truth_label = graph_target.node_features[index];\r\n    //let label = ground_truth_label;\r\n    let color = [];\r\n    color.push(getCoraNodeColor(ground_truth_label, 2));\r\n    for(let i = 0; i<selected_models_list.length; i++){\r\n        color.push(getCoraNodeColor(individual[selected_models_list[i]].graph_out.node_features[index]))\r\n    }\r\n    color.push(getTrainColor(index, train_mask_set));\r\n    return color;\r\n}\r\n\r\nfunction addRange(a:any,b:any){\r\n    if(a[\"active\"]){\r\n        if(a[\"end\"]<b[\"start\"]){\r\n            return {\r\n                \"active\":true,\r\n                \"start\":a[\"start\"],\r\n                \"end\":b[\"end\"],\r\n                \"count\":a[\"count\"]+b[\"count\"]\r\n            }\r\n        }else{\r\n            console.log(\"invalid added\");\r\n            return {\r\n                \"active\":false\r\n            }\r\n        }\r\n        \r\n    }else{\r\n        if(b[\"active\"]){\r\n            return b;\r\n        }else{\r\n            console.log(\"inactive added\");\r\n            return {\r\n                \"active\":false\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction binningContinuousVariable(continuous_variable_list:any, bucket_num:number=8){\r\n    let nodenum = continuous_variable_list.length;\r\n    let distribution:any = {};\r\n    for(let i = 0; i<nodenum; i++){\r\n        if(distribution[continuous_variable_list[i]]){\r\n            distribution[continuous_variable_list[i]] = distribution[continuous_variable_list[i]]+1;\r\n\r\n        }else{\r\n            distribution[continuous_variable_list[i]] = 1;\r\n        }\r\n    }\r\n    let key:any = Object.keys(distribution);\r\n    let new_key:any = [];\r\n    for(let i = 0; i<key.length; i++){\r\n        new_key.push(parseFloat(key[i]));\r\n    }\r\n    let compare_number = (a:number, b:number)=>{\r\n        return a-b;\r\n    }\r\n    new_key = new_key.sort(compare_number);\r\n    //console.log(new_degree_key);\r\n    let range_list = [];\r\n    let prev_range = {\r\n        \"active\":false\r\n    }\r\n    let current_range:any = {\r\n        \"active\":false\r\n    }\r\n\r\n    let single_bucket_count = nodenum / bucket_num;\r\n    for(let i = 0; i<new_key.length; i++){\r\n        let this_range = {\r\n            \"active\":true,\r\n            \"start\":new_key[i],\r\n            \"end\":new_key[i],\r\n            \"count\":distribution[new_key[i]]\r\n        }\r\n        \r\n        current_range = addRange(prev_range, this_range);\r\n        //console.log(i, prev_range, this_range, current_range);\r\n        // Assume result range is active\r\n        if(current_range[\"active\"]){\r\n            if(current_range[\"count\"]<single_bucket_count){\r\n                if(i === key.length-1){\r\n                    range_list.push(current_range);\r\n                    current_range = {\r\n                        \"active\":false\r\n                    }\r\n                }\r\n            }else if(current_range[\"count\"]>=2*single_bucket_count){\r\n                if(prev_range[\"active\"]){\r\n                    range_list.push(prev_range);\r\n                }\r\n                range_list.push(this_range);\r\n                current_range = {\r\n                    \"active\":false\r\n                }\r\n            }else{\r\n                range_list.push(current_range);\r\n                current_range = {\r\n                    \"active\":false\r\n                }\r\n            }\r\n            prev_range = Object.assign({}, current_range);\r\n        }\r\n    }\r\n    for(let i = 0; i<range_list.length; i++){\r\n        let start = range_list[i][\"start\"];\r\n        let end = range_list[i][\"end\"];\r\n        if(start === end){\r\n            range_list[i][\"name\"] = \"\"+end;\r\n        }else{\r\n            range_list[i][\"name\"] = \"[\"+start.toFixed(2)+\",\"+end.toFixed(2)+\"]\";\r\n        }\r\n    }\r\n    return range_list;\r\n}\r\n\r\nfunction getContinuousVariableCategory(value:number, value_list:any){\r\n    for(let i = 0; i<value_list.length; i++){\r\n        let start = value_list[i][\"start\"];\r\n        let end = value_list[i][\"end\"];\r\n        //console.log(degree, start, end);\r\n        if(value>=start && value<=end){\r\n            return value_list[i][\"name\"];\r\n        }\r\n    }\r\n    return \"\"+value;\r\n}\r\nfunction constructDegreeRangeList(degree_list:any, bucket_num:number=8){\r\n    let nodenum = degree_list.length;\r\n    let degree_distribution:any = {};\r\n    for(let i = 0; i<nodenum; i++){\r\n        if(degree_distribution[degree_list[i]]){\r\n            degree_distribution[degree_list[i]] = degree_distribution[degree_list[i]]+1;\r\n\r\n        }else{\r\n            degree_distribution[degree_list[i]] = 1;\r\n        }\r\n    }\r\n    let degree_key:any = Object.keys(degree_distribution);\r\n    let new_degree_key:any = [];\r\n    for(let i = 0; i<degree_key.length; i++){\r\n        new_degree_key.push(parseInt(degree_key[i]));\r\n    }\r\n    let compare_number = (a:number, b:number)=>{\r\n        return a-b;\r\n    }\r\n    new_degree_key = new_degree_key.sort(compare_number);\r\n    //console.log(new_degree_key);\r\n    let degree_range_list = [];\r\n    let prev_range = {\r\n        \"active\":false\r\n    }\r\n    let current_range:any = {\r\n        \"active\":false\r\n    }\r\n\r\n    let single_bucket_count = nodenum / bucket_num;\r\n    for(let i = 0; i<new_degree_key.length; i++){\r\n        let this_range = {\r\n            \"active\":true,\r\n            \"start\":new_degree_key[i],\r\n            \"end\":new_degree_key[i],\r\n            \"count\":degree_distribution[new_degree_key[i]]\r\n        }\r\n        \r\n        current_range = addRange(prev_range, this_range);\r\n        //console.log(i, prev_range, this_range, current_range);\r\n        // Assume result range is active\r\n        if(current_range[\"active\"]){\r\n            if(current_range[\"count\"]<single_bucket_count){\r\n                if(i === degree_key.length-1){\r\n                    degree_range_list.push(current_range);\r\n                    current_range = {\r\n                        \"active\":false\r\n                    }\r\n                }\r\n            }else if(current_range[\"count\"]>=2*single_bucket_count){\r\n                if(prev_range[\"active\"]){\r\n                    degree_range_list.push(prev_range);\r\n                }\r\n                degree_range_list.push(this_range);\r\n                current_range = {\r\n                    \"active\":false\r\n                }\r\n            }else{\r\n                degree_range_list.push(current_range);\r\n                current_range = {\r\n                    \"active\":false\r\n                }\r\n            }\r\n            prev_range = Object.assign({}, current_range);\r\n        }\r\n    }\r\n    for(let i = 0; i<degree_range_list.length; i++){\r\n        let start = degree_range_list[i][\"start\"];\r\n        let end = degree_range_list[i][\"end\"];\r\n        if(start === end){\r\n            degree_range_list[i][\"name\"] = \"\"+end;\r\n        }else{\r\n            degree_range_list[i][\"name\"] = \"[\"+start+\",\"+end+\"]\";\r\n        }\r\n    }\r\n    return degree_range_list;\r\n}\r\nfunction getDegreeCategory(degree:number, degree_list:any){\r\n    for(let i = 0; i<degree_list.length; i++){\r\n        let start = degree_list[i][\"start\"];\r\n        let end = degree_list[i][\"end\"];\r\n        //console.log(degree, start, end);\r\n        if(degree>=start && degree<=end){\r\n            return degree_list[i][\"name\"];\r\n        }\r\n    }\r\n    return \"\"+degree;\r\n}\r\nfunction getMaxComponent(label_list:any){\r\n    let max_index_list:any = [];\r\n    let max_value = 0;\r\n    for(let i = 0; i<label_list.length; i++){\r\n        if(i==0){\r\n            max_value = label_list[i];\r\n            max_index_list.push(i);\r\n        }else{\r\n            if(label_list[i]>max_value){\r\n                max_value = label_list[i];\r\n                max_index_list = [i]\r\n            }else if(label_list[i]==max_value){\r\n                max_index_list.push(i);\r\n            }\r\n        }\r\n        \r\n    }\r\n    if(max_index_list.length>=2){\r\n        return -1;\r\n    }else{\r\n        return max_index_list[0];\r\n    }\r\n}\r\n\r\nfunction get_boundingbox(graph_layout:any[]){\r\n    if(graph_layout.length === 0){\r\n        return {\r\n            \"xmin\":0,\r\n            \"xmax\":0,\r\n            \"ymin\":0,\r\n            \"ymax\":0\r\n        }\r\n    }else{\r\n        let xmin = graph_layout[0][0];\r\n        let xmax = graph_layout[0][0];\r\n        let ymin = graph_layout[0][1];\r\n        let ymax = graph_layout[0][1];\r\n        for(let i = 0; i< graph_layout.length; i++){\r\n            let nowx = graph_layout[i][0];\r\n            let nowy = graph_layout[i][1];\r\n            if(xmin > nowx){\r\n                xmin = nowx;\r\n            }\r\n            if(xmax < nowx){\r\n                xmax = nowx;\r\n            }\r\n            if(ymin > nowy){\r\n                ymin = nowy;\r\n            }\r\n            if(ymax < nowy){\r\n                ymax = nowy;\r\n            }\r\n        }\r\n        return {\r\n            \"xmin\":xmin,\r\n            \"xmax\":xmax,\r\n            \"ymin\":ymin,\r\n            \"ymax\":ymax\r\n        }\r\n    }\r\n}\r\n\r\nfunction transform_graphlayout(graph_layout:any[], width:number, height:number){\r\n    if(graph_layout.length === 0){\r\n        return graph_layout;\r\n    }else{\r\n        let bounding_box = get_boundingbox(graph_layout);\r\n        let margin = 20;\r\n        if(graph_layout.length >= 100){\r\n            margin = 20;\r\n        }\r\n        \r\n        let realwidth = width - 2*margin;\r\n        let realheight = height - 2*margin;\r\n        let gap_x = bounding_box[\"xmax\"] - bounding_box[\"xmin\"];\r\n        let gap_y = bounding_box[\"ymax\"] - bounding_box[\"ymin\"];\r\n        if(gap_x === 0){\r\n            gap_x = 1e-16;\r\n        }\r\n        if(gap_y === 0){\r\n            gap_y = 1e-16;\r\n        }\r\n        let realscale = Math.min(realwidth / gap_x, realheight / gap_y);\r\n        let left = margin + (realwidth - realscale * gap_x) / 2;\r\n        let top = margin + (realheight - realscale * gap_y) / 2; \r\n        let xmin = bounding_box[\"xmin\"];\r\n        let ymin = bounding_box[\"ymin\"];\r\n        let new_graph_layout = [];\r\n        for(let i = 0; i< graph_layout.length; i++){\r\n            let nowx = graph_layout[i][0];\r\n            let nowy = graph_layout[i][1];\r\n            let locx = left+ (nowx - xmin) * realscale;\r\n            let locy = top + (nowy - ymin) * realscale;\r\n            new_graph_layout.push([locx,locy]);\r\n        }\r\n        return new_graph_layout;\r\n    }\r\n}\r\nfunction skew_weight(weight:any, range_min:any=0.1, range_max:any=1){\r\n    // Assume weight is [0,1]\r\n    return (weight - 0) * (range_max - range_min) + range_min;\r\n}\r\nfunction getLayoutMode(){\r\n    // 1 ---> Graph View In Center\r\n    // 2 ---> Parallel Coordinates in Row\r\n    // 3 ---> Only Graph View\r\n    return 3;\r\n}\r\n\r\nexport { RED,YELLOW, EChartsColor, getInfectionNodeColor,\r\n     getInfectionEdgeColor, getCoraNodeColor,getCoraTextColor,\r\n     constructNeighborSet, getLayoutMode, constructPathDict,getTrainColor,\r\n     getInspectCategoryOptions, getDefaultInspectCategoryOptions, \r\n     compareSelectedNodeIdList, getNodeStatisticStr, cropAnchorsList,\r\n     getLabelDistribution, getLabelDistribution2, getSimilarityFeatureSet,\r\n      getShortestPathDistanceSet, constructMetaInformation, constructSelectedMask,\r\n      getNodeColorInfo, constructDegreeRangeList, getDegreeCategory, \r\n      binningContinuousVariable, getContinuousVariableCategory, getMaxComponent,\r\n      transform_graphlayout, skew_weight }\r\n","import * as React from \"react\";\r\nimport { Modal, Select, Button, Checkbox } from 'antd';\r\nexport interface IProps {\r\n    GraphViewSettingsModal_visible: any,\r\n    changeGraphViewSettingsModal_visible:any,\r\n    GraphViewState:any,\r\n    changeGraphViewState:any\r\n}\r\nexport interface IState {\r\n}\r\nexport default class GraphViewSettingsModal extends React.Component<IProps, IState>{\r\n    constructor(props:IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    handleOk = (e:any) => {\r\n        console.log(e);\r\n        this.props.changeGraphViewSettingsModal_visible(false);\r\n      };\r\n    \r\n    handleCancel = (e:any) => {\r\n        console.log(e);\r\n        this.props.changeGraphViewSettingsModal_visible(false);\r\n      };\r\n    handleUnfocusedNodesChange = (e:any) =>{\r\n      let checked = e.target.checked;\r\n      let GraphViewState = this.props.GraphViewState;\r\n      this.props.changeGraphViewState({\r\n        ...GraphViewState,\r\n        DisplayUnfocusedNodes: checked\r\n      })\r\n    }\r\n    handleOverviewChange = (e:any) =>{\r\n      let checked = e.target.checked;\r\n      let GraphViewState = this.props.GraphViewState;\r\n      this.props.changeGraphViewState({\r\n        ...GraphViewState,\r\n        DisplayOverview: checked\r\n      })\r\n    }\r\n    public render() {\r\n        /**\r\n         * 1. Show Overview of Graph?\r\n               2. Show background?\r\n               3. Show color legend?\r\n               4. Show glyph legend?\r\n               5. Extended?\r\n               6. Max Node Settings?\r\n         */\r\n        let GraphViewState = this.props.GraphViewState;\r\n        return  (      \r\n        <Modal\r\n            title=\"Graph View Settings\"\r\n            visible={this.props.GraphViewSettingsModal_visible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n            footer={[\r\n                <Button key=\"OK\" type=\"primary\" onClick={this.handleOk}>\r\n                  OK\r\n                </Button>\r\n              ]}\r\n        >\r\n              Rendering Options:\r\n              <div>\r\n                <Checkbox checked={GraphViewState.DisplayUnfocusedNodes} onChange={this.handleUnfocusedNodesChange}>Display unfocused nodes.</Checkbox>\r\n                <br />\r\n                <Checkbox checked={GraphViewState.DisplayOverview} onChange={this.handleOverviewChange}>Display overview.</Checkbox>\r\n              </div>\r\n              \r\n               \r\n               \r\n        </Modal>)\r\n    }\r\n}\r\n\r\n","import {MODEL_CHANGE, GRAPH_CHANGE, INIT_MODEL_LIST, EXPLAIN_METHOD_ID_CHANGE,\r\n    DATASET_ID_CHANGE, INIT_DATASET_LIST, INIT_EXPLAIN_LIST, INIT_GRAPH_LIST, FILTERS_CHANGE,\r\n    SELECTED_NODE_ID_LIST_CHANGE, SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE,\r\n    SHOW_SOURCE_CHANGE, SPECIFIC_NODE_ID_LIST_CHANGE, SELECT_INSPECT_NODE_CHANGE,\r\n    CLEAR_ID_INFO,  PREV_GRAPH_JSON_CHANGE, MATRIX_FILTERS_CHANGE, MATRIX_ROW_FILTERS_CHANGE\r\n    ,INSPECT_CATEGORY_LIST_CHANGE, PSJSON_CHANGE, PSSELECTEDNODES_CHANGE, EXTENDED_MODE_CHANGE, PROJECTIONVIEWSELECTEDNODES_CHANGE,\r\n    PROJECTIONVIEWTOTALNODENUM_CHANGE, PSSETTINGMODAL_VISIBLE_CHANGE, PSDIMENSIONS_CHANGE,\r\n    PROJECTIONVIEWSETTINGMODAL_VISIBLE_CHANGE, GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE,\r\n    FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE, GRAPHVIEWSTATE_CHANGE,\r\n     KVALUE_CHANGE, SELECTEDMODELS_CHANGE, MODELSLIST_CHANGE, CHANGE_LOADING_DATASET} from '../constants';\r\n\r\n// Define Change Model Methods\r\nexport const changeModel = (model:number | null) =>({\r\n    type: MODEL_CHANGE,\r\n    model: model\r\n})\r\n\r\n// Define Change Model Methods\r\nexport const changeDataset = (dataset_id:number | null) =>({\r\n    type: DATASET_ID_CHANGE,\r\n    dataset_id: dataset_id\r\n})\r\n\r\n// Define Change Model Methods\r\nexport const changeExplainMethod = (explain_id:number | null) =>({\r\n    type: EXPLAIN_METHOD_ID_CHANGE,\r\n    explain_id: explain_id\r\n})\r\n\r\nexport const changeGraph = (graph:number | null) =>({\r\n    type: GRAPH_CHANGE,\r\n    graph: graph\r\n})\r\nexport const changeFilters = (filters: any) =>({\r\n    type: FILTERS_CHANGE,\r\n    filters: filters\r\n})\r\nexport const changeMatrixFilters = (MatrixFilters: any) =>({\r\n    type: MATRIX_FILTERS_CHANGE,\r\n    matrixFilters: MatrixFilters\r\n})\r\nexport const changeMatrixRowFilters = (MatrixRowFilters: any) =>({\r\n    type: MATRIX_ROW_FILTERS_CHANGE,\r\n    matrixRowFilters: MatrixRowFilters\r\n})\r\nexport const changeSelectedNodeIdList = (selectedNodeIdList: any) =>({\r\n    type: SELECTED_NODE_ID_LIST_CHANGE,\r\n    selectedNodeIdList: selectedNodeIdList\r\n})\r\nexport const changeInspectCategoryList = (inspectCategoryList: any) =>({\r\n    type: INSPECT_CATEGORY_LIST_CHANGE,\r\n    inspectCategoryList: inspectCategoryList\r\n})\r\nexport const changeExtendedMode = (extendedMode: number) =>({\r\n    type: EXTENDED_MODE_CHANGE,\r\n    extendedMode: extendedMode\r\n})\r\nexport const changePSJson = (PSJson: any) =>({\r\n    type: PSJSON_CHANGE,\r\n    PSJson: PSJson\r\n})\r\nexport const changePSSelectedNodes = (PSSelectedNodes:number) =>({\r\n    type: PSSELECTEDNODES_CHANGE,\r\n    PSSelectedNodes: PSSelectedNodes\r\n})\r\nexport const changePSSettingsModal_visible = (visible:boolean) =>({\r\n    type: PSSETTINGMODAL_VISIBLE_CHANGE,\r\n    PSSettingsModal_visible: visible\r\n})\r\nexport const changeProjectionViewSettingsModal_visible = (visible:boolean) =>({\r\n    type: PROJECTIONVIEWSETTINGMODAL_VISIBLE_CHANGE,\r\n    ProjectionViewSettingsModal_visible: visible\r\n})\r\nexport const changeGraphViewSettingsModal_visible = (visible:boolean) =>({\r\n    type: GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE,\r\n    GraphViewSettingsModal_visible: visible\r\n})\r\nexport const changeFeatureMatrixViewSettingsModal_visible = (visible:boolean) =>({\r\n    type: FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE,\r\n    FeatureMatrixViewSettingsModal_visible: visible\r\n})\r\n\r\nexport const changeGraphViewState = (state_dict:any) =>({\r\n    type: GRAPHVIEWSTATE_CHANGE,\r\n    GraphViewState: state_dict\r\n})\r\n\r\nexport const changeK_value = (K_value:any) =>({\r\n    type: KVALUE_CHANGE,\r\n    K_value: K_value\r\n})\r\nexport const changeModelsList = (value:any) => ({\r\n    type: MODELSLIST_CHANGE,\r\n    models_list:value\r\n})\r\nexport const changeSelectedModels = (value:any) => ({\r\n    type: SELECTEDMODELS_CHANGE,\r\n    selected_models_list: value\r\n})\r\n\r\nexport const changePSDimensions = (PSDimensions:any[]) =>({\r\n    type: PSDIMENSIONS_CHANGE,\r\n    PSDimensions: PSDimensions\r\n})\r\nexport const changeProjectionViewSelectedNodes = (ProjectionViewSelectedNodes:number) =>({\r\n    type: PROJECTIONVIEWSELECTEDNODES_CHANGE,\r\n    ProjectionViewSelectedNodes: ProjectionViewSelectedNodes\r\n})\r\nexport const changeProjectionViewTotalNodeNum = (ProjectionViewTotalNodeNum:number) =>({\r\n    type: PROJECTIONVIEWTOTALNODENUM_CHANGE,\r\n    ProjectionViewTotalNodeNum: ProjectionViewTotalNodeNum\r\n})\r\nexport const changeMessagePassingSelectedNodeIdList = (selectedMessagePassingNodeIdList: any) =>({\r\n    type: SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE,\r\n    selectedMessagePassingNodeIdList: selectedMessagePassingNodeIdList\r\n})\r\n\r\nexport const changeSpecificNodeIdList = (specificNodeIdList: any) =>({\r\n    type: SPECIFIC_NODE_ID_LIST_CHANGE,\r\n    specificNodeIdList: specificNodeIdList\r\n})\r\n\r\nexport const changeSelectInspectNode = (select_inspect_node:any)=>({\r\n    type: SELECT_INSPECT_NODE_CHANGE,\r\n    select_inspect_node: select_inspect_node\r\n})\r\n\r\nexport const changeShowSource = (showSource: boolean) =>({\r\n    type: SHOW_SOURCE_CHANGE,\r\n    showSource: showSource\r\n})\r\nexport const changePrevGraphJson = (prevGraphJson: any) =>({\r\n    type: PREV_GRAPH_JSON_CHANGE,\r\n    prevGraphJson: prevGraphJson\r\n})\r\n\r\nexport const clearIdInfo = () =>({\r\n    type: CLEAR_ID_INFO\r\n})\r\n\r\nexport const initModelList = (modelList:any) =>({\r\n    type: INIT_MODEL_LIST,\r\n    modelList: modelList\r\n})\r\n\r\nexport const initDatasetList = (datasetList:any) =>({\r\n    type: INIT_DATASET_LIST,\r\n    datasetList: datasetList\r\n})\r\nexport const initExplainList = (explainList:any) =>({\r\n    type: INIT_EXPLAIN_LIST,\r\n    explainList: explainList\r\n})\r\nexport const initGraphList = (graphList:any) =>({\r\n    type: INIT_GRAPH_LIST,\r\n    graphList: graphList\r\n})\r\nexport const changeLoadingDataset = (loading_dataset:any) => ({\r\n    type: CHANGE_LOADING_DATASET,\r\n    loading_dataset: loading_dataset\r\n})\r\n\r\n/*import { DECREMENT, INCREMENT } from '../constants';\r\n\r\nexport interface IINCREMENTAction {\r\n    type: INCREMENT;\r\n}\r\n\r\nexport interface IDECREMENTAction {\r\n    type: DECREMENT;\r\n}\r\n\r\n// 定义 modifyAction 类型，包含 IINCREMENTAction 和 IDECREMENTAction 接口类型\r\nexport type ModifyAction = IINCREMENTAction | IDECREMENTAction;\r\n\r\n\r\n// 增加 state 次数的方法\r\nexport const increment = (): IINCREMENTAction => ({\r\n    type: INCREMENT,\r\n})\r\n\r\n// 减少 state 次数的方法\r\nexport const decrement = (): IDECREMENTAction => ({\r\n    type: DECREMENT\r\n})*/\r\n","\r\n// Define Change Model Constant\r\nexport const MODEL_CHANGE = \"MODEL_CHANGE\";\r\nexport type MODEL_CHANGE = typeof MODEL_CHANGE;\r\n\r\n// Define Change Model Constant\r\nexport const DATASET_ID_CHANGE = \"DATASET_ID_CHANGE\";\r\nexport type DATASET_ID_CHANGE = typeof DATASET_ID_CHANGE;\r\n\r\n// Define Change Model Constant\r\nexport const EXPLAIN_METHOD_ID_CHANGE = \"EXPLAIN_METHOD_ID_CHANGE\";\r\nexport type EXPLAIN_METHOD_ID_CHANGE = typeof EXPLAIN_METHOD_ID_CHANGE;\r\n\r\n\r\nexport const GRAPH_CHANGE = \"GRAPH_CHANGE\";\r\nexport type GRAPH_CHANGE = typeof GRAPH_CHANGE;\r\n\r\nexport const INIT_MODEL_LIST = \"INIT_MODEL_LIST\";\r\nexport type INIT_MODEL_LIST = typeof INIT_MODEL_LIST;\r\n\r\nexport const INIT_DATASET_LIST = \"INIT_DATASET_LIST\";\r\nexport type INIT_DATASET_LIST = typeof INIT_DATASET_LIST;\r\n\r\nexport const INIT_EXPLAIN_LIST = \"INIT_EXPLAIN_LIST\";\r\nexport type INIT_EXPLAIN_LIST = typeof INIT_EXPLAIN_LIST;\r\n\r\nexport const INIT_GRAPH_LIST = \"INIT_GRAPH_LIST\";\r\nexport type INIT_GRAPH_LIST = typeof INIT_GRAPH_LIST;\r\n\r\nexport const FILTERS_CHANGE = \"FILTERS_CHANGE\";\r\nexport type FILTERS_CHANGE = typeof FILTERS_CHANGE;\r\n\r\nexport const SELECTED_NODE_ID_LIST_CHANGE = \"SELECTED_NODE_ID_LIST_CHANGE\";\r\nexport type SELECTED_NODE_ID_LIST_CHANGE = typeof SELECTED_NODE_ID_LIST_CHANGE;\r\n\r\nexport const SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE = \"SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE\";\r\nexport type SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE = typeof SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE;\r\n\r\nexport const SHOW_SOURCE_CHANGE = \"SHOW_SOURCE_CHANGE\";\r\nexport type SHOW_SOURCE_CHANGE = typeof SHOW_SOURCE_CHANGE;\r\n\r\nexport const SPECIFIC_NODE_ID_LIST_CHANGE = \"SPECIFIC_NODE_ID_LIST_CHANGE\";\r\nexport type SPECIFIC_NODE_ID_LIST_CHANGE = typeof SPECIFIC_NODE_ID_LIST_CHANGE;\r\n\r\n\r\nexport const SELECT_INSPECT_NODE_CHANGE = \"SELECT_INSPECT_NODE_CHANGE\";\r\nexport type SELECT_INSPECT_NODE_CHANGE = typeof SELECT_INSPECT_NODE_CHANGE;\r\n\r\nexport const PREV_GRAPH_JSON_CHANGE = \"PREV_GRAPH_JSON_CHANGE\";\r\nexport type PREV_GRAPH_JSON_CHANGE = typeof PREV_GRAPH_JSON_CHANGE;\r\n\r\n\r\nexport const CLEAR_ID_INFO = \"CLEAR_ID_INFO\";\r\nexport type CLEAR_ID_INFO = typeof CLEAR_ID_INFO;\r\n\r\nexport const MATRIX_FILTERS_CHANGE = \"MATRIX_FILTERS_CHANGE\";\r\nexport type MATRIX_FILTERS_CHANGE = typeof MATRIX_FILTERS_CHANGE;\r\n\r\nexport const MATRIX_ROW_FILTERS_CHANGE = \"MATRIX_ROW_FILTERS_CHANGE\";\r\nexport type MATRIX_ROW_FILTERS_CHANGE = typeof MATRIX_ROW_FILTERS_CHANGE;\r\n\r\nexport const INSPECT_CATEGORY_LIST_CHANGE = \"INSPECT_CATEGORY_LIST_CHANGE\";\r\nexport type INSPECT_CATEGORY_LIST_CHANGE = typeof INSPECT_CATEGORY_LIST_CHANGE;\r\n\r\nexport const PSJSON_CHANGE = \"PSJSON_CHANGE\";\r\nexport type PSJSON_CHANGE = typeof PSJSON_CHANGE;\r\n\r\nexport const PSSELECTEDNODES_CHANGE = \"PSSELECTEDNODES_CHANGE\";\r\nexport type PSSELECTEDNODES_CHANGE = typeof PSSELECTEDNODES_CHANGE;\r\n\r\n\r\nexport const PSDIMENSIONS_CHANGE = \"PSDIMENSIONS_CHANGE\";\r\nexport type PSDIMENSIONS_CHANGE = typeof PSDIMENSIONS_CHANGE;\r\n\r\nexport const EXTENDED_MODE_CHANGE = \"EXTENDED_MODE_CHANGE\";\r\nexport type EXTENDED_MODE_CHANGE = typeof EXTENDED_MODE_CHANGE;\r\n\r\nexport const PROJECTIONVIEWSELECTEDNODES_CHANGE = \"PROJECTIONVIEWSELECTEDNODES_CHANGE\";\r\nexport type PROJECTIONVIEWSELECTEDNODES_CHANGE = typeof PROJECTIONVIEWSELECTEDNODES_CHANGE;\r\n\r\n\r\nexport const PROJECTIONVIEWTOTALNODENUM_CHANGE = \"PROJECTIONVIEWTOTALNODENUM_CHANGE\";\r\nexport type PROJECTIONVIEWTOTALNODENUM_CHANGE = typeof PROJECTIONVIEWTOTALNODENUM_CHANGE;\r\n\r\nexport const PSSETTINGMODAL_VISIBLE_CHANGE = \"PSSETTINGMODAL_VISIBLE_CHANGE\";\r\nexport type PSSETTINGMODAL_VISIBLE_CHANGE = typeof PSSETTINGMODAL_VISIBLE_CHANGE;\r\n\r\nexport const PROJECTIONVIEWSETTINGMODAL_VISIBLE_CHANGE = \"PROJECTIONVIEWSETTINGMODAL_VISIBLE_CHANGE\";\r\nexport type PROJECTIONVIEWSETTINGMODAL_VISIBLE_CHANGE = typeof PROJECTIONVIEWSETTINGMODAL_VISIBLE_CHANGE;\r\n\r\nexport const GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE = \"GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE\";\r\nexport type GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE = typeof GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE;\r\n\r\nexport const FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE = \"FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE\";\r\nexport type FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE = typeof FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE;\r\n\r\n\r\nexport const GRAPHVIEWSTATE_CHANGE = \"GRAPHVIEWSTATE_CHANGE\";\r\nexport type GRAPHVIEWSTATE_CHANGE = typeof GRAPHVIEWSTATE_CHANGE;\r\n\r\n\r\nexport const KVALUE_CHANGE = \"KVALUE_CHANGE\";\r\nexport type KVALUE_CHANGE = typeof KVALUE_CHANGE;\r\n\r\nexport const SELECTEDMODELS_CHANGE = \"SELECTEDMODELS_CHANGE\";\r\nexport type SELECTEDMODELS_CHANGE = typeof SELECTEDMODELS_CHANGE;\r\n\r\nexport const MODELSLIST_CHANGE = \"MODELSLIST_CHANGE\";\r\nexport type MODELSLIST_CHANGE = typeof MODELSLIST_CHANGE;\r\n\r\nexport const CHANGE_LOADING_DATASET = \"CHANGE_LOADING_DATASET\";\r\nexport type  CHANGE_LOADING_DATASET = typeof CHANGE_LOADING_DATASET;\r\n/*// 定义增加 state 类型常量\r\nexport const INCREMENT = \"INCREMENT\";\r\nexport type INCREMENT = typeof INCREMENT;\r\n\r\n// 定义减少 state 类型常量\r\nexport const DECREMENT = \"DECREMENT\";\r\nexport type DECREMENT = typeof DECREMENT;\r\n*/","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../types';\r\nimport GraphViewSettingsModal from '../components/DataRuns/GraphView/GraphViewSettingsModal';\r\nimport { changeGraphViewSettingsModal_visible,changeGraphViewState } from '../actions';\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    GraphViewSettingsModal_visible: state.GraphViewSettingsModal_visible,\r\n    GraphViewState: state.GraphViewState\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeGraphViewSettingsModal_visible: (visible:boolean) => dispatch(changeGraphViewSettingsModal_visible(visible)),\r\n    changeGraphViewState: (state_dict:any) => dispatch(changeGraphViewState(state_dict))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphViewSettingsModal);\r\n\r\n\r\n\r\n","//import { color } from \"d3\";\r\n\r\n// Canvas Handle Function\r\nfunction drawRectStroke(context:any, x:any, y:any, width:any, height:any, strokeColor:any=\"#bbb\"){\r\n    context.beginPath();\r\n    context.strokeStyle = strokeColor;\r\n    context.rect(x, y, width, height);\r\n    context.stroke();\r\n}\r\nfunction drawRect(context:any, x:any, y:any, width:any, height:any, fillColor:any=\"#fff\", opacity:any=0.8){\r\n    context.fillStyle = fillColor;\r\n    context.globalAlpha = opacity;\r\n    context.fillRect(x, y, width, height);\r\n    context.globalAlpha = 1.0;\r\n}\r\nfunction drawCircleStroke(context:any, color:any, radius:any, x:any, y:any, lineWidth:number){\r\n    context.lineWidth = lineWidth\r\n    context.strokeStyle = color;\r\n    context.beginPath();\r\n    context.arc(x, y, radius, 0, 2 * Math.PI, true);\r\n    context.stroke();\r\n}\r\n\r\nfunction drawCircle(context:any, color:any, radius:any, x:any, y:any, alpha:any=1){\r\n    let original_globalAlpha = context.globalAlpha;\r\n    context.globalAlpha = alpha;\r\n    context.beginPath();\r\n    context.arc(x, y, radius, 0, 2 * Math.PI, true);\r\n    context.fillStyle = color;\r\n    context.fill();\r\n    context.globalAlpha = original_globalAlpha;\r\n\r\n}\r\n\r\nfunction drawOnePie(context:any, color:any, radius:any, x:any, y:any, startAngle:any, endAngle:any, alpha:any=1){\r\n    let original_globalAlpha = context.globalAlpha;\r\n    context.globalAlpha = alpha;\r\n    context.beginPath();\r\n    context.moveTo(x,y);\r\n    context.arc(x, y, radius, startAngle, endAngle);\r\n    context.fillStyle = color;\r\n    context.closePath();\r\n    context.fill();\r\n    context.globalAlpha = original_globalAlpha;\r\n\r\n}\r\nfunction drawOneArc(context:any, color:any, radius:any, x:any, y:any, startAngle:any, endAngle:any){\r\n    context.moveTo(x,y);\r\n    context.beginPath();\r\n    context.arc(x, y, radius, startAngle, endAngle);\r\n    context.strokeStyle = color;\r\n    context.stroke();\r\n}\r\n\r\nfunction drawLine(context:any, color:any, x1:any, y1:any, x2:any, y2:any, linewidth:any=null, weight:any=1){\r\n    let original_globalAlpha = context.globalAlpha;\r\n    let value = weight;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    context.globalAlpha = value;\r\n    context.strokeStyle = color;\r\n    if(linewidth){\r\n        context.lineWidth = linewidth;\r\n    }\r\n    context.beginPath();\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n    context.stroke();\r\n    context.globalAlpha = original_globalAlpha;\r\n}\r\n\r\n/*function drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, enableStroke:boolean=false){\r\n    \r\n    drawCircle(context, colorlist[4], outer_radius, x, y);\r\n    if(enableStroke){\r\n        drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n    }\r\n    drawOnePie(context, colorlist[1], outer_radius, x, y, (-150)/180*Math.PI, (-30)/180*Math.PI);\r\n    drawOnePie(context, colorlist[2], outer_radius, x, y, (-30)/180*Math.PI, (+90)/180*Math.PI);\r\n    drawOnePie(context, colorlist[3], outer_radius, x, y, (+90)/180*Math.PI, (+210)/180*Math.PI);\r\n    for(let i = 0; i<3; i++){\r\n        let angle = (-150+120*i)/180*Math.PI;\r\n        let x1 = x + radius*Math.cos(angle);\r\n        let y1 = y + radius*Math.sin(angle);\r\n        let x2 = x + outer_radius*Math.cos(angle);\r\n        let y2 = y + outer_radius*Math.sin(angle);\r\n        // drawLine(context, \"#ddd\", x1, y1, x2 ,y2, 0.5);\r\n        drawLine(context, colorlist[4], x1, y1, x2 ,y2, radius-inner_radius);\r\n    }\r\n    drawCircle(context, colorlist[4], radius, x, y);\r\n    drawCircle(context, colorlist[0], inner_radius, x, y);\r\n}*/\r\nfunction drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, \r\n    enableStroke:boolean=false, outer_arc_encoded_value:any=1,enable_alpha_mode=true){\r\n    let value = outer_arc_encoded_value;\r\n    //let original_globalAlpha = context.globalAlpha;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    let alpha = 1;\r\n    if(enable_alpha_mode){\r\n        alpha = value;\r\n    }\r\n    \r\n    //context.globalAlpha = value;\r\n    // Background circle\r\n    \r\n    \r\n    \r\n    // Pie chart drawing\r\n    let length_model = colorlist.length - 2;\r\n    let last_index = colorlist.length - 1;\r\n\r\n    if(length_model > 0){\r\n        drawCircle(context, colorlist[last_index], outer_radius, x, y, alpha);\r\n        if(enableStroke){\r\n            drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n        }\r\n        let step_angle = 360 / length_model;\r\n        let current_angle = -90 - step_angle / 2; \r\n        for(let i = 1; i<colorlist.length-1; i++){\r\n            let start_angle = current_angle;\r\n            let end_angle = start_angle + step_angle;\r\n            drawOnePie(context, colorlist[i], outer_radius, x, y, (start_angle)/180*Math.PI, (end_angle)/180*Math.PI, alpha);\r\n            current_angle = end_angle;\r\n        }\r\n        if(length_model > 1){\r\n            current_angle = -90 - step_angle / 2;\r\n            for(let i = 1; i<colorlist.length-1; i++){\r\n                let angle = (current_angle)/180*Math.PI;\r\n                let x1 = x + radius*Math.cos(angle);\r\n                let y1 = y + radius*Math.sin(angle);\r\n                let x2 = x + outer_radius*Math.cos(angle);\r\n                let y2 = y + outer_radius*Math.sin(angle);\r\n                // drawLine(context, \"#ddd\", x1, y1, x2 ,y2, 0.5);\r\n                drawLine(context, colorlist[last_index], x1, y1, x2 ,y2, radius-inner_radius, alpha);\r\n                current_angle = current_angle + step_angle;\r\n            }\r\n        }\r\n        drawCircle(context, colorlist[last_index], radius, x, y, alpha);\r\n        drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n\r\n    }else{\r\n        drawCircle(context, colorlist[0], outer_radius, x, y, alpha);\r\n        if(enableStroke){\r\n            drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n        }\r\n        //drawCircle(context, colorlist[0], radius, x, y, alpha);\r\n        //drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n    }\r\n    \r\n\r\n    \r\n    //context.globalAlpha = original_globalAlpha;\r\n\r\n    //let degree = 360 * value - 90;\r\n    //drawOneArc(context, colorlist[5], outer_arc_radius, x, y, (-90)/180*Math.PI, degree/180*Math.PI);\r\n}\r\n\r\nexport {drawRectStroke, drawRect, drawCircleStroke, \r\n    drawCircle, drawOnePie, drawOneArc, drawNodeGlyph, drawLine }\r\n","\r\nimport './ForceDirectedGraphCanvas.css'\r\nimport * as React from \"react\";\r\nimport { scaleBand } from 'd3';\r\nimport {drawRectStroke, drawRect, drawNodeGlyph, drawLine} from './CanvasDrawing';\r\nconst d3 = require(\"d3\");\r\nconst legend_line_style = {\r\n    \"stroke\":\"#bbb\",\r\n    \"stroke-width\":2,\r\n    \"stroke-dasharray\":\"2,3\"\r\n} \r\nexport interface IProps {\r\n    graph_json : any,\r\n    width : number,\r\n    height : number,\r\n    onNodeClick: any,\r\n    GraphViewState:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ForceDirectedGraphCanvas extends React.Component<IProps, IState>{\r\n    public global_simulation:any = null;\r\n    public saved_transform:any = null;\r\n    public refresh_number = 0;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateTransform = this.updateTransform.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.renderCanvas();\r\n    }\r\n    \r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        if(prevProps.graph_json.name !== this.props.graph_json.name || prevProps.width !== this.props.width || prevProps.GraphViewState !== this.props.GraphViewState){\r\n            this.renderCanvas();\r\n        }\r\n\r\n        \r\n     }\r\n     public updateTransform(transform:any){\r\n         this.saved_transform = transform;\r\n     }\r\n     public renderColorLegend(legend_color_svg:any, colorLegend:number){\r\n        let row_legend_color = legend_color_svg.selectAll(\"g.legend_row_color\")\r\n                                .data(colorLegend, function(d:any,i:any){\r\n                                    return d.text+\"_\"+i+\"_\"+d.color;\r\n                                });\r\n        let g_row_legend_color = row_legend_color.enter().append(\"g\")\r\n                            .attr(\"class\",\"legend_row_color\")\r\n                            .attr(\"transform\", function(d:any,i:any){\r\n                                return \"translate(10,\"+(10+i*20)+\")\";\r\n                            });\r\n            g_row_legend_color.append(\"circle\")\r\n                            .attr(\"r\", 5)\r\n                            .attr(\"fill\", function(d:any){\r\n                                return d.color;\r\n                            })\r\n                            \r\n            g_row_legend_color.append(\"text\")\r\n                            .attr(\"x\", 10)\r\n                            .attr(\"y\", 5)\r\n                            .text(function(d:any){\r\n                                return d.text;\r\n                            })\r\n                            \r\n            row_legend_color.exit().remove();\r\n     }\r\n     public renderLegend(legend_configuration:any){\r\n        var width = legend_configuration[\"width\"];\r\n        var height = legend_configuration[\"height\"];\r\n        var radius = legend_configuration[\"radius\"];\r\n        var radius_gap = legend_configuration[\"radius_gap\"];\r\n        var colorLegend = legend_configuration[\"colorLegend\"];\r\n        var pieLegend = legend_configuration[\"pieLegend\"];\r\n        var pieName = pieLegend.pie_name;\r\n        var models_length = pieName.length;\r\n        var inner_radius = radius - radius_gap;\r\n        // ---------------------- Render Legend -------------------------- //\r\n        let legend_pie_x = 10;\r\n        let legend_pie_y = height - 10 - 100;\r\n        var top_svg = d3.select(\"#force_directed_graph\")\r\n                .select(\"#svgChart\")\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n\r\n        var legend_svg = top_svg.select(\"#ForceDirectedLegend\")\r\n            .attr(\"width\", 100)\r\n            .attr(\"height\", 100)\r\n            .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n\r\n        var arc_data:any = [];\r\n        for(let i = 0; i<models_length; i++){\r\n            arc_data.push({\r\n                \"index\":i,\r\n                \"value\":1/models_length\r\n            })\r\n        }\r\n        let startAngle = -180 / models_length;\r\n        var ori_arcs = d3.pie()\r\n        .startAngle((startAngle/180) * Math.PI)\r\n        .endAngle((2+startAngle/180) * Math.PI)\r\n        .value(function(a:any){\r\n            return a.value;\r\n        })\r\n        .sort(function(a:any, b:any) {\r\n            return a.index<b.index;\r\n        });\r\n        var arcs = ori_arcs(arc_data);\r\n        function getArc(radius:number){\r\n            return d3.arc()\r\n            .innerRadius(radius)\r\n            .outerRadius(radius*2);\r\n        }\r\n        let legend_x = 30;\r\n        let legend_y = 50;\r\n        //let legend_width = 200;\r\n        let legend_height = 100;\r\n        let legned_scale = 3;\r\n        let legend_text_setting = [\r\n            {\r\n                \"text\":\"Label\",\r\n                \"text-anchor\":\"begin\",\r\n                \"dominant-baseline\":\"central\",\r\n                \"y_offset\":+1\r\n            }\r\n        ]\r\n        let y_offset_list = [-7.5, 0, +19]\r\n        for(let i =0; i<models_length; i++){\r\n            legend_text_setting.push({\r\n                \"text\":pieName[i],\r\n                \"text-anchor\":\"begin\",\r\n                \"dominant-baseline\":\"central\",\r\n                \"y_offset\":y_offset_list[i]\r\n            })\r\n        }\r\n\r\n        let max_pie_text_length = 0;\r\n        legend_text_setting.forEach((d:any)=>{\r\n            let text = \"\" + d.text;\r\n            if(text.length>max_pie_text_length){\r\n                max_pie_text_length = text.length;\r\n            }\r\n        })\r\n        \r\n        let legend_width = max_pie_text_length*8+80;\r\n\r\n\r\n        this.refresh_number = this.refresh_number + 1;\r\n        let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                        .data([this.refresh_number], function(d:any){\r\n                            return d;\r\n                        });\r\n            legend_pie_all.exit().remove();\r\n        //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n        let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                        .attr(\"class\", \"legend_pie\")\r\n                        .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n        legend_pie.append(\"rect\")\r\n        .attr(\"x\", -legend_x)\r\n        .attr(\"y\", -legend_y)\r\n        .attr(\"width\", legend_width)\r\n        .attr(\"height\", legend_height)\r\n        .attr(\"fill\", \"#fff\")\r\n        .attr(\"opacity\", 0.8)\r\n        .attr(\"stroke\", \"#bbb\")\r\n        .attr(\"stroke-width\", 1)\r\n        .attr(\"rx\",3)\r\n        .attr(\"ry\",3)\r\n                        //let overall_background = [];\r\n        let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\r\n        legend_pie.append(\"circle\")\r\n        .attr(\"class\",\"inner_circle\")\r\n        .attr(\"r\", inner_radius*legned_scale)\r\n        .attr(\"fill\", function(d:any) { return legend_Color[0]; })\r\n        .attr(\"stroke\", \"white\");\r\n    \r\n            \r\n        function constructPathOnNodeList(nodelist:any){\r\n            // \r\n            let path = \"\";\r\n            for(let i = 0; i<nodelist.length;i++){\r\n                let note = \"M\";\r\n                if(i>0){\r\n                    note = \"L\"\r\n                }\r\n                path = path+note+nodelist[i][0]+\" \"+nodelist[i][1]+\" \";\r\n            }\r\n            return path;\r\n\r\n        }\r\n        for (let i = 0; i < models_length; i++){\r\n            let background_enter = legend_pie.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n            let background = legend_pie.select(\"path.arc_\"+i);\r\n            let background_enter_update  = background_enter.merge(background);\r\n            background_enter_update\r\n            .style(\"fill\", function(d:any){\r\n                return legend_Color[i+1]\r\n            })\r\n            .attr(\"d\", getArc(radius*legned_scale)(arcs[i]))\r\n            .style(\"stroke\",\"#ddd\")\r\n            .style(\"stroke-width\",1);\r\n            //overall_background.push(background_enter_update);\r\n\r\n            let start_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 1.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))]\r\n            let middle_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 2.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n\r\n            if(i===1){\r\n                middle_point= [2.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 2.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n            }else{\r\n\r\n            }\r\n            let end_point = [2.5*legned_scale*radius*Math.sin((+60)/180*Math.PI) ,2.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n\r\n            legend_pie.append(\"path\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                .attr(\"fill\", \"none\")\r\n            legend_pie.append(\"text\")\r\n                .attr(\"x\", end_point[0])\r\n                .attr(\"y\", end_point[1])\r\n                .attr(\"text-anchor\", legend_text_setting[i+1][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[i+1][\"dominant-baseline\"])\r\n                .text(legend_text_setting[i+1][\"text\"])\r\n        }\r\n        let gt_x = 2.5*legned_scale*radius*Math.sin((+60)/180*Math.PI);\r\n        let gt_y = 2.5*legned_scale*radius*(-Math.cos((+60)/180*Math.PI))+legend_text_setting[0][\"y_offset\"];\r\n        legend_pie.append(\"line\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"x1\", 0)\r\n                .attr(\"y1\", 0)\r\n                .attr(\"x2\", gt_x)\r\n                .attr(\"y2\", gt_y);\r\n        legend_pie.append(\"text\")\r\n                .attr(\"x\", gt_x)\r\n                .attr(\"y\", gt_y)\r\n                .attr(\"text-anchor\", legend_text_setting[0][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[0][\"dominant-baseline\"])\r\n                .text(legend_text_setting[0][\"text\"])\r\n        // x = 7.5*Radius*(sin(60/180/240))\r\n        // y = 7.5*Radius*(-cos(60/180/240)) \r\n        \r\n        // ---------------- Color Legend -------------------------//\r\n         let legend_color_x = 10;\r\n\r\n        // ---- Calculate the legend color width and height.\r\n         let max_text_length = 0;\r\n         colorLegend.forEach((d:any)=>{\r\n             let text = \"\" + d.text;\r\n             if(text.length>max_text_length){\r\n                 max_text_length = text.length;\r\n             }\r\n         })\r\n         \r\n         let legend_color_width = max_text_length*8+24;\r\n         //console.log(\"maxtextlength\", max_text_length, legend_color_width);\r\n         let legend_color_height = colorLegend.length*20;\r\n         // ----------------------------------------------\r\n\r\n         let legend_color_y = legend_pie_y - legend_color_height - 10;\r\n         var legend_color_svg = top_svg.select(\"#ForceDirectedColorLegend\")\r\n             .attr(\"width\", legend_color_width)\r\n             .attr(\"height\", legend_color_height)\r\n             .attr(\"transform\", \"translate(\"+legend_color_x+\",\"+legend_color_y+\")\")\r\n         let legend_rect = legend_color_svg.selectAll(\"rect\").data([0]);\r\n         let legend_rect_enter = legend_rect.enter().append(\"rect\");\r\n         //console.log(\"legend_rect\", legend_rect);\r\n         legend_rect_enter.merge(legend_rect)\r\n             .attr(\"x\", 0)\r\n             .attr(\"y\", 0)\r\n             .attr(\"width\", legend_color_width)\r\n             .attr(\"height\", legend_color_height)\r\n             .attr(\"fill\", \"#fff\")\r\n             .attr(\"opacity\", 0.8)\r\n             .attr(\"stroke\", \"#bbb\")\r\n             .attr(\"stroke-width\", 1)\r\n             .attr(\"rx\",3)\r\n             .attr(\"ry\",3);\r\n        this.renderColorLegend(legend_color_svg, colorLegend);\r\n                \r\n     }\r\n     public renderCanvas(){\r\n\r\n        // initialize \r\n        var onNodeClick = this.props.onNodeClick;\r\n        var nodenum = this.props.graph_json.nodenum;\r\n        var enabledForceDirected = this.props.graph_json.enable_forceDirected;\r\n        var neighborSet = this.props.graph_json.NeighborSet;\r\n        var colorLegend = this.props.graph_json.colorLegend;\r\n        var pieLegend = this.props.graph_json.pieLegend;\r\n        var pieName = pieLegend.pie_name;\r\n        var configuration = {\r\n            \"strength\": 0.01,\r\n            \"radius\":15,\r\n            \"showlabel\": true,\r\n            \"showarrow\": true,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        var GraphViewState = this.props.GraphViewState;\r\n        var DisplayUnfocusedNodes = GraphViewState.DisplayUnfocusedNodes;\r\n        var DisplayOverview = GraphViewState.DisplayOverview;\r\n        //console.log(\"ForceDirected\" , nodenum)\r\n        if(nodenum >= 100){\r\n            configuration = {\r\n                \"strength\": 0.4,\r\n                \"radius\":3,\r\n                \"showlabel\": false,\r\n                \"showarrow\": false,\r\n                \"width\": this.props.width,\r\n                \"height\": this.props.height\r\n            }\r\n        }\r\n\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"];\r\n        var radius = configuration[\"radius\"];\r\n        var radius_gap = 0.3;\r\n        var inner_radius = radius - radius_gap;\r\n        var graphWidth =  this.props.width;\r\n        var graphCanvas = d3.select('#force_directed_graph').select('#bottom')\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        \r\n        var context = graphCanvas.getContext('2d');\r\n        var middleCanvas = d3.select('#force_directed_graph').select(\"#middle\")\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        var middle_context = middleCanvas.getContext('2d');\r\n        var overviewCanvas = d3.select('#force_directed_graph').select('#overview')\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        var overview_context = overviewCanvas.getContext('2d');\r\n        var eventCanvas = d3.select('#force_directed_graph').select(\"#event\")\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n         /**\r\n         * OverviewCanvas\r\n         */\r\n        let canvasWidth = 100;\r\n        let canvasHeight = 100;\r\n        let margin = 10;\r\n        let canvasX = graphWidth - canvasWidth - margin;\r\n        let canvasY = height - canvasHeight - margin;\r\n        let canvasXRight = canvasX + canvasWidth;\r\n        let canvasYBottom = canvasY + canvasHeight;\r\n        let radius_collision = radius*3 + radius_gap*3;\r\n        if(this.global_simulation){\r\n            this.global_simulation.stop();\r\n            delete this.global_simulation;\r\n        }\r\n        var simulation = d3.forceSimulation()\r\n                      .force(\"center\", d3.forceCenter(graphWidth / 2, height / 2))\r\n                      .force(\"x\", d3.forceX(graphWidth / 2).strength(0.1))\r\n                      .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n                      .force(\"charge\", d3.forceManyBody().strength(-50))\r\n                      .force(\"link\", d3.forceLink().strength(1).id(function(d:any) { return d.id; }))\r\n                      .force('collide', d3.forceCollide().radius((d:any) => radius_collision))\r\n                      .alphaTarget(0)\r\n                      .alphaDecay(0.05)\r\n                      \r\n        this.global_simulation = simulation;\r\n        var legend_configuration:any = {\r\n            \"width\":width,\r\n            \"height\":height,\r\n            \"radius\":radius,\r\n            \"radius_gap\":radius_gap,\r\n            \"colorLegend\":colorLegend,\r\n            \"pieLegend\":pieLegend\r\n        }\r\n        // Render Legend\r\n        this.renderLegend(legend_configuration);\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n        let updateTransform = this.updateTransform;\r\n\r\n        var transform:any;\r\n        var calTransform:any={\r\n            \"x\":0,\r\n            \"y\":0,\r\n            \"k\":1\r\n        };\r\n        if(this.saved_transform){\r\n            transform =this.saved_transform ;\r\n        }else{\r\n            transform = d3.zoomIdentity;\r\n        }\r\n        \r\n        function order_determine(a:any,b:any){\r\n            let hover_cons_a = a.hasOwnProperty(\"hover_cons\")?a.hover_cons:1;\r\n            let hover_cons_b = b.hasOwnProperty(\"hover_cons\")?b.hover_cons:1;\r\n            let node_outer_radius_a = a.radius*hover_cons_a*2;\r\n            let node_outer_radius_b = a.radius*hover_cons_b*2;\r\n            return node_outer_radius_a<node_outer_radius_b?-1:1;\r\n        }\r\n        function judgeHoveredFlag(d:any, bool:boolean){\r\n            if(!d.hasOwnProperty(\"hovered\") || d[\"hovered\"]===false ){\r\n                if(bool === false){\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }else{\r\n                if(bool === true){\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        function hiddenTooltip(){\r\n            d3.select(\"#force_directed_graph\").select(\"#tooltip\").style('opacity', 0);\r\n\r\n        }\r\n\r\n        \r\n        let tempData = this.props.graph_json;\r\n        let event_canvas = eventCanvas;\r\n        var mouseCoordinates:any = null;\r\n        d3.select(event_canvas).on(\"click\",handleMouseClick).on(\"mousemove\", handleMouseMove).on(\"mouseout\",handleMouseOut);\r\n        d3.select(event_canvas).call(d3.zoom().scaleExtent([1 / 10, 8]).on(\"zoom\", zoomed))\r\n        \r\n        if(enabledForceDirected){\r\n            simulation\r\n                .nodes(tempData.nodes)\r\n                .on(\"tick\", simulationUpdate);\r\n\r\n            simulation.force(\"link\")\r\n                .links(tempData.links);\r\n\r\n        }else{\r\n            simulation.stop();\r\n            simulation\r\n                .nodes(tempData.nodes);\r\n\r\n            simulation.force(\"link\")\r\n                .links(tempData.links);\r\n            simulationUpdate();\r\n        }\r\n        \r\n        function determineSubject(mouse_x:number,mouse_y:number){\r\n            var i,\r\n            x = transform.invertX(mouse_x),\r\n            y = transform.invertY(mouse_y),\r\n            dx,\r\n            dy;\r\n            let newNodeList = tempData.nodes.slice().sort(order_determine)\r\n            for (i = newNodeList.length - 1; i >= 0; --i) {\r\n                var node = newNodeList[i];\r\n                if(!DisplayUnfocusedNodes && !node[\"highlight\"]){\r\n                    continue;\r\n                }\r\n                dx = x - node.x;\r\n                dy = y - node.y;\r\n                let hover_cons = node.hasOwnProperty(\"hover_cons\")?node.hover_cons:1;\r\n                let outer_radius_node = node.radius * 2 * hover_cons;\r\n                if (dx * dx + dy * dy < outer_radius_node * outer_radius_node) {\r\n                    return node;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n       \r\n        function determineEventSubject(mouse_x:number, mouse_y:number){\r\n            if(mouse_x >= canvasX && mouse_x <=canvasXRight \r\n                && mouse_y >= canvasY && mouse_y <=canvasYBottom && DisplayOverview){\r\n                    return \"OverviewCanvas\";\r\n                }else{\r\n                    return \"GraphCanvas\";\r\n                }\r\n        }\r\n\r\n        function zoomed(this:any) {\r\n            var xy = d3.mouse(this);\r\n            mouseCoordinates = xy;\r\n            transform = d3.event.transform;\r\n            if(determineEventSubject(xy[0], xy[1])===\"GraphCanvas\"){\r\n                updateTransform(transform);\r\n                simulationUpdate();\r\n            }\r\n        }\r\n        \r\n        function handleMouseMove(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n            var xy:any;\r\n            if(obj){\r\n                xy = mouseCoordinates;\r\n            }else{\r\n                xy = d3.mouse(this);\r\n                mouseCoordinates = xy;\r\n            }\r\n            \r\n            var updateFlag = defaultUpdateFlag;\r\n\r\n            if(xy){\r\n                let event_subject = determineEventSubject(xy[0], xy[1]);\r\n                var selected = determineSubject(xy[0],xy[1]);\r\n                if(event_subject===\"GraphCanvas\"&&selected){\r\n                    updateFlag = true;\r\n                    let target_id = selected.id;\r\n                    let target_title = selected.title;\r\n                    d3.select(\"#force_directed_graph\").select('#tooltip')\r\n                        .style('opacity', 0.8)\r\n                        .style('top', (xy[1] + 5) + 'px')\r\n                        .style('left', (xy[0] + 5) + 'px')\r\n                        .html(target_title);\r\n\r\n                    let neighbor_id = neighborSet[selected.id];\r\n                    tempData.nodes.forEach((d:any)=>{\r\n                        if(target_id === d.id){\r\n                            d.hovered = true;\r\n                            d.hover_cons = 3;\r\n                        }else  if(neighbor_id.indexOf(d.id)>=0){\r\n                            d.hovered = true;\r\n                            d.hover_cons = 2;\r\n                        }else{   \r\n                            d.hovered = false;\r\n                            d.hover_cons = 1;\r\n                        }\r\n                    })\r\n                    \r\n                }else{\r\n                    tempData.nodes.forEach((d:any)=>{\r\n                        updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                        d.hovered = false;\r\n                        d.hover_cons = 1;\r\n                    })\r\n                    hiddenTooltip();\r\n                }\r\n            }else{\r\n                tempData.nodes.forEach((d:any)=>{\r\n                    updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                    d.hovered = false;\r\n                    d.hover_cons = 1;\r\n                })\r\n                hiddenTooltip();\r\n            }\r\n            \r\n            if(updateFlag){\r\n                middleCanvasSimulationUpdate()\r\n            }\r\n            \r\n        }\r\n        function handleMouseOut(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n            var updateFlag = defaultUpdateFlag;\r\n            mouseCoordinates = null;\r\n            tempData.nodes.forEach((d:any)=>{\r\n                updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                d.hovered = false;\r\n                d.hover_cons = 1;\r\n            })\r\n            hiddenTooltip();\r\n            if(updateFlag){\r\n                middleCanvasSimulationUpdate()\r\n            }\r\n        }\r\n        function handleMouseClick(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n            if (d3.event.defaultPrevented) return; // zoomed\r\n\r\n            var xy:any;\r\n            if(obj){\r\n                xy = mouseCoordinates;\r\n            }else{\r\n                xy = d3.mouse(this);\r\n                mouseCoordinates = xy;\r\n            }\r\n\r\n            if(xy){\r\n                if(determineEventSubject(xy[0],xy[1])===\"OverviewCanvas\"){\r\n                    moveFocalPoint(xy[0], xy[1]);\r\n                }else{\r\n                    var selected = determineSubject(xy[0],xy[1]);\r\n                    if(selected){\r\n                        onNodeClick(selected.id);\r\n                    }\r\n                }\r\n\r\n            }else{\r\n\r\n            }\r\n            \r\n        }\r\n        function calculateGraphBoundingBox(){\r\n            //let canvasWidth = graphWidth;\r\n            //let canvasHeight = height;\r\n            let minx=0, miny=0, maxx=0, maxy=0;\r\n            let flag = false;\r\n            tempData.nodes.forEach(function(d:any){\r\n                if(DisplayUnfocusedNodes || (!DisplayUnfocusedNodes && d.highlight)){\r\n                    let x = d.x;\r\n                    let y = d.y;\r\n                    if(!flag){\r\n                        minx = x;\r\n                        miny = y;\r\n                        maxx = x;\r\n                        maxy = y;\r\n                        flag = true;\r\n                    }else{\r\n                        if(minx > x){\r\n                            minx = x;\r\n                        }\r\n                        if(maxx < x){\r\n                            maxx = x;\r\n                        }\r\n                        if(miny > y){\r\n                            miny = y;\r\n                        }\r\n                        if(maxy < y){\r\n                            maxy = y;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            })\r\n            let glyph_outer_radius = 3*2;\r\n            let margin = 14;\r\n            let leftbound = minx - glyph_outer_radius - margin;\r\n            let upperbound = miny - glyph_outer_radius - margin;\r\n            \r\n            let occupyWidth = maxx - minx + glyph_outer_radius*2 + margin*2;\r\n            let occupyHeight = maxy - miny + glyph_outer_radius*2 + margin*2;\r\n            return {\r\n                \"leftbound\":leftbound,\r\n                \"upperbound\":upperbound,\r\n                \"occupyWidth\":occupyWidth,\r\n                \"occupyHeight\":occupyHeight\r\n            }\r\n        }\r\n        function rectTransform(rect_configuration:any, transform:any){\r\n            let rect_x = rect_configuration[\"x\"];\r\n            let rect_y = rect_configuration[\"y\"];\r\n            let rect_width = rect_configuration[\"width\"];\r\n            let rect_height = rect_configuration[\"height\"];\r\n            let dx = transform.x;\r\n            let dy = transform.y;\r\n            let scale = transform.k;\r\n            let x = (rect_x*scale + dx) ;\r\n            let y = (rect_y*scale + dy) ;\r\n            let width = (rect_width) * scale;\r\n            let height = (rect_height) * scale;\r\n            return {\r\n                \"x\":x,\r\n                \"y\":y,\r\n                \"width\":width,\r\n                \"height\":height\r\n            }\r\n        }\r\n        function rectInverseTransform(rect_configuration:any, transform:any){\r\n            let rect_x = rect_configuration[\"x\"];\r\n            let rect_y = rect_configuration[\"y\"];\r\n            let rect_width = rect_configuration[\"width\"];\r\n            let rect_height = rect_configuration[\"height\"];\r\n            let dx = -transform.x;\r\n            let dy = -transform.y;\r\n            let scale = 1/transform.k;\r\n            let x = (rect_x + dx) * scale;\r\n            let y = (rect_y + dy) * scale;\r\n            let width = (rect_width) * scale;\r\n            let height = (rect_height) * scale;\r\n            return {\r\n                \"x\":x,\r\n                \"y\":y,\r\n                \"width\":width,\r\n                \"height\":height\r\n            }\r\n        }\r\n        function pointInverseTransform(point_configuration:any, transform:any){\r\n            let point_x = point_configuration[\"x\"];\r\n            let point_y = point_configuration[\"y\"];\r\n            let dx = -transform.x;\r\n            let dy = -transform.y;\r\n            let scale = 1/transform.k;\r\n            let x = (point_x + dx) * scale;\r\n            let y = (point_y + dy) * scale;\r\n            return {\r\n                \"x\":x,\r\n                \"y\":y\r\n            }\r\n        }\r\n        function moveFocalPoint(mouse_x:number, mouse_y:number){\r\n            let ori_point = {\r\n                \"x\":graphWidth / 2,\r\n                \"y\":height / 2\r\n            }\r\n            let ori_inverse_point = pointInverseTransform(ori_point, transform);\r\n            \r\n            let overview_point = {\r\n                \"x\": mouse_x,\r\n                \"y\": mouse_y\r\n            }\r\n            let overview_inverse_point = pointInverseTransform(overview_point, calTransform);\r\n            let new_x = -(overview_inverse_point[\"x\"] - ori_inverse_point[\"x\"])*transform.k + transform.x;\r\n            let new_y = -(overview_inverse_point[\"y\"] - ori_inverse_point[\"y\"])*transform.k + transform.y;\r\n            console.log({\r\n                ori_point, ori_inverse_point, overview_point, overview_inverse_point, new_x, new_y\r\n            })\r\n            transform.x = new_x;\r\n            transform.y = new_y;\r\n            updateTransform(transform);\r\n            simulationUpdate();\r\n            \r\n        }\r\n        function rectInverseTransformAndClip(rect_configuration:any,transform:any, bounding_box:any){\r\n            let leftbound = bounding_box[\"leftbound\"];\r\n            let upperbound = bounding_box[\"upperbound\"];\r\n            let occupyHeight = bounding_box[\"occupyHeight\"];\r\n            let occupyWidth = bounding_box[\"occupyWidth\"];\r\n            let rightbound = leftbound + occupyWidth;\r\n            let lowerbound = upperbound + occupyHeight;\r\n            let inverse_transform_rect = rectInverseTransform(rect_configuration, transform);\r\n            let transformed_leftbound = inverse_transform_rect[\"x\"];\r\n            let transformed_upperbound = inverse_transform_rect[\"y\"];\r\n            let transformed_rightbound = inverse_transform_rect[\"x\"]+inverse_transform_rect[\"width\"];\r\n            let transformed_lowerbound = inverse_transform_rect[\"y\"]+inverse_transform_rect[\"height\"];\r\n\r\n            if(transformed_leftbound<leftbound){\r\n                transformed_leftbound = leftbound;\r\n            }\r\n            if(transformed_rightbound>rightbound){\r\n                transformed_rightbound = rightbound;\r\n            }\r\n            if(transformed_upperbound<upperbound){\r\n                transformed_upperbound = upperbound;\r\n            }\r\n            if(transformed_lowerbound>lowerbound){\r\n                transformed_lowerbound = lowerbound;\r\n            }\r\n            let clipx = transformed_leftbound;\r\n            let clipy = transformed_upperbound;\r\n            let clipwidth = transformed_rightbound - transformed_leftbound;\r\n            let clipheight = transformed_lowerbound - transformed_upperbound;\r\n            if(clipwidth < 0){\r\n                clipwidth = 0;\r\n            }else if(clipwidth>occupyWidth){\r\n                clipwidth = occupyWidth;\r\n            }\r\n            if(clipheight<0){\r\n                clipheight=0;\r\n            }else if(clipheight>occupyHeight){\r\n                clipheight = occupyHeight;\r\n            }\r\n            return {\r\n                \"x\":clipx,\r\n                \"y\":clipy,\r\n                \"width\":clipwidth,\r\n                \"height\":clipheight\r\n            }\r\n\r\n        }\r\n        function calculateTransform(canvasX:number,canvasY:number,canvasWidth:number, canvasHeight:number, bounding_box:any){\r\n            let leftbound = bounding_box[\"leftbound\"];\r\n            let upperbound = bounding_box[\"upperbound\"];\r\n            let occupyHeight = bounding_box[\"occupyHeight\"];\r\n            let occupyWidth = bounding_box[\"occupyWidth\"];\r\n            let xscale = canvasWidth / occupyWidth;\r\n            let yscale = canvasHeight / occupyHeight;\r\n            let scale = Math.min(xscale, yscale);\r\n            let dx = (canvasWidth - occupyWidth * scale)/2 - leftbound*scale + canvasX;\r\n            let dy = (canvasHeight - occupyHeight * scale)/2 - upperbound*scale + canvasY;\r\n            //console.log(\"canvasWidth, canvasHeight, occupyWidth, occupyHeight\", canvasWidth,canvasHeight, occupyWidth,occupyHeight);\r\n            let calTransform = {\r\n                \"k\": scale,\r\n                \"x\":dx,\r\n                \"y\":dy\r\n\r\n            }\r\n            return calTransform;\r\n\r\n        }\r\n        function renderContext(context:any){\r\n\r\n\r\n            // Unfocused nodes rendering.\r\n            if(DisplayUnfocusedNodes){\r\n                tempData.links.filter((d:any)=>{\r\n                    if(d.source.highlight && d.target.highlight){\r\n                        return false;\r\n                    }else{\r\n                        return true;\r\n                    }\r\n                }).forEach(function(d:any) {\r\n                    drawLine(context, d.color, d.source.x, d.source.y, d.target.x, d.target.y, null, d.weight);\r\n                });\r\n        \r\n                // Draw the nodes\r\n                tempData.nodes.filter((d:any)=>{\r\n                    return !d[\"highlight\"];\r\n                }\r\n                ).forEach(function(d:any, i:any) {\r\n                    //console.log(\"radius\",d.radius);\r\n                    let node_inner_radius = d.radius - radius_gap;\r\n                    let node_radius = d.radius;\r\n                    let node_outer_radius = d.radius * 2;\r\n                    let node_outer_arc_encoded_value = d.node_weight;\r\n                    drawNodeGlyph(context, d.color, node_inner_radius, node_radius, \r\n                        node_outer_radius, d.x, d.y, false, node_outer_arc_encoded_value, true);\r\n                });\r\n            }\r\n            \r\n            \r\n            tempData.links.filter((d:any)=>{\r\n                if(d.source.highlight && d.target.highlight){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }).forEach(function(d:any) {\r\n                drawLine(context, d.color, d.source.x, d.source.y, d.target.x, d.target.y, 5 * d.weight, d.weight);\r\n            });\r\n            tempData.nodes.filter((d:any)=>{\r\n                return d[\"highlight\"];\r\n                \r\n            }).forEach(function(d:any,i:any){\r\n                let node_inner_radius = d.radius - radius_gap;\r\n                let node_radius = d.radius;\r\n                let node_outer_radius = d.radius * 2;\r\n                let node_outer_arc_encoded_value = d.node_weight;\r\n                drawNodeGlyph(context, d.color, node_inner_radius, node_radius, \r\n                    node_outer_radius, d.x, d.y, false, node_outer_arc_encoded_value, true);\r\n\r\n            })\r\n        }\r\n        function simulationUpdate(){\r\n            context.save();\r\n            context.clearRect(0, 0, graphWidth, height);\r\n            context.translate(transform.x, transform.y);\r\n            context.scale(transform.k, transform.k);\r\n            console.log(\"simulationUpdate\",transform);\r\n            renderContext(context);\r\n            context.restore();\r\n            \r\n            //let canvasWidth = 100 * graphWidth / height;\r\n            if(DisplayOverview){\r\n                let graph_bounding_box = calculateGraphBoundingBox();\r\n                calTransform = calculateTransform(canvasX, canvasY, canvasWidth, canvasHeight, graph_bounding_box);\r\n                console.log(\"calTransform\", calTransform);\r\n                let rect_configuration = {\r\n                    \"x\":0, \"y\":0, \"width\":graphWidth, \"height\":height\r\n                }\r\n                let overview_configuration = {\r\n                    \"x\":canvasX,\r\n                    \"y\":canvasY,\r\n                    \"width\":canvasWidth,\r\n                    \"height\":canvasHeight\r\n                }\r\n                let overview_inverse_rect = rectInverseTransform(overview_configuration, calTransform);\r\n                let overview_bounding_box = {\r\n                    \"leftbound\":overview_inverse_rect[\"x\"],\r\n                    \"upperbound\":overview_inverse_rect[\"y\"],\r\n                    \"occupyWidth\":overview_inverse_rect[\"width\"],\r\n                    \"occupyHeight\":overview_inverse_rect[\"height\"]\r\n                }\r\n                let view_inverse_configuration = rectInverseTransformAndClip(rect_configuration, transform, overview_bounding_box);\r\n                let view_configuration = rectTransform(view_inverse_configuration, calTransform); \r\n    \r\n                overview_context.save();\r\n                overview_context.clearRect(0, 0, graphWidth, height);\r\n                drawRectStroke(overview_context, canvasX, canvasY, canvasWidth, canvasHeight);\r\n                drawRect(overview_context, canvasX, canvasY, canvasWidth, canvasHeight);\r\n                \r\n                overview_context.translate(calTransform.x, calTransform.y);\r\n                overview_context.scale(calTransform.k, calTransform.k);\r\n                renderContext(overview_context);\r\n                overview_context.scale(1/calTransform.k, 1/calTransform.k);\r\n                overview_context.translate(-calTransform.x, -calTransform.y);\r\n                drawRectStroke(overview_context, view_configuration[\"x\"], view_configuration[\"y\"], view_configuration[\"width\"], view_configuration[\"height\"],\"#000\");\r\n                drawRect(overview_context, view_configuration[\"x\"], view_configuration[\"y\"], view_configuration[\"width\"], view_configuration[\"height\"],\"#ccc\",0.5);\r\n                overview_context.restore();\r\n                \r\n            }\r\n            \r\n            \r\n            handleMouseMove(middleCanvas, true);\r\n        }\r\n        function middleCanvasSimulationUpdate(){\r\n            let judgeHovered = (d:any)=>{\r\n                if(d.hasOwnProperty(\"hovered\") && d[\"hovered\"]){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n            middle_context.save();\r\n            \r\n            middle_context.clearRect(0, 0, graphWidth, height);\r\n            middle_context.translate(transform.x, transform.y);\r\n            middle_context.scale(transform.k, transform.k);\r\n            tempData.links.filter((d:any)=>{\r\n                if(judgeHovered(d.source) && judgeHovered(d.target)){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }).forEach(function(d:any) {\r\n                drawLine(middle_context, d.real_color, d.source.x, d.source.y, d.target.x, d.target.y, null, d.weight);\r\n            });\r\n            // Draw the hovered nodes\r\n            tempData.nodes.filter((d:any)=>{\r\n                return judgeHovered(d);\r\n            }).sort(order_determine).forEach(function(d:any, i:any) {\r\n                let node_inner_radius = d.radius - radius_gap;\r\n                let node_radius = d.radius;\r\n                let node_outer_radius = d.radius * 2;\r\n                let node_outer_arc_encoded_value = d.node_weight;\r\n                drawNodeGlyph(middle_context, d.real_color, node_inner_radius*d.hover_cons, \r\n                    node_radius*d.hover_cons, node_outer_radius*d.hover_cons, d.x, d.y, true,\r\n                    node_outer_arc_encoded_value, false);\r\n            });\r\n            middle_context.restore();\r\n        }\r\n     }\r\n \r\n    public render() {     \r\n        return (\r\n            <div id=\"force_directed_graph\">\r\n                <canvas id=\"bottom\" className=\"AbsPos\" />\r\n                <canvas id=\"middle\" className=\"AbsPos\"/>\r\n                <canvas id=\"overview\" className=\"AbsPos\"/>\r\n                <svg\r\n                    id=\"svgChart\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"AbsPos\"\r\n                >\r\n                    <g id=\"ForceDirectedLegend\">\r\n\r\n                    </g>\r\n                    <g id=\"ForceDirectedColorLegend\">\r\n\r\n                    </g>\r\n                </svg>\r\n                <div id=\"tooltip\" className=\"AbsPos\" />\r\n                \r\n                <canvas id=\"event\" className=\"AbsPos\"/>\r\n            </div>\r\n            \r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import ForceDirectedGraphCanvas from '../components/DataRuns/GraphView/ForceDirectedGraphCanvas'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    GraphViewState: state.GraphViewState\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForceDirectedGraphCanvas);\r\n\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\n//import ForceDirectedGraph from \"./ForceDirectedGraph\";\r\n//import ForceDirectedGraphCanvas from \"./ForceDirectedGraphCanvas\";\r\n\r\nimport { Select, Button,  Tag, InputNumber } from 'antd';\r\nimport {getCoraNodeColor, \r\n    constructNeighborSet,getTrainColor, getNodeStatisticStr, \r\n    transform_graphlayout, skew_weight} from '../../../helper';\r\nimport { SettingOutlined } from '@ant-design/icons';\r\nimport GraphViewSettingsModalContainer from '../../../container/GraphViewSettingsModalContainer';\r\nimport ForceDirectedGraphCanvasContainer from '../../../container/ForceDirectedGraphCanvasContainer';\r\nconst Option = Select.Option;\r\n\r\n//const d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    selectedNodeIdList:any[],\r\n    selectedMessagePassingNodeIdList:any[],\r\n    showSource: boolean,\r\n    width: number,\r\n    height: number,\r\n    changeSpecificNodeIdList : any,\r\n    changeSelectInspectNode:any,\r\n    select_inspect_node : number,\r\n    changePrevGraphJson: any,\r\n    changeShowSource:any,\r\n    extendedMode: any,\r\n    changeExtendedMode:any,\r\n    GraphViewSettingsModal_visible:any,\r\n    changeGraphViewSettingsModal_visible:any,\r\n    selected_models_list:any\r\n}\r\nexport interface IState {\r\n    enableForceDirected: boolean,\r\n}\r\n\r\nexport default class GraphView extends React.Component<IProps, IState>{\r\n    public prevGraphJson:any = null;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onEnableForceDirected = this.onEnableForceDirected.bind(this);\r\n        this.onExtendedModeChange = this.onExtendedModeChange.bind(this);\r\n        this.onNodeClick = this.onNodeClick.bind(this);\r\n        this.onChangeSelectInspectNode = this.onChangeSelectInspectNode.bind(this);\r\n        this.state = {\r\n            enableForceDirected : false,\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        \r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     public onNodeClick(node_id:number){\r\n        let {showSource} = this.props;\r\n        //console.log(\"onNodeClick node_id, showSource, select_inspect_node\", node_id, showSource, select_inspect_node);\r\n        if(showSource === false){\r\n            this.props.changeSelectInspectNode(node_id);\r\n            this.props.changeShowSource(true);\r\n            this.props.changeExtendedMode(3);\r\n        }else{\r\n            //if(select_inspect_node === node_id){\r\n            //    this.props.changeShowSource(false);\r\n            //}else{\r\n                this.props.changeSelectInspectNode(node_id);\r\n            //}\r\n        }\r\n        \r\n         \r\n     }\r\n     public constructGraphJson(graph_object:any, show_mode:number, explained_node:number, \r\n         selectedNodeIdList:any, enableForceDirected:boolean, \r\n        select_inspect_node:number, showSource:boolean, width:number, height:number, selected_models_list:any, subgraph_index:number){\r\n        \r\n        \r\n        \r\n        \r\n        let selectedmodelsStr = selected_models_list.join(\"_\");\r\n        //let {width, height} = this.props;\r\n        let common = graph_object.common;\r\n        let individual = graph_object.individual;\r\n        let subgraphs = graph_object.subgraphs;\r\n        let sp_subgraphs;\r\n        let subgraph_list = graph_object.subgraph_list;\r\n        let subgraph_name = \"\";\r\n        let subgraph_mode = false;\r\n        if(subgraph_index >= 0){\r\n            subgraph_name = subgraph_list[subgraph_index];\r\n            if(Object.keys(subgraphs[subgraph_name][\"node_subgraphs\"]).indexOf(\"\"+select_inspect_node)>=0){\r\n                sp_subgraphs = subgraphs[subgraph_name][\"node_subgraphs\"][select_inspect_node];\r\n                selectedNodeIdList = sp_subgraphs[\"nodes\"];\r\n                subgraph_mode = true;\r\n            }\r\n        }else{\r\n            subgraph_mode = false;\r\n        }\r\n        console.log(\"subgraph_mode\", subgraph_mode);\r\n        let selectStr = selectedNodeIdList.join(\"_\");\r\n        let graph_name = common.name+\"_\"+common.dataset_id+\"_\"+(show_mode)+\"_\"+\r\n        common.data_type_id+\"_SELECTED_\"+selectStr+\"_SELECTEDEND_\"+enableForceDirected+\"_\"+width+\"_\"+height+\"_SELECTMODEL_\"+selectedmodelsStr+\"_SELECTMODELEND_\"\r\n        +subgraph_index;\r\n\r\n        if(show_mode == 4){\r\n            graph_name = graph_name+\"_\"+explained_node;\r\n        }\r\n        let graph_in = common.graph_in;\r\n        let graph_target = common.graph_target;\r\n        let graph_layout = common.graph_layout;\r\n        let mask = common.mask;\r\n        let train_mask_set = new Set(mask.train);\r\n        if(selectedNodeIdList.length === 0){\r\n            selectedNodeIdList = []\r\n            for(let i = 0; i<graph_layout.length;i++){\r\n                selectedNodeIdList.push(i);\r\n            }\r\n        }\r\n        let new_graph_layout;// = graph_layout;\r\n        new_graph_layout = graph_layout;\r\n        let enable_forceDirected = enableForceDirected;\r\n        if(new_graph_layout.length > 0){\r\n            new_graph_layout = transform_graphlayout(new_graph_layout, width, height);\r\n        }else{\r\n            \r\n        }\r\n        let data_type = common.data_type_id;\r\n\r\n        if(data_type == 2){\r\n            let source_list = graph_in.senders;\r\n            let target_list = graph_in.receivers;\r\n            \r\n            let node_num = graph_target.node_features.length;\r\n            let enablePrevGraphLayout = false;\r\n            let prevGraphJson = this.prevGraphJson;\r\n            if(prevGraphJson && prevGraphJson[\"success\"]){\r\n                if(prevGraphJson[\"nodes\"].length === node_num){\r\n                    enablePrevGraphLayout = true;\r\n                }\r\n            }\r\n            //let node_num = selectedNodeIdList.length;\r\n            let edge_num = graph_in.senders.length;\r\n            let nodes_json = [];\r\n            let links_json = [];\r\n            let links_color_json = [];\r\n            //var color_func = d3.scaleOrdinal(d3.schemeCategory10);\r\n            for(let i = 0; i<node_num;i++){\r\n                let label ;\r\n                let index = i;\r\n                let title = \"\" + index;\r\n                let real_color:any;\r\n                let highlight = 1;\r\n                let node_weight = 1;\r\n                let ground_truth_label = graph_target.node_features[index];\r\n                label = ground_truth_label;\r\n                let color:any = [getCoraNodeColor(ground_truth_label, 2)];\r\n                for(let j = 0; j<selected_models_list.length; j++){\r\n                    let prediction_label = individual[selected_models_list[j]].graph_out.node_features[index];\r\n                    color.push(getCoraNodeColor(prediction_label,3))\r\n                }\r\n                color.push(getTrainColor(index, train_mask_set));\r\n                real_color = color.slice();\r\n                let subnode_index = selectedNodeIdList.indexOf(index);\r\n                if(subnode_index>=0){\r\n                    if(subgraph_mode){\r\n                        node_weight = sp_subgraphs[\"nweight\"][subnode_index];\r\n                        title = title + \": \" + node_weight.toFixed(4);\r\n                        //console.log(\"node_weight\", node_weight)\r\n                    }\r\n                }else{\r\n                    color = [\"#ddd\",\"#ddd\",\"#ddd\",\"#ddd\",\"#ddd\"];\r\n                    highlight = 0;\r\n                }\r\n                \r\n                let radius = 3;\r\n                if(index === select_inspect_node && showSource === true){\r\n                    radius = 6;\r\n                }\r\n                let node_object:any = {\r\n                    \"id\":index,\r\n                    \"group\":label,\r\n                    \"color\":color,\r\n                    \"real_color\":real_color,\r\n                    \"radius\":radius,\r\n                    \"highlight\":highlight,\r\n                    \"node_weight\":skew_weight(node_weight, 0, 1),\r\n                    \"title\":title\r\n                }\r\n                \r\n                if(enablePrevGraphLayout){\r\n                    node_object[\"x\"] = prevGraphJson[\"nodes\"][i][\"x\"];\r\n                    node_object[\"y\"] = prevGraphJson[\"nodes\"][i][\"y\"];\r\n                }else if(enable_forceDirected === false){\r\n                    node_object[\"x\"] = new_graph_layout[i][0];\r\n                    node_object[\"y\"] = new_graph_layout[i][1];\r\n                }\r\n                nodes_json.push(node_object);\r\n            }\r\n            for(let i = 0; i<edge_num;i++){\r\n                let link_color = \"#eee\";\r\n                let eweight = 0.1;\r\n\r\n                if(!subgraph_mode){\r\n                    if(selectedNodeIdList.indexOf(source_list[i])>=0){\r\n                        if(selectedNodeIdList.indexOf(target_list[i])>=0){\r\n                            link_color = \"#bbb\";\r\n                        }\r\n                    }\r\n                }else{\r\n                    let selectedEdgeIdList = sp_subgraphs[\"eids\"];\r\n                    let ceid = selectedEdgeIdList.indexOf(i);\r\n                    if(ceid>=0){\r\n                        link_color = \"#bbb\";\r\n                        //eweight = sp_subgraphs[\"eweight\"][ceid] * 0.6;\r\n                        eweight = 0.1;\r\n                    }\r\n                }\r\n\r\n                \r\n                if(links_color_json.indexOf(link_color)>=0){\r\n                    \r\n                }else{\r\n                    links_color_json.push(link_color);\r\n                }\r\n                \r\n                links_json.push({\r\n                    \"source\": source_list[i],\r\n                    \"target\": target_list[i],\r\n                    \"value\":1,\r\n                    \"color\":link_color,\r\n                    \"real_color\":\"#bbb\",\r\n                    \"weight\":skew_weight(eweight)\r\n                })\r\n                \r\n            }\r\n            let getColorLegend = () =>{\r\n                let graph_info = common.graph_additional_info;\r\n                let num_class = graph_info.num_class;\r\n                let label = [];\r\n                if(Object.keys(graph_info).indexOf(\"idx_to_class\")>=0){\r\n                    let idx_to_class = graph_info.idx_to_class;\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push({\r\n                            \"text\":\"\"+i+\":\"+idx_to_class[i],\r\n                            \"color\":getCoraNodeColor(i,2)\r\n                        })\r\n                    }\r\n                }else{\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push({\r\n                            \"text\":i,\r\n                            \"color\":getCoraNodeColor(i,2)\r\n                        })\r\n                    }\r\n                }\r\n                return label;\r\n            }\r\n            //let P1_name = individual.GCN.real_model_name;\r\n            //let P2_name = individual.MLP.real_model_name;\r\n            //let P3_name = individual.GCN_Identity_features.real_model_name;\r\n            let pie_name = selected_models_list;\r\n            let graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"nodes\":nodes_json,\r\n                \"links\":links_json,\r\n                \"links_color\":links_color_json,\r\n                \"nodenum\":node_num,\r\n                \"edgenum\":edge_num,\r\n                \"enable_forceDirected\":enable_forceDirected,\r\n                \"colorLegend\":getColorLegend(),\r\n                \"pieLegend\":{\r\n                    \"pie_name\":pie_name\r\n                }\r\n            }\r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n    }\r\n    public onEnableForceDirected(checked:boolean){\r\n        this.setState({\r\n            enableForceDirected: checked\r\n        })\r\n    }\r\n    public onExtendedModeChange(e:any){\r\n        /*this.setState({\r\n            extendedMode: e.target.value\r\n        })*/\r\n        this.props.changeExtendedMode(e);\r\n        /*this.setState({\r\n            extendedMode: e\r\n        })*/\r\n    }\r\n    public constructExtendedSelectedNodeIdList(selectedNodeIdList:any, NeighborSet:any){\r\n        if(selectedNodeIdList.length === 0){\r\n            return [];\r\n        }else{\r\n            \r\n            let new_selectedNodeIdList = selectedNodeIdList.slice();\r\n            for(let i = 0 ; i<selectedNodeIdList.length; i++){\r\n                let nodeId = selectedNodeIdList[i];\r\n                new_selectedNodeIdList = new_selectedNodeIdList.concat(NeighborSet[nodeId])\r\n            }\r\n\r\n            new_selectedNodeIdList = Array.from(new Set(new_selectedNodeIdList));\r\n            return new_selectedNodeIdList;\r\n        }\r\n        \r\n    }\r\n    public onChangeSelectInspectNode(node_id:any, node_num:number){\r\n        let new_node_id:number = parseInt(node_id);\r\n        if(!new_node_id || new_node_id<0){\r\n            new_node_id = 0;\r\n        }\r\n        if(new_node_id>=node_num){\r\n            new_node_id = node_num - 1;\r\n        }\r\n        console.log(\"graphview, new_node_id\", new_node_id);\r\n        this.props.changeSelectInspectNode(new_node_id);\r\n    }\r\n    public showGraphViewSettingModal(){\r\n        this.props.changeGraphViewSettingsModal_visible(true);\r\n    }\r\n    public render() {\r\n        let {graph_object, show_mode, explained_node, selectedNodeIdList,selected_models_list,\r\n             showSource, select_inspect_node, width, height, extendedMode} = this.props;\r\n\r\n        let onNodeClick = this.onNodeClick;\r\n        let specificNodeIdList = selectedNodeIdList;\r\n       \r\n\r\n        let common = graph_object.common;\r\n        let subgraph_list = graph_object.subgraph_list;\r\n        // One Hop\r\n        let graph_in = common.graph_in;\r\n        let NeighborSet = constructNeighborSet(graph_in);\r\n        \r\n        let ForceDirectedWidth = width - 10;\r\n        let ForceDirectedHeight = height - 50;\r\n        let subgraph_index = -1;\r\n\r\n        if(showSource){\r\n            specificNodeIdList = [select_inspect_node];\r\n        }\r\n        if(extendedMode === 2){\r\n            specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n        }else if(extendedMode === 3){\r\n            specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n            specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n        }\r\n        else if(extendedMode >= 4){\r\n            subgraph_index = extendedMode - 4;\r\n            if(subgraph_index >= subgraph_list.length){\r\n                console.log(\"Not found the subgraph.\");\r\n                subgraph_index = -1;\r\n            }\r\n        }\r\n        this.props.changeSpecificNodeIdList(specificNodeIdList);\r\n\r\n        let graph_json:any = this.constructGraphJson(graph_object, show_mode, explained_node, \r\n            specificNodeIdList, this.state.enableForceDirected, \r\n            select_inspect_node,showSource,  ForceDirectedWidth, ForceDirectedHeight, selected_models_list, subgraph_index);\r\n\r\n        graph_json[\"NeighborSet\"] = NeighborSet;\r\n        if(graph_json[\"success\"]){\r\n            this.prevGraphJson = graph_json;\r\n        }\r\n        \r\n            \r\n        if(graph_json[\"success\"]){\r\n            let nodenum: number = graph_json[\"nodenum\"];\r\n            let extendedOptions:any = [\r\n                [1,\"None\"],\r\n                [2,\"One Hop\"],\r\n                [3,\"Two Hop\"]];\r\n            if(showSource){\r\n                let subgraphs = graph_object.subgraphs;\r\n                let found_extendedOptions = false;\r\n                if(extendedMode <= 3){\r\n                    found_extendedOptions = true;\r\n                }\r\n                for (var subg_type_id = 0; subg_type_id < subgraph_list.length; subg_type_id++) {\r\n                    let subgraph_name = subgraph_list[subg_type_id];\r\n                    if(Object.keys(subgraphs[subgraph_name][\"node_subgraphs\"]).indexOf(\"\"+select_inspect_node)>=0){\r\n                        let sp_subgraphs = subgraphs[subgraph_name][\"node_subgraphs\"][select_inspect_node];\r\n                        if(sp_subgraphs[\"nodes\"].length > 0){\r\n                            extendedOptions.push([subg_type_id + 4, subgraph_list[subg_type_id]]);\r\n                            if(extendedMode == subg_type_id + 4){\r\n                                found_extendedOptions = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if(!found_extendedOptions){\r\n                    this.props.changeExtendedMode(3);\r\n                }\r\n            }\r\n            \r\n\r\n            let stopLayout = () =>{\r\n                this.onEnableForceDirected(false);\r\n            }\r\n            let startLayout = () =>{\r\n                this.onEnableForceDirected(true);\r\n            }\r\n            \r\n            return (            \r\n            <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n                <div className=\"ViewTitle\">Graph View\r\n                    <div style={{float:'right'}}>\r\n                    {(showSource)?[<span key={\"span\"+1}>Id:</span>,\r\n                    <InputNumber min={0} max={nodenum} size=\"small\" value={select_inspect_node} onChange={(e:any)=> {this.onChangeSelectInspectNode(e,nodenum);}} />,\r\n                    <span key={\"span\"+3}>&nbsp;</span>,\r\n                    <Button size=\"small\" onClick={()=>{this.props.changeShowSource(false);this.props.changeExtendedMode(1);}}>X</Button> ]:[<span key={\"span\"+2}></span>]}\r\n                    <GraphViewSettingsModalContainer />\r\n                    &nbsp;&nbsp;\r\n                    Subgraph:&nbsp;\r\n                    <Select\r\n                        placeholder=\"Select a subgraph\"\r\n                        value={extendedMode}\r\n                        style={{ width: '100px' }}\r\n                        onChange={this.onExtendedModeChange}\r\n                        size=\"small\"\r\n                    >\r\n                        {extendedOptions.map((d:any)=>(\r\n                            <Option value={d[0]} key={d[0]}>\r\n                                {d[1]}\r\n                            </Option>\r\n                        ))}\r\n                        </Select>\r\n                    &nbsp;&nbsp;\r\n                    {(this.state.enableForceDirected)?\r\n                        <Button type=\"primary\" size=\"small\" onClick={stopLayout}>Stop Layout</Button>:\r\n                        <Button type=\"default\" size=\"small\" onClick={startLayout}>Start Layout</Button>}\r\n                    &nbsp;&nbsp;\r\n                    <Button type=\"default\" size=\"small\" onClick={()=>{this.showGraphViewSettingModal()}} ><SettingOutlined /></Button>\r\n                    &nbsp;&nbsp;\r\n                    #Nodes: <Tag>{getNodeStatisticStr(specificNodeIdList.length, nodenum)} </Tag>\r\n                    \r\n                    </div>\r\n                </div>\r\n                <div className=\"ViewBox\">\r\n                    <div\r\n                    style={{\r\n                        width: '100%',\r\n                        }}\r\n                    >\r\n                    <ForceDirectedGraphCanvasContainer graph_json={graph_json} width={ForceDirectedWidth} height={ForceDirectedHeight} onNodeClick={onNodeClick}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )}else{\r\n                return <div />\r\n            }\r\n    }\r\n}\r\n\r\n","import GraphView from './GraphView'\r\nexport default GraphView;\r\n\r\n\r\n","import GraphView from '../components/DataRuns/GraphView/'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\nimport {changeSpecificNodeIdList, changeSelectInspectNode, changePrevGraphJson, \r\n    changeShowSource, changeExtendedMode, changeGraphViewSettingsModal_visible} from '../actions';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    selectedNodeIdList : state.selectedNodeIdList,\r\n    selectedMessagePassingNodeIdList: state.selectedMessagePassingNodeIdList,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    extendedMode : state.extendedMode,\r\n    GraphViewSettingsModal_visible: state.GraphViewSettingsModal_visible,\r\n    selected_models_list: state.selected_models_list\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeSpecificNodeIdList:  (specificNodeIdList:any) => dispatch(changeSpecificNodeIdList(specificNodeIdList)),\r\n    changeSelectInspectNode : (select_inspect_node:number) => dispatch(changeSelectInspectNode(select_inspect_node)),\r\n    changePrevGraphJson: (prevGraphJson:any) => dispatch(changePrevGraphJson(prevGraphJson)),\r\n    changeShowSource: (showSource:boolean) => dispatch(changeShowSource(showSource)),\r\n    changeExtendedMode: (extendedMode:any) => dispatch(changeExtendedMode(extendedMode)),\r\n    changeGraphViewSettingsModal_visible: (visible:boolean) => dispatch(changeGraphViewSettingsModal_visible(visible))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphView);\r\n\r\n\r\n\r\n","\r\nimport './Matrix.css'\r\nimport * as React from \"react\";\r\nimport { timeSaturday } from 'd3';\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  id:number,\r\n  MatrixFilters:any,\r\n  MatrixRowFilters:any,\r\n  changeMatrixFilters:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class Matrix extends React.Component<IProps, IState>{\r\n    private TAB : string= \"Matrix_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         //console.log('Component did update!')\r\n         if(prevProps.feature_matrix_json.name !== this.props.feature_matrix_json.name ||\r\n           prevProps.MatrixFilters.refreshnumber !== this.props.MatrixFilters.refreshnumber ||\r\n           prevProps.MatrixRowFilters.refreshnumber !== this.props.MatrixRowFilters.refreshnumber){\r\n          ///d3.selectAll(\"#FeatureMatrix_\"+this.props.id).remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n\r\n    public renderD3(){\r\n        //console.log(\"Matrix filters:\", this.props.MatrixFilters)\r\n        //console.log(this.props.MatrixRowFilters);\r\n        let {feature_matrix_json} = this.props;\r\n        let layout_config = this.props.layout_config;\r\n        let showSource = feature_matrix_json.showSource;\r\n        let margin = { top: 0, right: 30, bottom: 100, left: 0 },\r\n          width = layout_config.width - margin.left - margin.right,\r\n          y_axis = feature_matrix_json[\"y_axis\"], // y_axis_name\r\n          y_axis_info = feature_matrix_json[\"y_axis_info\"],\r\n          x_axis = feature_matrix_json[\"x_axis\"], // x_axis_name\r\n          selectedFeatureTitle = feature_matrix_json[\"selectedFeatureTitle\"],\r\n          data = feature_matrix_json[\"matrix\"],\r\n          type = feature_matrix_json[\"type\"],\r\n          color_info = feature_matrix_json[\"color_info\"],\r\n          highlight_flag = feature_matrix_json[\"highlight_flag\"],\r\n          pieName = feature_matrix_json[\"pieName\"];\r\n        let models_length = pieName.length;\r\n        let matrixFilters = this.props.MatrixFilters;\r\n      console.log(\"renderD3\", y_axis_info)\r\n      let matrixRowFilters = this.props.MatrixRowFilters;\r\n      function transformDataTwoFilters(data:any, indexFilters:any, rowFilters:any){\r\n        let newData:any = [];\r\n        let rowTest = new Set(rowFilters);\r\n        let rowMap:any = {}\r\n        for(let i = 0 ;i<rowFilters.length;i++){\r\n          rowMap[rowFilters[i]] = i;\r\n        }\r\n        for(let i = 0; i<data.length; i++){\r\n          \r\n          if(data[i][\"x\"]>=indexFilters[0]&&data[i][\"x\"]<indexFilters[1]){\r\n            let curr_row_id = data[i][\"y\"];\r\n            if(rowTest.has(curr_row_id)){\r\n              newData.push({\r\n                \"x\":data[i][\"x\"] - indexFilters[0],\r\n                \"y\":rowMap[curr_row_id],\r\n                \"value\":data[i][\"value\"]\r\n              })\r\n            }\r\n            \r\n          }\r\n        }\r\n        return newData;\r\n      }\r\n      function transformDataOneFilter(data:any, indexFilters:any){\r\n        let newData:any = [];\r\n        \r\n        for(let i = 0; i<data.length; i++){\r\n          \r\n          if(data[i][\"x\"]>=indexFilters[0]&&data[i][\"x\"]<indexFilters[1]){\r\n              newData.push({\r\n                \"x\":data[i][\"x\"] - indexFilters[0],\r\n                \"y\":data[i][\"y\"],\r\n                \"value\":data[i][\"value\"]\r\n              })\r\n            \r\n            \r\n          }\r\n        }\r\n        return newData;\r\n      }\r\n      function transformYaxis(row_filters:any, y_axis:any){\r\n        let new_y_axis:any[] = [];\r\n        for(let i = 0; i<row_filters.length; i++){\r\n          new_y_axis.push(y_axis[row_filters[i]]);\r\n        }\r\n        return new_y_axis;\r\n      }\r\n      let max_row_num_block = Math.max(1, Math.floor(width / 15));\r\n        \r\n      if(!matrixFilters.hasOwnProperty(\"index\")){\r\n        matrixFilters[\"index\"] = [0,max_row_num_block];\r\n      }\r\n        /*if(matrixFilters[\"index\"][1] - matrixFilters[\"index\"][0] >=100){\r\n          x_axis = [];\r\n          y_axis = [];\r\n          data = [];\r\n        }else{*/\r\n          if(matrixFilters[\"index\"][1] - matrixFilters[\"index\"][0] >=max_row_num_block){\r\n            matrixFilters[\"index\"][1] = matrixFilters[\"index\"][0] + max_row_num_block;\r\n          }\r\n          let y_axis_color = color_info[\"y_axis_color\"];\r\n          if(matrixRowFilters.hasOwnProperty(\"row_index\")&&showSource){\r\n            x_axis = x_axis.slice(matrixFilters[\"index\"][0], matrixFilters[\"index\"][1]);\r\n            selectedFeatureTitle = selectedFeatureTitle.slice(matrixFilters[\"index\"][0], matrixFilters[\"index\"][1]);\r\n            y_axis = transformYaxis(matrixRowFilters[\"row_index\"], y_axis);\r\n            y_axis_color = transformYaxis(matrixRowFilters[\"row_index\"], y_axis_color);\r\n            y_axis_info = transformYaxis(matrixRowFilters[\"row_index\"], y_axis_info);\r\n            console.log(\"Filtered y axis info\", y_axis_info)\r\n            data = transformDataTwoFilters(data, matrixFilters[\"index\"], matrixRowFilters[\"row_index\"]);\r\n          }else{\r\n            x_axis = x_axis.slice(matrixFilters[\"index\"][0], matrixFilters[\"index\"][1]);\r\n            selectedFeatureTitle = selectedFeatureTitle.slice(matrixFilters[\"index\"][0], matrixFilters[\"index\"][1]);\r\n\r\n            data = transformDataOneFilter(data, matrixFilters[\"index\"]);\r\n          }\r\n          \r\n          if(!showSource&& y_axis.length!==y_axis_color.length){\r\n            y_axis = [];\r\n            x_axis = [];\r\n            data = [];\r\n          }\r\n          \r\n        //}\r\n        \r\n        let gridSize = Math.floor(width / (max_row_num_block));\r\n        let height = gridSize * y_axis.length + 20;\r\n      \r\n\r\n       let buckets:any , colors:any;\r\n       if(feature_matrix_json[\"distance_select\"] === 1 && type === \"discrete\"){\r\n        buckets = 2;\r\n        colors =  [\"#ffffd9\",\"#081d58\"]\r\n      }else{\r\n         \r\n          buckets = 9;\r\n          colors = [\"#ffffd9\",\"#edf8b1\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#1d91c0\",\"#225ea8\",\"#253494\",\"#081d58\"]\r\n      \r\n       }\r\n      //console.log(feature_matrix_json);\r\n      function constructFakeData(){\r\n          let fakedata:any = [];\r\n          for(let i = 0; i<x_axis.length; i ++){\r\n            for(let j =0 ;j<y_axis.length; j++){\r\n              fakedata.push({\r\n                \"x\":i,\r\n                \"y\":j,\r\n                \"value\":0\r\n              })\r\n            }\r\n          }\r\n          return fakedata;\r\n      }\r\n      let fakedata = constructFakeData(); \r\n      let final_data:any;\r\n      if(type === \"discrete\"){\r\n         final_data = fakedata.concat(data);\r\n      }else{\r\n        final_data = data;\r\n      }\r\n      let data_max = d3.max(final_data, (d:any) => d.value);\r\n      let data_min = d3.min(final_data, (d:any) => d.value);\r\n      //console.log(\"Data Max Min\", data_max, data_min)\r\n      const top_svg = d3.select(\"#FeatureMatrix_\"+this.props.id)\r\n          .attr(\"width\", width + margin.left + margin.right)\r\n          .attr(\"height\", height + margin.top + margin.bottom)\r\n          .attr(\"transform\", \"translate(\" + layout_config.x + \",\" + layout_config.y + \")\");\r\n      const svg = top_svg.select(\"#Matrix\")\r\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n      // Axis Label Definition //\r\n      // --------- y axis ------------- //\r\n      if(showSource){\r\n        y_axis = [];\r\n      }\r\n        const y_axis_labels = svg.selectAll(\".y_axisLabel\")\r\n                              .data(y_axis,function(d:any){\r\n                                return d;\r\n                              });\r\n      let radius = Math.min(5,gridSize/4);\r\n      let radius_gap = 0.3;\r\n      let transform_x = -radius*2 - radius_gap;\r\n      let transform_y = radius*2;\r\n      let y_axis_label_enter = y_axis_labels.enter().append(\"g\").attr(\"class\", \"y_axisLabel\");\r\n\r\n          y_axis_label_enter.merge(y_axis_labels)\r\n          .attr(\"transform\",(d:any, i:any) => \"translate(\"+transform_x+\",\" + (i * gridSize + transform_y) + \")\")\r\n          .on(\"mouseover\", function(d:any,i:any){return tooltip_nodetitle.style(\"visibility\", \"visible\").text(y_axis_info[i]);})\r\n            .on(\"mousemove\", function(d:any,i:any){return tooltip_nodetitle.style(\"top\", (d3.event.pageY-10)+\"px\").style(\"left\",(d3.event.pageX+10)+\"px\");})\r\n            .on(\"mouseout\", function(d:any,i:any){return tooltip_nodetitle.style(\"visibility\", \"hidden\");});;\r\n            ;\r\n          y_axis_labels.exit().remove();\r\n      let y_axis_label_color = \"#000\";\r\n      function getArc(radius:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(radius*2);\r\n    }\r\n      if(color_info[\"enable_y_axis_color\"])\r\n      {\r\n        let y_axis_color = color_info[\"y_axis_color\"];\r\n        var arc_data:any = [];\r\n        //console.log(\"Feature Matrix\", models_length);\r\n        for(let i = 0; i<models_length; i++){\r\n            arc_data.push({\r\n                \"index\":i,\r\n                \"value\":1/models_length\r\n            })\r\n        }\r\n        let startAngle = -180 / models_length;\r\n        var ori_arcs = d3.pie()\r\n        .startAngle((startAngle/180) * Math.PI)\r\n        .endAngle((2+startAngle/180) * Math.PI)\r\n        .value(function(a:any){\r\n            return a.value;\r\n        })\r\n        .sort(function(a:any, b:any) {\r\n            return a.index<b.index;\r\n        });\r\n\r\n        var arcs = ori_arcs(arc_data);\r\n        \r\n        \r\n\r\n        var outer_circles_enter = y_axis_label_enter.append(\"circle\").attr(\"class\",\"outer_circle\");\r\n        var outer_circles = y_axis_labels.select(\"circle.outer_circle\");\r\n        var outer_circles_enter_update = outer_circles_enter.merge(outer_circles);\r\n        \r\n        outer_circles_enter_update//.transition(trans)\r\n                    .attr(\"r\", function(d:any){\r\n                        return radius*2\r\n                    })\r\n                   .attr(\"fill\", function(d:any,i:any) { return y_axis_color[i][4]; });\r\n\r\n        \r\n        let overall_background = [];\r\n        for (let i = 0; i < models_length; i++){\r\n            let background_enter = y_axis_label_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n            let background = y_axis_labels.select(\"path.arc_\"+i);\r\n            let background_enter_update  = background_enter.merge(background);\r\n            background_enter_update\r\n            .style(\"fill\", function(d:any,j:any){\r\n                return y_axis_color[j][i+1]\r\n            })\r\n            .attr(\"d\", function(d:any){\r\n                return getArc(radius)(arcs[i])\r\n            });\r\n            overall_background.push(background_enter_update);\r\n\r\n        }\r\n        \r\n        \r\n        var inner_circles_enter = y_axis_label_enter.append(\"circle\").attr(\"class\",\"inner_circle\");\r\n        var inner_circles = y_axis_labels.select(\"circle.inner_circle\");\r\n        var inner_circles_enter_update = inner_circles_enter.merge(inner_circles);\r\n        //console.log(\"circles enter update\", circles_enter.size(), inner_circles, circles.size(), circles);\r\n        //console.log(\"merge\", circles_enter.merge(circles));\r\n        \r\n        inner_circles_enter_update//.transition(trans)\r\n                    .attr(\"r\", function(d:any){\r\n                        return radius - radius_gap;\r\n                    })\r\n                    .attr(\"fill\", function(d:any,i:any) { return y_axis_color[i][0]; });\r\n                    \r\n      }\r\n      \r\n      \r\n      /*\r\n      \r\n      let rect_width = 36;\r\n      let rect_height = gridSize; \r\n      \r\n      if(color_info[\"enable_y_axis_color\"])\r\n      {\r\n        let y_axis_color = color_info[\"y_axis_color\"];\r\n        y_axis_label_color = \"#fff\";\r\n        \r\n        let y_axis_rect =  y_axis_labels.append(\"rect\")\r\n                .attr(\"x\", -rect_width )\r\n                .attr(\"y\", 0)\r\n                .attr(\"rx\", 4)\r\n                .attr(\"ry\", 4)\r\n                .attr(\"class\", \"hour bordered\")\r\n                .attr(\"width\", rect_width)\r\n                .attr(\"height\", rect_height)\r\n                .style(\"fill\", function(d:any, i:any){\r\n                  return y_axis_color[i];\r\n                })\r\n                .attr(\"class\", \"y-axis-rect bordered\");\r\n      }\r\n      */\r\n     \r\n     let y_axis_label_text_enter = y_axis_label_enter.append(\"text\");\r\n\r\n     y_axis_label_text_enter.merge(y_axis_labels.select(\"text\"))\r\n            .text(function (d:any) { return d; })\r\n            .style(\"text-anchor\", \"end\")\r\n            .style(\"font-size\", \"9pt\")\r\n            .style(\"font-family\", \"Consolas, courier\")\r\n            .style(\"fill\", y_axis_label_color)\r\n            .style(\"dominant-baseline\",\"central\")\r\n            .attr(\"transform\", \"translate(\"+transform_x+\",\" + 0 + \")\")\r\n            .attr(\"class\", \"y-axis\");\r\n            \r\n      // --------- x axis ------------- //\r\n      const x_axis_label = svg.selectAll(\".x_axisLabel\").data(x_axis, function(d:any){\r\n        return d;\r\n      });\r\n      \r\n      let x_axis_label_enter = x_axis_label.enter().append(\"g\").attr(\"class\",\"x_axisLabel\");\r\n        x_axis_label_enter.merge(x_axis_label).attr(\"transform\",(d:any, i:any) => \"translate(\" + i * gridSize + \",0)\")\r\n        .on(\"mouseover\", function(d:any,i:any){return tooltip.style(\"visibility\", \"visible\").text(selectedFeatureTitle[i]);})\r\n          .on(\"mousemove\", function(d:any){return tooltip.style(\"top\", (d3.event.pageY-10)+\"px\").style(\"left\",(d3.event.pageX+10)+\"px\");})\r\n          .on(\"mouseout\", function(d:any){return tooltip.style(\"visibility\", \"hidden\");});\r\n        x_axis_label.exit().remove();\r\n      let x_axis_label_color = \"#000\";\r\n      /*\r\n      if(color_info[\"enable_x_axis_color\"])\r\n      {\r\n        let x_axis_color = color_info[\"x_axis_color\"];\r\n        x_axis_label_color = \"#fff\";\r\n        let x_axis_rect =  x_axis_label.append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", -rect_width)\r\n            .attr(\"rx\", 4)\r\n            .attr(\"ry\", 4)\r\n            .attr(\"class\", \"hour bordered\")\r\n            .attr(\"width\", rect_height)\r\n            .attr(\"height\", rect_width)\r\n            .style(\"fill\", function(d:any, i:any){\r\n              return x_axis_color[i];\r\n            })\r\n            \r\n            .attr(\"class\", \"x-axis-rect bordered\");\r\n       \r\n      }\r\n      */\r\n      let x_axis_label_text_enter = x_axis_label_enter.append(\"text\");\r\n\r\n        x_axis_label_text_enter.merge(x_axis_label.select(\"text\"))\r\n          .text((d:any) => d)\r\n          .style(\"text-anchor\", \"begin\")\r\n          .style(\"font-size\", \"9pt\")\r\n          .style(\"font-family\", \"Consolas, courier\")\r\n          .style(\"fill\", x_axis_label_color)\r\n          .attr(\"transform\", \r\n            \"translate(\"+gridSize*0.25+\", -2)rotate(-45)\"\r\n          )\r\n          .attr(\"class\", \"x-axis\");\r\n\r\n      // \"translate(\"+gridSize*0.75+\", -2)rotate(-90)\"\r\n        \r\n      let color_domain = [];\r\n      let step = (data_max-data_min) / (buckets-1);\r\n      for(let i = 0; i< buckets; i++){\r\n        color_domain.push(i*step+data_min);\r\n      }\r\n      const colorScale = d3.scaleLinear()\r\n                          .domain(color_domain)\r\n                          .range(colors);\r\n\r\n      const cards = svg.selectAll(\".hour\")\r\n          .data(final_data, (d:any) => d.x+':'+d.y);\r\n\r\n      //cards.append(\"title\");\r\n      function getCardColor(value:number, y:number){\r\n        if(value > 0){\r\n          return y_axis_color[y][1];\r\n        }else{\r\n          return colors[0];\r\n        }\r\n      }\r\n      let getHighligh_flag = (d:any)=>{\r\n        let y_value = d.y;\r\n        if(y_value>highlight_flag.length){\r\n          return \"#eee\";\r\n        }else{\r\n          if(highlight_flag[y_value] === true){\r\n            return \"#222\";\r\n\r\n          }else{\r\n            return \"#eee\";\r\n          }\r\n        }\r\n      }\r\n      let getHighligh_opacity = (d:any)=>{\r\n        let y_value = d.y;\r\n        if(y_value>highlight_flag.length){\r\n          return 0;\r\n        }else{\r\n          if(highlight_flag[y_value] === true){\r\n            return 1;\r\n\r\n          }else{\r\n            return 0;\r\n          }\r\n        }\r\n      }\r\n      let cards_rect_enter = cards.enter().append(\"rect\").attr(\"class\", \"hour bordered\");\r\n\r\n          cards_rect_enter.merge(cards)\r\n          .attr(\"x\", (d:any) => (d.x) * gridSize)\r\n          .attr(\"y\", (d:any) => (d.y) * gridSize)\r\n          .attr(\"rx\", 4)\r\n          .attr(\"ry\", 4)\r\n          \r\n          .attr(\"width\", gridSize)\r\n          .attr(\"height\", gridSize)\r\n          .style(\"fill-opacity\", (d:any)=> d.value)\r\n          .style(\"fill\", (d:any) => getCardColor(d.value, d.y))\r\n          .style(\"stroke\", getHighligh_flag)\r\n          .style(\"stroke-width\",\"2\")\r\n          .style(\"stroke-opacity\",getHighligh_opacity)\r\n          .on(\"mouseover\", function(d:any){return tooltip.style(\"visibility\", \"visible\").text(d.value.toFixed(4));})\r\n          .on(\"mousemove\", function(d:any){return tooltip.style(\"top\", (d3.event.pageY-10)+\"px\").style(\"left\",(d3.event.pageX+10)+\"px\");})\r\n          .on(\"mouseout\", function(d:any){return tooltip.style(\"visibility\", \"hidden\");});\r\n      //cards.select(\"title\").text((d:any) => d.value);\r\n\r\n      cards.exit().remove();\r\n      // Define the div for the tooltip\r\n      \r\n      var tooltip = d3.select(\"body\")\r\n                  .select(\"#tooltip_matrix\")\r\n                  .style(\"position\", \"absolute\")\r\n                  .style(\"z-index\", \"10\")\r\n                  .style(\"visibility\", \"hidden\")\r\n                  //.style(\"background\",\"lightsteelblue\"\t)\r\n                  .text(\"a simple tooltip\");\r\n      var tooltip_nodetitle = d3.select(\"body\")\r\n                  .select(\"#tooltip_node_title\")\r\n                  .style(\"position\", \"absolute\")\r\n                  .style(\"z-index\", \"10\")\r\n                  .style(\"visibility\", \"hidden\")\r\n                  //.style(\"background\",\"lightsteelblue\"\t)\r\n                  .text(\"a simple tooltip\");\r\n      /*\r\n      const legend = svg.selectAll(\".legend\")\r\n          .data([0].concat(colorScale.quantiles()), (d:any) => d);\r\n*/\r\n/*\r\n      const legend = svg.selectAll(\".legend\")\r\n      .data(color_domain, (d:any) => d);\r\n      const legend_g = legend.enter().append(\"g\")\r\n          .attr(\"class\", \"legend\");\r\n\r\n      legend_g.append(\"rect\")\r\n        .attr(\"x\", (d:any, i:any) => legendElementWidth * i)\r\n        .attr(\"y\", height)\r\n        .attr(\"width\", legendElementWidth)\r\n        .attr(\"height\", gridSize / 2)\r\n        .style(\"fill\", (d:any, i:any) => colors[i]);\r\n\r\n      legend_g.append(\"text\")\r\n        .attr(\"class\", \"mono\")\r\n        .text((d:any) => d.toFixed(1))\r\n        .attr(\"x\", (d:any, i:any) => legendElementWidth * i)\r\n        .attr(\"y\", height + gridSize*2);\r\n\r\n      legend.exit().remove();\r\n      */\r\n       \r\n\r\n       \r\n    }\r\n    public render() {\r\n        return (\r\n            <g\r\n              id={\"FeatureMatrix_\"+this.props.id}\r\n            >\r\n                <g id=\"Matrix\"></g>\r\n            </g>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import Matrix from '../components/DataRuns/FeatureMatrixView/Matrix';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    MatrixFilters: state.matrixFilters,\r\n    MatrixRowFilters: state.matrixRowFilters\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMatrixFilters: (MatrixFilters:any) => dispatch(changeMatrixFilters(MatrixFilters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);\r\n","\r\nimport './Matrix.css'\r\nimport * as React from \"react\";\r\nimport { timeSaturday } from 'd3';\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  id:number,\r\n  MatrixFilters:any,\r\n  changeMatrixFilters:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class BrushBarChart extends React.Component<IProps, IState>{\r\n    private TAB : string= \"BrushBarChart_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateMatrixFilters = this.updateMatrixFilters.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         //console.log('Component did update!')\r\n         if(prevProps.feature_matrix_json.name !== this.props.feature_matrix_json.name){\r\n          d3.selectAll(\"#\"+this.TAB+this.props.id).remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n   public updateMatrixFilters(filters:any){\r\n     let matrixfilters = Object.assign({}, this.props.MatrixFilters);\r\n     matrixfilters[\"refreshnumber\"] = matrixfilters[\"refreshnumber\"] + 1;\r\n     matrixfilters[\"index\"] = filters[\"index\"];\r\n     this.props.changeMatrixFilters(matrixfilters);\r\n   }\r\n    public renderD3(){\r\n      let fdata:any = this.props.feature_matrix_json.selectedFeatureStatistics;\r\n      let layout_config = this.props.layout_config;\r\n      const svg = d3.select(\"#chart_\"+this.props.id).append(\"g\").attr(\"id\", this.TAB+this.props.id)\r\n        .attr(\"width\",layout_config.width)\r\n        .attr(\"height\",layout_config.height)\r\n        .attr(\"transform\", \"translate(\" + layout_config.x + \",\" + layout_config.y + \")\"),\r\n        margin = { top: 20, right: 30, bottom: 0, left: 0 },\r\n        width = +layout_config.width- margin.left - margin.right,\r\n        height = +layout_config.height - margin.top - margin.bottom;\r\n      let max_row_num_block = this.props.layout_config.max_row_num_block;\r\n      const x = d3.scaleBand().range([0, width]).padding(0.1),\r\n        x2 = d3.scaleBand().range([0, width]).padding(0.1),\r\n        y = d3.scaleLinear().range([height, 0]),\r\n        y2 = d3.scaleLinear().range([height, 0]);\r\n            \r\n      let brush:any, zoom:any, ref_data:any, data:any, nbFt:any, mean_value:any;\r\n      let  context:any;\r\n      let current_range:any;\r\n        ref_data = fdata.map((ft:any,index:any)=>{\r\n          return {\r\n            \"id\": index,\r\n            \"ratio\": ft\r\n          }\r\n        })\r\n      data = [].concat(ref_data);\r\n\r\n      nbFt = data.length;\r\n\r\n      //let updateMatrixFilters = this.updateMatrixFilters;\r\n      var updateMatrixFilters = this.updateMatrixFilters;\r\n      function brushed(this:any){\r\n        if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; // ignore brush-by-zoom\r\n        var s = d3.event.selection || x2.range();\r\n        current_range = [Math.round(s[0] / (width/nbFt)), Math.round(s[1] / (width/nbFt))];\r\n        x.domain(data.slice(current_range[0], current_range[1]).map((ft:any) => ft.id));\r\n        if(current_range[1]-current_range[0]>=max_row_num_block+1){\r\n          current_range[1] = current_range[0] + max_row_num_block;\r\n          d3.select(this).call(brush.move, current_range.map((d:any)=>{\r\n            return d*width/nbFt;\r\n          }))\r\n        }else{\r\n          updateContext(current_range[0], current_range[1]);\r\n        \r\n          updateMatrixFilters({\r\n            \"index\":[current_range[0], current_range[1]]\r\n          })\r\n        }\r\n        \r\n        \r\n        //console.log(\"change range\", current_range[0], current_range[1]);\r\n      }\r\n      brush = d3.brushX()\r\n          .extent([[0, 0], [width, height]])\r\n          .on(\"brush end\", brushed);\r\n    \r\n      \r\n    \r\n      /*svg.append(\"defs\").append(\"clipPath\")\r\n          .attr(\"id\", \"clip\")\r\n          .append(\"rect\")\r\n          .attr(\"width\", width)\r\n          .attr(\"height\", height);*/\r\n      context = svg.append(\"g\")\r\n          .attr(\"class\", \"context\")\r\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n        x.domain(data.map((ft:any) => ft.id));\r\n        y.domain([0, d3.max(data, (d:any) => d.ratio)]);\r\n        x2.domain(x.domain());\r\n        y2.domain(y.domain());\r\n    \r\n      updateMiniBars();\r\n    \r\n      context.append(\"g\")\r\n          .attr(\"class\", \"brush\")\r\n          .call(brush)\r\n          .call(brush.move, x2.range());\r\n      \r\n     \r\n      function updateMiniBars(){\r\n          let mini_bars = context.selectAll(\".bar\")\r\n              .data(data);\r\n        \r\n          mini_bars\r\n              .attr(\"x\", (d:any) => x2(d.id))\r\n              .attr(\"width\", x2.bandwidth())\r\n              .attr(\"y\", (d:any) => y2(d.ratio))\r\n              .attr(\"height\", (d:any) => height - y2(d.ratio))\r\n              .style('fill', (d:any) =>  'steelblue');\r\n        \r\n          mini_bars\r\n              .enter()\r\n              .insert(\"rect\")\r\n              .attr(\"class\", \"bar\")\r\n              .attr(\"x\", (d:any) => x2(d.id))\r\n              .attr(\"width\", x2.bandwidth())\r\n              .attr(\"y\", (d:any) => y2(d.ratio))\r\n              .attr(\"height\", (d:any) => height - y2(d.ratio))\r\n              .style('fill', (d:any) =>  'steelblue' );\r\n          mini_bars.exit().remove();\r\n        \r\n      }\r\n      \r\n      \r\n      \r\n      function updateContext(min:any, max:any) {\r\n        context.selectAll(\".bar\")\r\n            .style('fill-opacity', (_:any, i:any) => i >= min && i < max ? '1' : '0.3');\r\n      }\r\n      \r\n      \r\n       \r\n    }\r\n    public render() {\r\n        return (\r\n            <g id={\"chart_\"+this.props.id} />\r\n            \r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import BrushBarChart from '../components/DataRuns/FeatureMatrixView/BrushBarChart';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    MatrixFilters: state.matrixFilters\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMatrixFilters: (MatrixFilters:any) => dispatch(changeMatrixFilters(MatrixFilters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BrushBarChart);\r\n","\r\nimport './IndentedList.css'\r\nimport * as React from \"react\";\r\nimport { timeSaturday } from 'd3';\r\nconst d3 = require(\"d3\");\r\nconst tree = d3.tree;\r\nconst hierarchy = d3.hierarchy;\r\nconst select = d3.select;\r\n\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  MatrixRowFilters:any,\r\n  changeMatrixRowFilters:any,\r\n  id:number\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class IndentedTree extends React.Component<IProps, IState>{\r\n    private TAB : string= \"IndentedTree_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateMatrixFilters = this.updateMatrixFilters.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         if(prevProps.feature_matrix_json.name !== this.props.feature_matrix_json.name ){\r\n          d3.selectAll(\"#IndentedTree\").remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n     public updateMatrixFilters(filters:any){\r\n      let matrixfilters = Object.assign({}, this.props.MatrixRowFilters);\r\n      matrixfilters[\"refreshnumber\"] = matrixfilters[\"refreshnumber\"] + 1;\r\n      matrixfilters[\"row_index\"] = filters;\r\n      this.props.changeMatrixRowFilters(matrixfilters);\r\n    }\r\n    public renderD3(){\r\n      let fdata:any = this.props.feature_matrix_json.indentedList;\r\n      let pieName:any = this.props.feature_matrix_json.pieName;\r\n      let models_length = pieName.length;\r\n      let layout_config = this.props.layout_config;\r\n\r\n      //console.log(\"fdata\",fdata);          \r\n      //let myTree = new MyTree(fdata,this.props.layout_config,this.updateMatrixFilters);\r\n      let margin = {top: 10, right: 10, bottom: 20, left: 10};\r\n      let width = layout_config.width - margin.right - margin.left;\r\n      let height = layout_config.width - margin.top - margin.bottom;\r\n      let barHeight = layout_config.barHeight;\r\n      //let barWidth = width *.8;\r\n      //let i = 0;\r\n      //let duration = 0;\r\n      //let updateMatrixFilters = this.updateMatrixFilters;\r\n\r\n      let svg = select('#hierarchy-container')\r\n        .attr('width', width + margin.right + margin.left)\r\n        .attr('height', height + margin.top + margin.bottom)\r\n        .attr('transform', 'translate(' + layout_config.x + ',' + layout_config.y + ')')\r\n        .append('g')\r\n        .attr(\"id\",\"IndentedTree\")\r\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n      // 1. Compute the coordinates for each node.\r\n      //let gridSize = Math.floor(width / (max_row_num_block));\r\n      //let height = gridSize * y_axis.length + 20;\r\n\r\n      // 2. Render the indentedList.\r\n      const y_axis_labels = svg.selectAll(\".y_axisLabel\")\r\n                            .data(fdata,function(d:any){\r\n                              return d.id;\r\n                            })\r\n            ;\r\n      let gridSize=barHeight;\r\n      let radius = Math.min(5,gridSize/4);\r\n      let radius_gap = 0.3;\r\n      let transform_x = radius*2 + radius_gap;\r\n      let transform_y = 0;//radius*2;\r\n      let deviation_x = 30;\r\n      let y_axis_label_enter = y_axis_labels.enter().append(\"g\").attr(\"class\", \"y_axisLabel\");\r\n\r\n      y_axis_label_enter.merge(y_axis_labels).attr(\"transform\",(d:any, i:any) => {\r\n        let new_x = transform_x + d.level*deviation_x;\r\n        return \"translate(\"+new_x+\",\" + (i * gridSize + transform_y) + \")\"\r\n      })\r\n      .on(\"mouseover\", function(d:any,i:any){return tooltip_nodetitle.style(\"visibility\", \"visible\").text(d.node_title);})\r\n            .on(\"mousemove\", function(d:any,i:any){return tooltip_nodetitle.style(\"top\", (d3.event.pageY-10)+\"px\").style(\"left\",(d3.event.pageX+10)+\"px\");})\r\n            .on(\"mouseout\", function(d:any,i:any){return tooltip_nodetitle.style(\"visibility\", \"hidden\");});;\r\n            ;\r\n      y_axis_labels.exit().remove();\r\n      let y_axis_label_color = \"#000\";\r\n      function getArc(radius:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(radius*2);\r\n      }\r\n\r\n        //let y_axis_color = color_info[\"y_axis_color\"];\r\n        var arc_data:any = [];\r\n        //console.log(\"Feature Matrix\", models_length);\r\n        for(let i = 0; i<models_length; i++){\r\n            arc_data.push({\r\n                \"index\":i,\r\n                \"value\":1/models_length\r\n            })\r\n        }\r\n        let startAngle = -180 / models_length;\r\n        var ori_arcs = d3.pie()\r\n        .startAngle((startAngle/180) * Math.PI)\r\n        .endAngle((2+startAngle/180) * Math.PI)\r\n        .value(function(a:any){\r\n            return a.value;\r\n        })\r\n        .sort(function(a:any, b:any) {\r\n            return a.index<b.index;\r\n        });\r\n\r\n        var arcs = ori_arcs(arc_data);\r\n\r\n\r\n        var outer_circles_enter = y_axis_label_enter.append(\"circle\").attr(\"class\",\"outer_circle\");\r\n        var outer_circles = y_axis_labels.select(\"circle.outer_circle\");\r\n        var outer_circles_enter_update = outer_circles_enter.merge(outer_circles);\r\n\r\n        outer_circles_enter_update//.transition(trans)\r\n        .attr(\"r\", function(d:any){\r\n              return radius*2\r\n        })\r\n        .attr(\"fill\", function(d:any,i:any) { return d.color[d.color.length-1]; });\r\n\r\n\r\n        let overall_background = [];\r\n        for (let i = 0; i < models_length; i++){\r\n          let background_enter = y_axis_label_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n          let background = y_axis_labels.select(\"path.arc_\"+i);\r\n          let background_enter_update  = background_enter.merge(background);\r\n          background_enter_update\r\n          .style(\"fill\", function(d:any,j:any){\r\n              return d.color[i+1]\r\n          })\r\n          .attr(\"d\", function(d:any){\r\n              return getArc(radius)(arcs[i])\r\n          });\r\n          overall_background.push(background_enter_update);\r\n\r\n        }\r\n\r\n\r\n        var inner_circles_enter = y_axis_label_enter.append(\"circle\").attr(\"class\",\"inner_circle\");\r\n        var inner_circles = y_axis_labels.select(\"circle.inner_circle\");\r\n        var inner_circles_enter_update = inner_circles_enter.merge(inner_circles);\r\n        //console.log(\"circles enter update\", circles_enter.size(), inner_circles, circles.size(), circles);\r\n        //console.log(\"merge\", circles_enter.merge(circles));\r\n\r\n        inner_circles_enter_update//.transition(trans)\r\n        .attr(\"r\", function(d:any){\r\n            return radius - radius_gap;\r\n        })\r\n        .attr(\"fill\", function(d:any,i:any) { return d.color[0]; });\r\n        let y_axis_label_text_enter = y_axis_label_enter.append(\"text\");\r\n\r\n     y_axis_label_text_enter.merge(y_axis_labels.select(\"text\"))\r\n            .text(function (d:any) { return d.id; })\r\n            .style(\"text-anchor\", \"start\")\r\n            .style(\"font-size\", \"9pt\")\r\n            .style(\"font-family\", \"Consolas, courier\")\r\n            .style(\"fill\", y_axis_label_color)\r\n            .style(\"dominant-baseline\",\"central\")\r\n            .attr(\"transform\", \"translate(\"+transform_x+\",\" + 0 + \")\")\r\n            .attr(\"class\", \"y-axis\");\r\n            var tooltip_nodetitle = d3.select(\"body\")\r\n            .select(\"#tooltip_node_title\")\r\n            .style(\"position\", \"absolute\")\r\n            .style(\"z-index\", \"10\")\r\n            .style(\"visibility\", \"hidden\")\r\n            //.style(\"background\",\"lightsteelblue\"\t)\r\n            .text(\"a simple tooltip\");\r\n    }\r\n    public render() {\r\n        return (\r\n                <g id=\"hierarchy-container\"> \r\n                </g>\r\n        )\r\n\r\n    }\r\n}\r\n","import IndentedList from '../components/DataRuns/FeatureMatrixView/IndentedList';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixRowFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    MatrixRowFilters: state.matrixRowFilters\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMatrixRowFilters: (MatrixRowFilters:any) => dispatch(changeMatrixRowFilters(MatrixRowFilters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndentedList);\r\n","\r\nimport './VerticalSlider.css'\r\nimport * as React from \"react\";\r\nconst d3 = require(\"d3\");\r\nconst d3_slider = require(\"d3-simple-slider\");\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  id:number,\r\n  changeNodeStartIndex:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class VerticalSlider extends React.Component<IProps, IState>{\r\n    private TAB : string= \"VerticalSlider_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         //console.log('Component did update!')\r\n         if(prevProps.layout_config.name !== this.props.layout_config.name){\r\n          d3.selectAll(\"#\"+this.TAB+this.props.id).remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n   \r\n   public renderD3(){\r\n      //let fdata:any = this.props.feature_matrix_json.selectedFeatureStatistics;\r\n      let layout_config = this.props.layout_config;\r\n      let node_start_index = layout_config[\"node_start_index\"];\r\n      let node_max_index = layout_config[\"node_max_index\"];\r\n      //var data = [0, node_max_index];\r\n      console.log(\"rerender d3\", node_start_index, node_max_index);\r\n      const svg = d3.select(\"#chart_\"+this.props.id).append(\"g\").attr(\"id\", this.TAB+this.props.id)\r\n          .attr(\"width\",layout_config.width)\r\n          .attr(\"height\",layout_config.height)\r\n          .attr(\"transform\", \"translate(\" + layout_config.x + \",\" + layout_config.y + \")\"),\r\n          margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n          width = +layout_config.width- margin.left - margin.right,\r\n          height = +layout_config.height - margin.top - margin.bottom;\r\n      //let max_row_num_block = this.props.layout_config.max_row_num_block;\r\n\r\n      //console.log(\"sliderleft\", d3_slider.sliderLeft);\r\n        // Vertical\r\n      let changeNodeStartIndex = this.props.changeNodeStartIndex;\r\n      var sliderVertical = d3_slider\r\n        .sliderLeft()\r\n        .min(0)\r\n        .max(node_max_index)\r\n        .height(height)\r\n        .displayValue(false)\r\n        .default(node_max_index - node_start_index)\r\n        .step(1)\r\n        .handle(\r\n          d3\r\n            .symbol()\r\n            .type(d3.symbolCircle)\r\n            .size(200)()\r\n        )\r\n        .on('onchange', (val:any) => {\r\n          console.log(\"onchange, choose value\",val, node_max_index - val);\r\n          changeNodeStartIndex(node_max_index - val);\r\n        });\r\n\r\n      var gVertical = svg.append('g')\r\n        .attr('transform', 'translate(30,0)');\r\n\r\n      gVertical.call(sliderVertical);\r\n      gVertical.select(\"g.axis\").remove();\r\n   }\r\n    public render() {\r\n        return (\r\n            <g id={\"chart_\"+this.props.id} />\r\n            \r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import VerticalSlider from '../components/DataRuns/FeatureMatrixView/VerticalSlider';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VerticalSlider);\r\n","\r\nimport * as React from \"react\";\r\nimport MatrixContainer from '../../../container/MatrixContainer';\r\nimport BrushBarChartContainer from '../../../container/BrushBarChartContainer';\r\nimport IndentedListContainer from '../../../container/IndentedListContainer';\r\nimport { Select, } from 'antd';\r\nimport {getCoraNodeColor, getLayoutMode, getTrainColor,cropAnchorsList} from '../../../helper';\r\nimport VerticalSliderContainer from \"../../../container/VerticalSliderContainer\";\r\nconst reorder_module = require(\"./reorder.v1.js\");\r\nconst reorder = reorder_module.default;\r\n\r\nconst Option = Select.Option;\r\n\r\n\r\n//console.log(\"reorder\", reorder);\r\n//console.log(\"tiny_queue, sciencce, reorder\", tiny_queue, science, reorder.stablepermute);\r\n/*var mat = [\r\n    [1, 0, 1, 1, 0],\r\n    [0, 1, 0, 0, 1],\r\n    [1, 0, 1, 1, 0],\r\n    [0, 1, 0, 0, 1],\r\n    ];\r\nvar leafOrder = reorder.optimal_leaf_order()\r\n    .distance(science.stats.distance.manhattan);\r\nvar perm = leafOrder(mat);\r\nvar permuted_mat = reorder.stablepermute(mat, perm);\r\nconsole.log(\"reorder, mat, perm, permuted_mat\", reorder, mat, perm, permuted_mat);*/\r\n//const d3 = require(\"d3\");\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    width:number,\r\n    height:number,\r\n    specificNodeIdList: any[],\r\n    select_inspect_node:number,\r\n    showSource : boolean,\r\n    extendedMode: any,\r\n    K_value:any,\r\n    selected_models_list:any\r\n\r\n}\r\nexport interface IState {\r\n    axis_select : number,\r\n    distance_select : number,\r\n    dataSource_select: number,\r\n    color_encode: number,\r\n    enableSorting: number,\r\n    node_start_index: number\r\n}\r\n\r\nexport default class FeatureMatrixView extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onAxisChange = this.onAxisChange.bind(this);\r\n        this.onDistanceChange = this.onDistanceChange.bind(this);\r\n        this.onDataSourceChange = this.onDataSourceChange.bind(this);\r\n        this.onColorEncodeChange = this.onColorEncodeChange.bind(this);\r\n        this.onEnableSort = this.onEnableSort.bind(this);\r\n        this.changeNodeStartIndex = this.changeNodeStartIndex.bind(this);\r\n        this.state = {\r\n            axis_select : 2,\r\n            distance_select: 1,\r\n            dataSource_select : 1,\r\n            color_encode: 2,\r\n            enableSorting: 1,\r\n            node_start_index: 0\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     public calculateFeatureCosDistance(feature1:any, feature1_value:any, feature2:any, feature2_value:any){\r\n        let len1 = feature1.length;\r\n        let len2 = feature2.length;\r\n        let dot = 0;\r\n        for(let k = 0; k<len1; k++){\r\n            let index2 = feature2.indexOf(feature1[k]);\r\n            if(index2>=0){\r\n                dot = dot + feature1_value[k]*feature2_value[index2];\r\n            }\r\n        }\r\n        let norm1 = 0;\r\n        let norm2 = 0;\r\n        for(let k = 0; k<len1; k++){\r\n            norm1 = norm1 + feature1_value[k]*feature1_value[k];\r\n        }\r\n        for(let k=0; k<len2; k++){\r\n            norm2 = norm2 + feature2_value[k]*feature2_value[k];\r\n        }\r\n        norm1 = Math.sqrt(norm1);\r\n        norm2 = Math.sqrt(norm2);\r\n        let cos_distance = dot / (norm1 * norm2 + 1e-8);\r\n        return cos_distance;\r\n    }\r\n    public calculateFeatureDistance(feature1:any, feature2:any){\r\n        let len1 = feature1.length;\r\n        let len2 = feature2.length;\r\n        let common = 0;\r\n        for(let k = 0; k<len1; k++){\r\n            if(feature2.indexOf(feature1[k])>=0){\r\n                common = common + 1;\r\n            }\r\n        }\r\n        return len1 + len2 - 2* common;\r\n    }\r\n    public calculateEuclideanDistance(feature1:any, feature2:any){\r\n        let len1 = feature1.length;\r\n        //let len2 = feature2.length;\r\n        let dis = 0;\r\n        for(let i = 0; i < len1; i++)\r\n        {\r\n            dis = dis + (feature1[i] - feature2[i]) * (feature1[i] - feature2[i]);\r\n        }\r\n        dis = Math.sqrt(dis);\r\n        return dis;\r\n    }\r\n    public constructIndentedList(PathDict:any, select_node:number, level:number, max_level:number, additional_params:any){\r\n        let getNodeColorInfo = additional_params[\"getNodeColorInfo\"];\r\n        let features = additional_params[\"features\"];\r\n        let features_value = additional_params[\"features_value\"];\r\n        let queue:any [] = [];\r\n        let alreadyVisitedNodesId:any[] = [];\r\n        let alreadyVisitedNodesInfo:any[] = [];\r\n        queue.push({\r\n            \"id\":select_node,\r\n            \"color\":getNodeColorInfo(select_node),\r\n            \"level\":level,\r\n            \"dist\":2\r\n        });\r\n        let feature1 = features[select_node];\r\n        let feature1_value = features_value[select_node];\r\n        while(queue.length>0){\r\n            let current_node:any = queue[0];\r\n            let current_node_id:number = current_node.id;\r\n            let current_node_level:number = current_node.level;\r\n            queue.shift();\r\n            if(alreadyVisitedNodesId.indexOf(current_node_id)>=0){\r\n                continue;\r\n            }\r\n            if(current_node_level>max_level){\r\n                continue;\r\n            }\r\n\r\n            alreadyVisitedNodesInfo.push(current_node);\r\n            alreadyVisitedNodesId.push(current_node_id);\r\n            let succnodes = Object.keys(PathDict[current_node_id]);\r\n            if(current_node_level+1<=max_level){\r\n                let succ_level = current_node_level + 1;\r\n                for(let i = 0; i<succnodes.length; i++){\r\n                    let succ_id = parseInt(succnodes[i]);\r\n                    if(alreadyVisitedNodesId.indexOf(succ_id)>=0){\r\n                        continue;\r\n                    }\r\n                    let feature2 = features[succ_id];\r\n                    let feature2_value = features_value[succ_id];\r\n                    let cos_distance = this.calculateFeatureCosDistance(feature1, feature1_value, feature2, feature2_value);\r\n                    queue.push({\r\n                        \"id\":succ_id,\r\n                        \"color\":getNodeColorInfo(succ_id),\r\n                        \"level\":succ_level,\r\n                        \"dist\": cos_distance\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        \r\n        alreadyVisitedNodesInfo.sort((a:any,b:any)=>{\r\n            return a.dist>b.dist?-1:1;\r\n        })\r\n        return alreadyVisitedNodesInfo;\r\n    }\r\n    public constructIndentedListFromKFS(select_node:number, KFS:any, additional_params:any){\r\n        let getNodeColorInfo = additional_params[\"getNodeColorInfo\"];\r\n        let alreadyVisitedNodesInfo:any[] = [];\r\n        alreadyVisitedNodesInfo.push({\r\n            \"id\":select_node,\r\n            \"color\":getNodeColorInfo(select_node),\r\n            \"level\":0,\r\n            \"dist\":2\r\n        });\r\n        let cropAnchors = cropAnchorsList(KFS[select_node][\"details\"], this.props.K_value);\r\n        let feature_sim_set = cropAnchors.forEach((d:any)=>{\r\n            let anchor_id = d.anchor_id;\r\n            alreadyVisitedNodesInfo.push({\r\n                \"id\":anchor_id,\r\n                \"color\":getNodeColorInfo(anchor_id),\r\n                \"level\":1,\r\n                \"dist\":d.anchor_similarity\r\n            });\r\n        });\r\n        //console.log(\"feature_sim_set\",feature_sim_set);\r\n        alreadyVisitedNodesInfo.sort((a:any,b:any)=>{\r\n            return a.dist>b.dist?-1:1;\r\n        })\r\n        return alreadyVisitedNodesInfo;\r\n    }\r\n    public constructIndentedTree(PathDict:any, select_node:number, level:number, \r\n        max_level:number, row_id:number, root:number, additional_params:any, edge_weight:number=0){\r\n        let getNodeColorInfo = additional_params[\"getNodeColorInfo\"];\r\n        let features = additional_params[\"features\"];\r\n        let features_value = additional_params[\"features_value\"];\r\n        if(level >= max_level){\r\n            return {\r\n                \"name\":\"\"+select_node,\r\n                \"children\":[],\r\n                \"row_id\":row_id,\r\n                \"next_row_id\":row_id+1,\r\n                \"edge_weight\":edge_weight,\r\n                \"color\":getNodeColorInfo(select_node)\r\n            }\r\n        }else{\r\n            let succnodes = Object.keys(PathDict[select_node]);\r\n            let children:any = [];\r\n            let curr_row_id = row_id;\r\n            let next_row_id:number = row_id+1;\r\n            let succnode_id_list:any = [];\r\n            let feature1 = features[root];\r\n            let feature1_value = features_value[root];\r\n            for(let k = 0; k< succnodes.length; k++ ){\r\n                let succnode = parseInt(succnodes[k]);\r\n                if(succnode === select_node || succnode === root){\r\n                    continue;\r\n                }\r\n                let feature2 = features[succnode];\r\n                let feature2_value = features_value[succnode];\r\n                let cos_distance = this.calculateFeatureCosDistance(feature1, feature1_value, feature2, feature2_value);\r\n                succnode_id_list.push(\r\n                    {\r\n                        \"id\":succnode,\r\n                        \"dist\":cos_distance\r\n                    }\r\n                );\r\n            }\r\n            succnode_id_list.sort((a:any,b:any)=>{\r\n                return a.dist>b.dist?-1:1;\r\n            })\r\n            for(let k = 0; k<succnode_id_list.length; k++){\r\n                let succnode = succnode_id_list[k].id;\r\n                let local_edge_weight = PathDict[select_node][succnode];\r\n                let children_package:any = this.constructIndentedTree(PathDict, succnode, level+1, max_level, next_row_id, root, additional_params, local_edge_weight);\r\n                next_row_id = children_package.next_row_id;\r\n                children.push(children_package);\r\n            }\r\n            return {\r\n                \"name\":\"\"+select_node,\r\n                \"children\":children,\r\n                \"row_id\":curr_row_id,\r\n                \"next_row_id\":next_row_id,\r\n                \"edge_weight\":edge_weight,\r\n                \"color\":getNodeColorInfo(select_node)\r\n            }\r\n        }\r\n    }\r\n    public sequentialIndentedTree(indentedTreeNode:any){\r\n        let selectedIndetendedTreeId:any[] = [];\r\n        selectedIndetendedTreeId.push(parseInt(indentedTreeNode[\"name\"]));\r\n        for(let i = 0; i<indentedTreeNode.children.length; i++){\r\n            selectedIndetendedTreeId = selectedIndetendedTreeId.concat(this.sequentialIndentedTree(indentedTreeNode.children[i]));\r\n        }\r\n        return selectedIndetendedTreeId;\r\n    }\r\n    public sequentialIndentedTreeToList(indentedTreeNode:any, depth:number=0){\r\n        let selectedIndetendedTreeId:any[] = [];\r\n        let data_package = {\r\n            \"id\": parseInt(indentedTreeNode[\"name\"]),\r\n            \"name\" : indentedTreeNode[\"name\"],\r\n            \"color\": indentedTreeNode[\"color\"],\r\n            \"depth\": depth\r\n        }\r\n        selectedIndetendedTreeId.push(data_package);\r\n        for(let i = 0; i<indentedTreeNode.children.length; i++){\r\n            selectedIndetendedTreeId = selectedIndetendedTreeId.concat(this.sequentialIndentedTreeToList(indentedTreeNode.children[i], depth + 1));\r\n        }\r\n        return selectedIndetendedTreeId;\r\n    }\r\n    public getNodeColorInfoFull(index:number, graph_target:any, individual:any, train_mask_set:any, selected_models_list:any){\r\n        let ground_truth_label = graph_target.node_features[index];\r\n        let color:any = [getCoraNodeColor(ground_truth_label, 2)];\r\n        for(let i = 0; i<selected_models_list.length; i++){\r\n            color.push(getCoraNodeColor(individual[selected_models_list[i]].graph_out.node_features[index]));\r\n        }\r\n        color.push(getTrainColor(index, train_mask_set));\r\n        return color;\r\n    }\r\n    public hclusterSortingSelectedNode(params:any){\r\n        let num_nodes = params[\"num_nodes\"];\r\n        let selectedNodeIdList = params[\"selectedNodeIdList\"];\r\n        let features = params[\"features\"];\r\n        let features_value = params[\"features_value\"];\r\n\r\n        let distanceMatrix:any = [];\r\n        let mat:any = [];\r\n        let highlight_flag:any = [];\r\n\r\n        // Step 1: Initialize variables\r\n\r\n        for(let i = 0; i <num_nodes ; i++){\r\n            let row_dist = [];\r\n            for(let j = 0 ;j<num_nodes; j++){\r\n                row_dist.push(0);\r\n            }  \r\n            distanceMatrix.push(row_dist);\r\n            mat.push([selectedNodeIdList[i],0]);\r\n            highlight_flag.push(false);\r\n        }\r\n\r\n        // Step 2: construct distance matrix\r\n\r\n        for(let i = 0; i<num_nodes; i++){\r\n            let node1 = selectedNodeIdList[i];\r\n            let feature1 = features[node1];\r\n            let feature1_value = features_value[node1];\r\n            for(let j = 0; j<i; j++){\r\n                let node2 = selectedNodeIdList[j];\r\n                let feature2 = features[node2];\r\n                let feature2_value = features_value[node2];\r\n                let cos_distance = this.calculateFeatureCosDistance(feature1, feature1_value, feature2, feature2_value);\r\n                let distance = 1 - cos_distance;\r\n                distanceMatrix[i][j] = distance;\r\n                distanceMatrix[j][i] = distance;\r\n            }\r\n        }\r\n\r\n        // Step 3: Reordering\r\n\r\n        var leafOrder = reorder.optimal_leaf_order()\r\n            .distance_matrix(distanceMatrix);\r\n        var perm = leafOrder(mat);\r\n        var permuted_mat = reorder.stablepermute(mat, perm);\r\n        var new_selectedNodeIdList = [];\r\n        for(let i = 0; i<num_nodes;i++){\r\n            new_selectedNodeIdList.push(permuted_mat[i][0]);\r\n        }\r\n        selectedNodeIdList = new_selectedNodeIdList.slice();\r\n        \r\n        // Step 4: Highlight similar distance nodes.\r\n\r\n        let distance_list:any = [];\r\n        for(let i = 1; i<num_nodes; i++){\r\n            let node1 = selectedNodeIdList[i];\r\n            let feature1 = features[node1];\r\n            let feature1_value = features_value[node1];\r\n            let j = i-1;\r\n            \r\n            let node2 = selectedNodeIdList[j];\r\n            let feature2 = features[node2];\r\n            let feature2_value = features_value[node2];\r\n            let cos_distance = this.calculateFeatureCosDistance(feature1, feature1_value, feature2, feature2_value);\r\n            let distance = 1 - cos_distance;\r\n            distance_list.push(distance);\r\n            if(distance<0.2){\r\n                highlight_flag[i] = true;\r\n                highlight_flag[j] = true;\r\n            }\r\n            \r\n        }\r\n        return {\r\n            \"selectedNodeIdList\":selectedNodeIdList,\r\n            \"highlight_flag\":highlight_flag\r\n        }\r\n    }\r\n    public hclusterSortingSelectedFeatures(params:any){\r\n        let pre_selected_feature_stats_index:any = params[\"pre_selected_feature_stats_index\"];\r\n        let pre_selected_feature: any = params[\"pre_selected_feature\"];\r\n        let featureDistanceMatrix = [];\r\n        let num_features = pre_selected_feature_stats_index.length;\r\n        let feature_mat = [];\r\n        for(let i = 0; i <num_features ; i++){\r\n            let row_dist = [];\r\n            for(let j = 0 ;j<num_features; j++){\r\n                row_dist.push(0);\r\n            }  \r\n            featureDistanceMatrix.push(row_dist);\r\n            feature_mat.push([pre_selected_feature[i],0]);\r\n        }\r\n        for(let i = 0; i<num_features; i++){\r\n            //let node1 = pre_selected_feature[i];\r\n            let feature1 = pre_selected_feature_stats_index[i];\r\n            for(let j = 0; j<i; j++){\r\n                //let node2 = pre_selected_feature[j];\r\n                let feature2 = pre_selected_feature_stats_index[j];\r\n                //let cos_distance = calculateFeatureCosDistance(feature1, feature1_value, feature2, feature2_value);\r\n                //let distance = 1 - cos_distance;\r\n                //let distance = calculateEuclideanDistance(feature1, feature2);\r\n                let distance = this.calculateFeatureDistance(feature1, feature2);\r\n                featureDistanceMatrix[i][j] = distance;\r\n                featureDistanceMatrix[j][i] = distance;\r\n            }\r\n        }\r\n        var leafOrder = reorder.optimal_leaf_order()\r\n            .distance_matrix(featureDistanceMatrix);\r\n        var perm = leafOrder(feature_mat);\r\n        \r\n        //var permuted_mat = reorder.stablepermute(feature_mat, perm);\r\n        //console.log(\"perm, mat, permuted_mat\", perm, mat, permuted_mat);\r\n        \r\n        return {\r\n            \"perm\":perm,\r\n\r\n        }\r\n    }\r\n     public constructFeatureMatrixJson(graph_object:any, selectedNodeIdList:any[], axis_select:number, \r\n        distance_select:number, dataSource_select:number, color_encode:number, select_inspect_node:number, \r\n        showSource:boolean, enableSorting:number, width:number, height:number, extendedMode:any, additional_params:any, selected_models_list:any){\r\n        let max_col_num_block = additional_params[\"max_col_num_block\"];\r\n        let node_start_index = additional_params[\"node_start_index\"];\r\n        let selectedStr = selectedNodeIdList.join(\"_\");\r\n        let selectedModelStr = selected_models_list.join(\"_\");\r\n        let common = graph_object.common;\r\n        let individual = graph_object.individual;\r\n        let graph_name = common.name+\"_\"+common.dataset_id+\"_\"+common.data_type_id+\"_SELECTED_\"+selectedStr+\"_SELECTED_END_\"\r\n        +axis_select+\"_\"+distance_select+\"_\"+dataSource_select+\"_\"+color_encode+\"_\"+select_inspect_node+\"_\"+enableSorting+\"_\"+width+\"_\"+height+\"_\"+this.props.K_value\r\n        +\"_SELECTEDMODEL_\"+selectedModelStr + \"_SELECTEDMODELEND_\";\r\n        if(showSource){\r\n            graph_name = graph_name+\"_\"+extendedMode;\r\n        }else{\r\n            graph_name = graph_name+\"_\"+node_start_index+\"_\"+max_col_num_block;\r\n        }\r\n        let subgraph_mode = false;\r\n        let feature_ranking_list = graph_object.feature_ranking_list;\r\n        let feature_ranking = graph_object.feature_ranking;\r\n        if(enableSorting >= 2 && feature_ranking_list.length>=enableSorting-1){\r\n\r\n            let fr_name = feature_ranking_list[enableSorting-2];\r\n\r\n            if(Object.keys(feature_ranking[fr_name][\"feature_rank_values\"]).indexOf(\"\"+select_inspect_node)>=0){\r\n                let fr_list = feature_ranking[fr_name][\"feature_rank_values\"][select_inspect_node];\r\n                if(fr_list.length > 0){\r\n                    subgraph_mode = true;\r\n                }\r\n            }\r\n        }else{\r\n            subgraph_mode = false;\r\n        }\r\n\r\n        let graph_in = common.graph_in;\r\n        let graph_target = common.graph_target;\r\n        let key_model_name = selected_models_list[0];\r\n\r\n        let graph_explaination = common.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        if(selectedNodeIdList.length === 0){\r\n            return {\"success\":false};\r\n\r\n        }\r\n\r\n        let train_mask_set = new Set(common.mask.train);\r\n        let features : any;\r\n        let features_value:any = [];\r\n        if(dataSource_select === 1){\r\n            features = graph_in.feature;\r\n            features_value = graph_in.feature_value;\r\n        }\r\n        let getNodeColorInfoFull = this.getNodeColorInfoFull;\r\n        function getNodeColorInfo(index:number){\r\n            return getNodeColorInfoFull(index, graph_target,individual, train_mask_set, selected_models_list);\r\n        }\r\n        \r\n        // Construct Indented Tree.\r\n        let indentedList:any = [];\r\n        let selectedIndetendedListId:any = [];\r\n        \r\n        if(showSource){\r\n            let additional_params = {\r\n                \"getNodeColorInfo\":getNodeColorInfo,\r\n                \"features\":features,\r\n                \"features_value\": features_value\r\n            }\r\n            indentedList = this.constructIndentedListFromKFS(select_inspect_node, common.graph_additional_info.KFS, additional_params);\r\n            selectedIndetendedListId = indentedList.map((d:any)=>{\r\n                return d.id;\r\n            })\r\n            selectedNodeIdList = selectedIndetendedListId;\r\n            console.log(\"Feature Matrix Common\", common.graph_additional_info.KFS, indentedList);\r\n        }\r\n\r\n        let matrix:any[] = [];\r\n        let selectedFeature:any[] = [];\r\n        let selectedFeatureStatistics:any[] = [];\r\n        let selectedFeatureAddInfo:any[] = [];\r\n        let upper_bound_nodes = 300;\r\n        let highlight_flag:any = [];\r\n        let node_max_index = 0;\r\n        function getArray(num:number){\r\n            let arr : any[] = [];\r\n            for(let i = 0; i<num; i++){\r\n                arr.push(0);\r\n            }\r\n            return arr;\r\n        }\r\n        let num_classes = common.graph_additional_info.num_class;\r\n        if(selectedNodeIdList.length > 0 && selectedNodeIdList.length <= upper_bound_nodes){\r\n            if(dataSource_select === 1){\r\n                // Input Layer Embedding\r\n\r\n                // Step 1: Node reordering.\r\n                let num_nodes = selectedNodeIdList.length;\r\n                let total_nodes = selectedNodeIdList.length;\r\n                node_max_index = total_nodes - max_col_num_block;\r\n                if(node_max_index<0){\r\n                    node_max_index = 0;\r\n                }\r\n                if(num_nodes>=2 && !showSource){\r\n                    let params = {\r\n                        \"num_nodes\":num_nodes,\r\n                        \"selectedNodeIdList\":selectedNodeIdList,\r\n                        \"features\":features,\r\n                        \"features_value\":features_value\r\n                    }\r\n                    // Distance = 1 - cos(<f1, f2>);\r\n                    let result_package = this.hclusterSortingSelectedNode(params);\r\n                    highlight_flag = result_package[\"highlight_flag\"];\r\n                    selectedNodeIdList = result_package[\"selectedNodeIdList\"];\r\n                    let node_end_index = 0;\r\n                    num_nodes = selectedNodeIdList.length;\r\n                    if(node_start_index>=num_nodes){\r\n                        console.log(\"node_start_index, num_nodes\", node_start_index, num_nodes);\r\n                        node_start_index = 0;\r\n                        if(num_nodes >= max_col_num_block){\r\n                            node_end_index = max_col_num_block;\r\n                        }else{\r\n                            node_end_index = num_nodes;\r\n                        }\r\n                    }else if(node_start_index<num_nodes){\r\n                        if(num_nodes >= node_start_index+max_col_num_block){\r\n                            node_end_index = node_start_index+max_col_num_block;\r\n                        }else{\r\n                            node_end_index = num_nodes;\r\n                        }\r\n                    }\r\n                    selectedNodeIdList = selectedNodeIdList.slice(node_start_index, node_end_index);\r\n                    highlight_flag = highlight_flag.slice(node_start_index, node_end_index);\r\n                    num_nodes = selectedNodeIdList.length;\r\n                    \r\n                }\r\n                \r\n                // Step 2: Pre select feature dimensions.\r\n\r\n                let pre_selected_feature:any[] = [];\r\n                let pre_selected_feature_stats:any[] = [];\r\n                let pre_selected_feature_order:any[] = [];\r\n                let pre_selected_feature_order_list:any[] = [];\r\n                let pre_selected_feature_stats_index:any[] = [];\r\n                let pre_selected_feature_prediction_label_distribution:any[] = [];\r\n                for(let i = 0; i <selectedNodeIdList.length ; i++){\r\n                    let currentSelect:any = selectedNodeIdList[i];\r\n                    let GCN_prediction_label = individual[key_model_name].graph_out.node_features[currentSelect]; \r\n\r\n                    //y_axis.push(currentSelect);\r\n                    // Feature is sparse representation of current features > 0.\r\n                    for(let j = 0;j <features[currentSelect].length;j ++){\r\n                        let dimension = features[currentSelect][j];\r\n                        if(pre_selected_feature.indexOf(dimension) >= 0){\r\n    \r\n                        }else{\r\n                            pre_selected_feature.push(dimension);\r\n                            pre_selected_feature_stats.push(0);\r\n                            pre_selected_feature_order.push(i);\r\n                            pre_selected_feature_stats_index.push([]);\r\n                            pre_selected_feature_order_list.push([]);\r\n                            pre_selected_feature_prediction_label_distribution.push({\r\n                                \"distribution\":getArray(num_classes)\r\n                            })\r\n                        }\r\n                        let feature_index = pre_selected_feature.indexOf(dimension);\r\n                        pre_selected_feature_stats[feature_index] = pre_selected_feature_stats[feature_index] + 1;\r\n                        pre_selected_feature_stats_index[feature_index].push(currentSelect);\r\n                        pre_selected_feature_order_list[feature_index].push(i);\r\n                        pre_selected_feature_prediction_label_distribution[feature_index][\"distribution\"][GCN_prediction_label] = \r\n                        pre_selected_feature_prediction_label_distribution[feature_index][\"distribution\"][GCN_prediction_label] + 1;\r\n                    }\r\n                }\r\n                for(let i = 0; i<pre_selected_feature_prediction_label_distribution.length; i++){\r\n                    let distribution = pre_selected_feature_prediction_label_distribution[i][\"distribution\"];\r\n                    let total_num = 0;\r\n                    for(let j = 0; j <distribution.length; j++){\r\n                        total_num = total_num + distribution[j];\r\n                    }\r\n                    if(total_num >0){\r\n                        for(let j = 0; j <distribution.length; j++){\r\n                            distribution[j] = distribution[j] / total_num;\r\n                         }\r\n                    }\r\n                    pre_selected_feature_prediction_label_distribution[i][\"distribution\"] = distribution;\r\n                }\r\n                // Step 3: Feature dimension reordering.\r\n                //console.log(\"before features\", pre_selected_feature);\r\n                /*if(pre_selected_feature_stats_index.length>=2 && !showSource && !enableSorting){\r\n                    let params = {\r\n                        \"pre_selected_feature_stats_index\":pre_selected_feature_stats_index,\r\n                        \"pre_selected_feature\":pre_selected_feature\r\n                    }\r\n                    let result_package = this.hclusterSortingSelectedFeatures(params);\r\n                    let perm = result_package[\"perm\"];\r\n                    let new_pre_selected_feature = [];\r\n                    let new_pre_selected_feature_stats:any[] = [];\r\n                    let new_pre_selected_feature_order:any[] =[];\r\n                    //let new_pre_selected_feature_stats_index:any[] = [];\r\n                    for(let i = 0; i<perm.length;i++){\r\n                        new_pre_selected_feature.push(pre_selected_feature[perm[i]]);\r\n                        new_pre_selected_feature_stats.push(pre_selected_feature_stats[perm[i]]);\r\n                        new_pre_selected_feature_order.push(pre_selected_feature_order[perm[i]]);\r\n                        //new_pre_selected_feature_stats_index.push(pre_selected_feature_stats_index[perm[i]].slice())\r\n                    }\r\n                    pre_selected_feature = new_pre_selected_feature;\r\n                    pre_selected_feature_stats = new_pre_selected_feature_stats;\r\n                    pre_selected_feature_order = new_pre_selected_feature_order;\r\n                    //pre_selected_feature_stats_index = new_pre_selected_feature_stats_index.slice();\r\n                    let sort_selected_feature_order = pre_selected_feature_order.map((d:any,i:any)=>{\r\n                        return {\r\n                            \"index\":pre_selected_feature[i],\r\n                            \"stats\":pre_selected_feature_stats[i],\r\n                            \"value\":d\r\n                        }\r\n                    })\r\n                    sort_selected_feature_order.sort((a:any,b:any)=>{\r\n                        return a.value < b.value ? -1: 1;\r\n                    })\r\n                    pre_selected_feature = sort_selected_feature_order.map((d:any)=>{\r\n                        return d.index;\r\n                    })\r\n                    pre_selected_feature_stats = sort_selected_feature_order.map((d:any)=>{\r\n                        return d.stats;\r\n                    })\r\n                }else if(pre_selected_feature_stats_index.length>=2 && showSource && !enableSorting){\r\n                    \r\n                }*/\r\n                //console.log(\"after features\", pre_selected_feature)\r\n                \r\n                //let enableSorting = 1;\r\n                let pre_selected_feature_add_info:any = [];\r\n                if(enableSorting >=2 && subgraph_mode){\r\n                    \r\n                    let fr_name = feature_ranking_list[enableSorting-2];\r\n                    let fr_list = feature_ranking[fr_name][\"feature_rank_values\"][select_inspect_node];\r\n                    let current_feature = features[select_inspect_node];\r\n\r\n                    let inspect_node = selectedNodeIdList[0];\r\n                    let inspect_node_GCN_prediction_label = individual[key_model_name].graph_out.node_features[inspect_node]; \r\n                    let sort_selected_feature_stats = pre_selected_feature_stats.map((d:any,i:any)=>{\r\n                        let first = 1;\r\n                        if(pre_selected_feature_order_list[i][0] === 0){\r\n                            first = 1;\r\n                        }else{\r\n                            first = 0;\r\n                        }\r\n                        let cf_idx = current_feature.indexOf(pre_selected_feature[i]);\r\n                        let pro = 0;\r\n                        if(cf_idx>=0){\r\n                            pro = fr_list[cf_idx];\r\n                        }\r\n                        return {\r\n                            \"index\":pre_selected_feature[i],\r\n                            \"freq\":d,\r\n                            \"pro\": pro,\r\n                            \"first\": first\r\n                        }\r\n                    })\r\n                    sort_selected_feature_stats.sort((a:any,b:any)=>{\r\n                        if(a.first > b.first){\r\n                            return -1;\r\n                        }else if(a.first < b.first){\r\n                            return 1;\r\n                        }else{\r\n                            if(a.pro>b.pro){\r\n                                return -1;\r\n                            }else if(a.pro<b.pro){\r\n                                return 1;\r\n                            }else{\r\n                                if(a.freq>b.freq){\r\n                                    return -1;\r\n                                }else{\r\n                                    return 1;\r\n                                }\r\n                            }\r\n                        }\r\n                        //return a.value > b.value ? -1: 1;\r\n                    })\r\n                    pre_selected_feature = sort_selected_feature_stats.map((d:any)=>{\r\n                        return d.index;\r\n                    })\r\n                    pre_selected_feature_stats = sort_selected_feature_stats.map((d:any)=>{\r\n                        return d.freq;\r\n                    })\r\n                    pre_selected_feature_add_info = sort_selected_feature_stats.map((d:any)=>{\r\n                        return d.pro\r\n                    });\r\n                }else if(enableSorting === 1){\r\n                    let inspect_node = selectedNodeIdList[0];\r\n                    let inspect_node_GCN_prediction_label = individual[key_model_name].graph_out.node_features[inspect_node]; \r\n                    let sort_selected_feature_stats = pre_selected_feature_stats.map((d:any,i:any)=>{\r\n                        let first = 1;\r\n                        if(pre_selected_feature_order_list[i][0] === 0){\r\n                            first = 1;\r\n                        }else{\r\n                            first = 0;\r\n                        }\r\n                        return {\r\n                            \"index\":pre_selected_feature[i],\r\n                            \"freq\":d,\r\n                            \"pro\": pre_selected_feature_prediction_label_distribution[i][\"distribution\"][inspect_node_GCN_prediction_label],\r\n                            \"first\": first\r\n                        }\r\n                    })\r\n                    sort_selected_feature_stats.sort((a:any,b:any)=>{\r\n                        if(a.first > b.first){\r\n                            return -1;\r\n                        }else if(a.first < b.first){\r\n                            return 1;\r\n                        }else{\r\n                            if(a.pro>b.pro){\r\n                                return -1;\r\n                            }else if(a.pro<b.pro){\r\n                                return 1;\r\n                            }else{\r\n                                if(a.freq>b.freq){\r\n                                    return -1;\r\n                                }else{\r\n                                    return 1;\r\n                                }\r\n                            }\r\n                        }\r\n                        //return a.value > b.value ? -1: 1;\r\n                    })\r\n                    pre_selected_feature = sort_selected_feature_stats.map((d:any)=>{\r\n                        return d.index;\r\n                    })\r\n                    pre_selected_feature_stats = sort_selected_feature_stats.map((d:any)=>{\r\n                        return d.freq;\r\n                    })\r\n                }else{\r\n                    let sort_selected_feature_order = pre_selected_feature_order_list.map((d:any,i:any)=>{\r\n                        return {\r\n                            \"index\":pre_selected_feature[i],\r\n                            \"stats\":pre_selected_feature_stats[i],\r\n                            \"value\":d\r\n                        }\r\n                    })\r\n                    sort_selected_feature_order.sort((a:any,b:any)=>{\r\n                        let value1 = a.value;\r\n                        let value2 = b.value;\r\n                        let len1 = value1.length;\r\n                        let len2 = value2.length;\r\n                        let flag = 0;\r\n                        let minlen = Math.min(len1, len2);\r\n                        for(let i = 0; i<minlen; i++){\r\n                            if(value1[i] < value2[i]){\r\n                                flag = -1;\r\n                                break;\r\n                            }\r\n                            if(value1[i] > value2[i]){\r\n                                flag = 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if(flag === 0){\r\n                            if(len1>len2){\r\n                                flag = -1;\r\n                            }else if(len1< len2){\r\n                                flag = 1;\r\n                            }else{\r\n                                flag = 0;\r\n                            }\r\n                        }\r\n                        return flag;\r\n                    })\r\n                    pre_selected_feature = sort_selected_feature_order.map((d:any)=>{\r\n                        return d.index;\r\n                    })\r\n                    pre_selected_feature_stats = sort_selected_feature_order.map((d:any)=>{\r\n                        return d.stats;\r\n                    })\r\n                }\r\n                selectedFeature = pre_selected_feature;\r\n                selectedFeatureStatistics = pre_selected_feature_stats;\r\n                selectedFeatureAddInfo = pre_selected_feature_add_info;\r\n                // Step 4: construct matrix based on selected node id list and selectedFeature.\r\n                for(let i = 0; i <selectedNodeIdList.length ; i++){\r\n                    let currentSelect:any = selectedNodeIdList[i];\r\n                    for(let j = 0;j <features[currentSelect].length;j ++){\r\n                        let dimension = features[currentSelect][j];\r\n                        let feature_index = selectedFeature.indexOf(dimension);\r\n                        let currentNodeIndex = i;\r\n                        let value = features_value[currentSelect][j];\r\n                        let value_package:any;\r\n                        \r\n                        value_package = {\r\n                            \"x\": feature_index,\r\n                            \"y\": currentNodeIndex,\r\n                            \"value\": value\r\n                        }\r\n                        \r\n                        matrix.push(value_package);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }else{\r\n            return {\"success\": false}\r\n        }\r\n        let selectedNodeColor : any[] = [];\r\n        for(let i = 0 ; i<selectedNodeIdList.length ; i++){\r\n            let color = getNodeColorInfo(selectedNodeIdList[i]);\r\n            selectedNodeColor.push(color);\r\n        }\r\n        let data_type = common.data_type_id;\r\n\r\n        if(data_type === 2){\r\n            let graph_info = common.graph_additional_info;\r\n            let selectedFeatureLabel:any = [];\r\n            let selectedFeatureTitle:any[] = [];\r\n            if(Object.keys(graph_info).indexOf(\"idx_to_attr\")>=0 && dataSource_select === 1){\r\n                let idx_to_attr = graph_info.idx_to_attr;\r\n                for(let i=0;i<selectedFeature.length; i++){\r\n                    selectedFeatureLabel.push(idx_to_attr[selectedFeature[i]]);\r\n                    if(subgraph_mode){\r\n                        selectedFeatureTitle.push(idx_to_attr[selectedFeature[i]]+\": \"+selectedFeatureAddInfo[i].toFixed(4));\r\n                    }else{\r\n                        selectedFeatureTitle.push(idx_to_attr[selectedFeature[i]])\r\n                    }\r\n                }\r\n\r\n            }else{\r\n                selectedFeatureLabel = selectedFeature;\r\n                //selectedFeatureTitle = selectedFeature;\r\n                \r\n                for(let i=0;i<selectedFeature.length; i++){\r\n                    if(subgraph_mode){\r\n                        selectedFeatureTitle.push(\"\"+selectedFeature[i]+\": \"+selectedFeatureAddInfo[i].toFixed(4));\r\n                    }else{\r\n                        selectedFeatureTitle.push(\"\"+selectedFeature[i])\r\n                    }\r\n                }\r\n\r\n            }\r\n            let y_axis_info = [];\r\n\r\n            if(Object.keys(graph_info).indexOf(\"idx_to_node_title\")>=0){\r\n                let idx_to_node_title = graph_info.idx_to_node_title;\r\n                for(let i = 0; i<selectedNodeIdList.length; i++){\r\n                    let node_title = idx_to_node_title[selectedNodeIdList[i]];\r\n                    y_axis_info.push(\"\"+selectedNodeIdList[i]+\": \"+node_title);\r\n                }\r\n                if(showSource){\r\n                    for(let i = 0; i<indentedList.length; i++){\r\n                        let id = indentedList[i][\"id\"];\r\n                        let node_title = idx_to_node_title[id];\r\n                        indentedList[i][\"node_title\"] = \"\"+id+\": \"+node_title;\r\n                    }\r\n                }\r\n                \r\n                console.log(\"y_axis_info: \", y_axis_info)\r\n            }else{\r\n                y_axis_info = selectedNodeIdList;\r\n                if(showSource){\r\n                    for(let i = 0; i<indentedList.length; i++){\r\n                        let id = indentedList[i][\"id\"];\r\n                        indentedList[i][\"node_title\"] = \"\"+id;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Graph Json ------------------------------------------------------------\r\n            let type : any;\r\n            if(dataSource_select === 1){\r\n                type = \"discrete\";\r\n            }else{\r\n                type = \"continuous\";\r\n            }\r\n            \r\n            let graph_json:any, x_axis_data : any, y_axis_data : any;\r\n            let enable_x_axis_color : boolean = false;\r\n            let enable_y_axis_color : boolean = false;\r\n            let x_axis_color:any[] = [];\r\n            let y_axis_color:any[] = [];\r\n            \r\n            \r\n            x_axis_data = selectedFeatureLabel;\r\n            y_axis_data = selectedNodeIdList;\r\n            enable_x_axis_color = false;\r\n            enable_y_axis_color = true;\r\n            x_axis_color = [];\r\n            y_axis_color = selectedNodeColor;\r\n            \r\n            \r\n            let color_info : any = {}\r\n            color_info[\"enable_x_axis_color\"] = enable_x_axis_color;\r\n            color_info[\"enable_y_axis_color\"] = enable_y_axis_color;\r\n            color_info[\"x_axis_color\"] = x_axis_color;\r\n            color_info[\"y_axis_color\"] = y_axis_color;\r\n            let display = true;\r\n            if(node_max_index<=0){\r\n                display = false;\r\n            }\r\n            let verticalSliderConfig : any = {\r\n                \"node_start_index\": node_start_index,\r\n                \"node_max_index\": node_max_index,\r\n                \"display\": display\r\n\r\n            }\r\n            console.log(\"verticalSliderConfig\", verticalSliderConfig);\r\n            graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"matrix\":matrix,\r\n                \"x_axis\":x_axis_data,\r\n                \"y_axis\":y_axis_data,\r\n                \"y_axis_info\":y_axis_info,\r\n                \"distance_select\": distance_select,\r\n                \"type\" : type,\r\n                \"color_info\": color_info,\r\n                \"selectedFeatureStatistics\":selectedFeatureStatistics,\r\n                \"selectedFeatureTitle\":selectedFeatureTitle,\r\n                \"indentedList\": indentedList,\r\n                //\"indentedTree\": indentedTree,\r\n                \"showSource\":showSource,\r\n                \"highlight_flag\":highlight_flag,\r\n                \"verticalSliderConfig\":verticalSliderConfig,\r\n                \"pieName\": selected_models_list\r\n            }\r\n            \r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n    }\r\n    public onAxisChange(axis_select: number) {\r\n        this.setState({\r\n            axis_select:axis_select\r\n        })\r\n    }\r\n    public onDistanceChange(distance_select: number) {\r\n        this.setState({\r\n            distance_select:distance_select\r\n        })\r\n    }\r\n    public onDataSourceChange(dataSource_select: number){\r\n        this.setState({\r\n            dataSource_select: dataSource_select\r\n        })\r\n    }\r\n    public onColorEncodeChange(color_encode: number){\r\n        this.setState({\r\n            color_encode: color_encode\r\n        })\r\n    }\r\n    public onEnableSort(enableSorting: number){\r\n        this.setState({\r\n            enableSorting: enableSorting\r\n        })\r\n    }\r\n    public changeNodeStartIndex(node_start_index:number){\r\n        this.setState({\r\n            node_start_index:node_start_index\r\n        })\r\n    }\r\n    public render() {\r\n        let {graph_object, specificNodeIdList, select_inspect_node} = this.props;\r\n\r\n        let common;\r\n        if(getLayoutMode()===3){\r\n            common = graph_object.common;\r\n        }else{\r\n            common = graph_object;\r\n        }\r\n        let explanation_type = common.graph_explaination.type;\r\n        let indentedtreeWidth = 120;\r\n        if(!this.props.showSource){\r\n            indentedtreeWidth = 100;\r\n        }\r\n        let matrixWidth = this.props.width-indentedtreeWidth;\r\n        let matrixRealWidth = matrixWidth - 30;\r\n        let max_row_num_block = Math.max(1, Math.floor((matrixRealWidth) / 15));\r\n        let gridSize = Math.floor((matrixRealWidth) / (max_row_num_block));\r\n        let indentedtreeBarHeight = gridSize;\r\n        let verticalSliderHeight = this.props.height - 180 - 90;\r\n        let max_col_num_block = Math.max(1, Math.floor((verticalSliderHeight + 22) / 15));\r\n        //console.log(\"max_col_num_block, verticalSliderHeight\", max_col_num_block, verticalSliderHeight);\r\n        //let FeatureMatrixHeight = 180 + max_col_num_block * indentedtreeBarHeight;\r\n        let additional_params = {\r\n            \"max_col_num_block\":max_col_num_block,\r\n            \"node_start_index\":this.state.node_start_index\r\n        }\r\n\r\n        let feature_matrix_json = this.constructFeatureMatrixJson(graph_object, specificNodeIdList,\r\n             this.state.axis_select, this.state.distance_select, this.state.dataSource_select, this.state.color_encode,\r\n            this.props.select_inspect_node, this.props.showSource, this.state.enableSorting, this.props.width, this.props.height, \r\n            this.props.extendedMode, additional_params, this.props.selected_models_list);\r\n\r\n        if(explanation_type == \"MessagePassing\" && feature_matrix_json[\"success\"]){\r\n            let FeatureMatrixHeight = 180 + feature_matrix_json.y_axis.length * indentedtreeBarHeight + 20;\r\n\r\n            let verticalSliderConfig = feature_matrix_json[\"verticalSliderConfig\"];\r\n            \r\n            let BrushBarChartLayoutConfig = {\r\n                \"width\":this.props.width-indentedtreeWidth,\r\n                \"height\":100,\r\n                \"x\":indentedtreeWidth,\r\n                \"y\":0,\r\n                \"max_row_num_block\":max_row_num_block\r\n            }\r\n            let MatrixLayoutConfig = {\r\n                \"width\":this.props.width-indentedtreeWidth,\r\n                \"height\":FeatureMatrixHeight-180,\r\n                \"x\":indentedtreeWidth,\r\n                \"y\":180,\r\n                \"gridSize\":gridSize,\r\n                \"max_row_num_block\":max_row_num_block\r\n            }\r\n            let IndentedTreeLayoutConfig = {\r\n                \"width\":indentedtreeWidth,\r\n                \"height\":FeatureMatrixHeight-180,\r\n                \"x\":0,\r\n                \"y\":180,\r\n                \"barHeight\":indentedtreeBarHeight\r\n            }\r\n            let VerticalSliderLayoutConfig = {\r\n                \"width\": indentedtreeWidth - 60,\r\n                \"height\": verticalSliderHeight,\r\n                \"x\": 0,\r\n                \"y\": 180 + 10,\r\n                \"node_start_index\": verticalSliderConfig[\"node_start_index\"],\r\n                \"node_max_index\": verticalSliderConfig[\"node_max_index\"],\r\n                \"name\":\"verticalslider_\"+verticalSliderConfig[\"node_max_index\"]\r\n            }\r\n            let onSelectSort = (e:any) =>{\r\n                this.onEnableSort(e)\r\n                /*if(e === 0){\r\n                    this.onEnableSort(false);\r\n                }else{\r\n                    this.onEnableSort(true);\r\n                }*/\r\n            }\r\n            /*let getOptionValue = () =>{\r\n                if(this.state.enableSorting){\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }*/\r\n            let getOptionValue = () =>{\r\n                return this.state.enableSorting;\r\n            } \r\n            let SortOptions = [\r\n                [0, \"Node order\"],\r\n                [1, \"Frequency of features\"]\r\n            ]\r\n\r\n            if(this.props.showSource){\r\n                let feature_ranking_list = graph_object.feature_ranking_list;\r\n                let feature_ranking = graph_object.feature_ranking;\r\n                //console.log(\"feature ranking list, feature ranking\", feature_ranking_list, feature_ranking);\r\n                let found_extendedOptions = false;\r\n                let extendedMode = getOptionValue();\r\n                if(extendedMode <= 1){\r\n                    found_extendedOptions = true;\r\n                }\r\n                for (var fr_id = 0; fr_id < feature_ranking_list.length; fr_id++) {\r\n                    let fr_name = feature_ranking_list[fr_id];\r\n                    if(Object.keys(feature_ranking[fr_name][\"feature_rank_values\"]).indexOf(\"\"+select_inspect_node)>=0){\r\n                        let fr_list = feature_ranking[fr_name][\"feature_rank_values\"][select_inspect_node];\r\n                        if(fr_list.length > 0){\r\n                            SortOptions.push([fr_id + 2, fr_name]);\r\n                            if(extendedMode == fr_id + 2){\r\n                                found_extendedOptions = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if(!found_extendedOptions){\r\n                    onSelectSort(1);\r\n                }\r\n            }\r\n            \r\n            return (            \r\n            <div >\r\n                <div className=\"ViewTitle\">Feature Matrix View\r\n                <div style={{float:'right'}}>\r\n                Sort features by:&nbsp;\r\n                    <Select\r\n                        placeholder=\"Select a sort mode.\"\r\n                        value={getOptionValue()}\r\n                        style={{ width: '120px' }}\r\n                        onChange={onSelectSort}\r\n                        size=\"small\"\r\n                    >\r\n                        {SortOptions.map((d:any)=>(\r\n                            <Option value={d[0]} key={d[0]}>\r\n                                {d[1]}\r\n                            </Option>\r\n                        ))}\r\n                    </Select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"ViewBox\" style={{width: \"100%\", height:\"\"+(this.props.height - 40)+\"px\", overflowX: \"scroll\"}}>\r\n                    <div style={{width: '100%'}}>\r\n                        <div style={{width: '100%', height: \"\"+FeatureMatrixHeight+\"px\"}}>\r\n                            <svg\r\n                                style={{ height: \"100%\", width:  \"100%\"}}\r\n                                id=\"FeatureMatrixSVGChart\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                            <BrushBarChartContainer id={3} feature_matrix_json={feature_matrix_json} layout_config={BrushBarChartLayoutConfig}   />\r\n                            <MatrixContainer id={1} feature_matrix_json={feature_matrix_json} layout_config={MatrixLayoutConfig}   />    \r\n                            {(this.props.showSource)?\r\n                            (<IndentedListContainer id={4} feature_matrix_json={feature_matrix_json} layout_config={IndentedTreeLayoutConfig}   />)\r\n                            :(verticalSliderConfig[\"display\"])?\r\n                            (<VerticalSliderContainer id={5} feature_matrix_json={feature_matrix_json} layout_config={VerticalSliderLayoutConfig} changeNodeStartIndex={this.changeNodeStartIndex}  />):(<g />)}\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n        }else{\r\n            return <div style={{width: \"100%\", height:\"\"+(this.props.height - 20)+\"px\", overflowX: \"scroll\"}}>\r\n                <div className=\"ViewTitle\">Feature Matrix View               \r\n                </div></div>\r\n        }\r\n    }\r\n}\r\n\r\n","import FeatureMatrixView from './FeatureMatrixView'\r\nexport default FeatureMatrixView;\r\n\r\n\r\n","import FeatureMatrixView from '../components/DataRuns/FeatureMatrixView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    specificNodeIdList : state.specificNodeIdList,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    extendedMode: state.extendedMode,\r\n    K_value: state.K_value,\r\n    selected_models_list: state.selected_models_list\r\n\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeatureMatrixView);\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n//const URL = 'http://192.168.245.1:3000/';\r\n//var url1 = window.location.href;\r\n//var url3 = document.URL;\r\n//const URL = document.location.origin;\r\n//const URL = \"http://localhost:7777\"\r\n//const obj = require(\"gzip-loader!file.js.gz\");\r\n//console.log(\"public obj\", obj);\r\nconst ENABLE_STATIC_JSON = false;\r\nconst VERSION = \"V1_2\";\r\nconst URL = process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:7777'\r\n    : window.location.origin;\r\nconst axiosInstance1 = axios.create({\r\n    baseURL: `${URL}/api/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nconst URL2 = window.location.origin;\r\nconst axiosInstance2 = axios.create({\r\n    baseURL: `${URL2}/data/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nlet axiosInstance = (ENABLE_STATIC_JSON)?axiosInstance2:axiosInstance1;\r\n/*function sleep(ms:number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }*/\r\nexport async function getDatasetList(): Promise<any> {\r\n    let url = `/datasets`;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/datasetlist_'+VERSION+\".json\";\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const res = await axiosInstance.get(url);\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getExplainMethodsList(model_id:number): Promise<any> {\r\n    const url = `/explainMethods`;\r\n    const params = { model_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n  export async function getModelList(dataset_id:number): Promise<any> {\r\n    const url = `/models`;\r\n    const params = { dataset_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getGraphList(dataset_id:number): Promise<any> {\r\n    const url = `/graphs`;\r\n    const params = { dataset_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getGraphInfo(dataset_id:number, model_id:number, explain_id:number, graph_id:number): Promise<any> {\r\n    const url = `/graph_info`;\r\n    const params = { dataset_id, model_id, explain_id, graph_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getGraphBundledInfo(dataset_id:number): Promise<any> {\r\n    if(ENABLE_STATIC_JSON){\r\n        const url = '/cache_bundle_'+dataset_id+'_'+VERSION+\".json\";\r\n        const res = await axiosInstance.get(url);\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n        throw res;\r\n    }else{\r\n        const url = `/graph_bundle_info`;\r\n        const params = { dataset_id};\r\n        const res = await axiosInstance.get(url, {params});\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n        throw res;\r\n    }\r\n    \r\n}\r\n\r\nexport async function getRulesInfo(dataset_id:number): Promise<any> {\r\n    if(ENABLE_STATIC_JSON){\r\n        /*const url = '/cache_bundle_'+dataset_id+'_'+VERSION+\".json\";\r\n        const res = await axiosInstance.get(url);\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n        throw res;*/\r\n    }else{\r\n        const url = `/rule_mining`;\r\n        const params = { dataset_id};\r\n        const res = await axiosInstance.get(url, {params});\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n        throw res;\r\n    }\r\n    \r\n}","import * as React from 'react';\r\nimport { Select, Row, Col} from 'antd';\r\nimport { getDatasetList} from '../../../service/dataService';\r\nconst Option = Select.Option;\r\n\r\n\r\nexport interface DataSelectorProps {\r\n    dataset_id : number | null,\r\n    datasetList: any,\r\n    changeDataset: any,\r\n    clearIdInfo:any,\r\n    initDatasetList: any,\r\n}\r\n\r\nexport interface DataSelectorState {\r\n    //DataSelectorValue : number\r\n}\r\n\r\nexport default class DataSelector extends React.Component<DataSelectorProps, DataSelectorState> {\r\n    constructor(props: DataSelectorProps) {\r\n        super(props);\r\n        this.onDatasetSelectorChange = this.onDatasetSelectorChange.bind(this);\r\n        this.state = {\r\n            //DataSelectorValue: 1\r\n            // datarunStatus: IDatarunStatusTypes.PENDING\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        //this.initModelList();\r\n        this.initDatasetList();\r\n    }\r\n    public async initDatasetList(){\r\n        const datasetList_package = await getDatasetList();\r\n        //console.log(datasetList_package);\r\n        \r\n        if(datasetList_package[\"success\"] === true){\r\n            this.props.initDatasetList(datasetList_package[\"datasets\"]);\r\n        }\r\n        \r\n    }\r\n\r\n    public onDatasetSelectorChange(value: number) {\r\n        this.props.changeDataset(value);\r\n        \r\n    }\r\n\r\n    public render() {\r\n        // 230 px \r\n        let disabledDatasetSelector = this.props.datasetList.length <= 0;\r\n        return (\r\n                <Row>\r\n                    <Col span={4}>\r\n                        Datasets:&nbsp;\r\n                        </Col>\r\n                        <Col span={20}>\r\n\r\n                        <Select\r\n                            placeholder=\"Select a dataset\"\r\n                            value={this.props.dataset_id  || undefined}\r\n                            style={{ width: '100%' }}\r\n                            onChange={this.onDatasetSelectorChange}\r\n                            disabled={disabledDatasetSelector}\r\n                        >\r\n                            {this.props.datasetList.map((d:any)=>(\r\n                                <Option value={d.id} key={d.id}>\r\n                                    {d.name}\r\n                                </Option>\r\n                            ))}\r\n                        </Select>\r\n                        </Col>\r\n                </Row>\r\n            )\r\n        \r\n    }\r\n}\r\n","import DataSelector from '../components/DataRuns/ControlPanel/DataSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeModel, initModelList, changeDataset, \r\n    changeExplainMethod, initDatasetList, initExplainList, initGraphList, changeGraph, clearIdInfo} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id: state.dataset_id,\r\n    datasetList: state.datasetList,\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeDataset: (dataset_id:number | null) => dispatch(changeDataset(dataset_id)),\r\n    clearIdInfo: () => dispatch(clearIdInfo()),\r\n    initDatasetList : (datasetList: any) => dispatch(initDatasetList(datasetList)),\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataSelector);\r\n","import * as React from 'react';\r\nimport { Select, Row, Col} from 'antd';\r\nimport { getDatasetList} from '../../../service/dataService';\r\nconst Option = Select.Option;\r\n\r\n\r\nexport interface ModelSelectorProps {\r\n    selected_models_list : any,\r\n    models_list: any,\r\n    changeSelectedModels: any\r\n}\r\n\r\nexport interface ModelSelectorState {\r\n    //DataSelectorValue : number\r\n}\r\n\r\nexport default class ModelSelector extends React.Component<ModelSelectorProps, ModelSelectorState> {\r\n    constructor(props: ModelSelectorProps) {\r\n        super(props);\r\n        this.onModelSelectorChange = this.onModelSelectorChange.bind(this);\r\n        this.state = {\r\n            //DataSelectorValue: 1\r\n            // datarunStatus: IDatarunStatusTypes.PENDING\r\n        };\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    \r\n\r\n    public onModelSelectorChange(value: any) {\r\n        //console.log(\"Model selector\", value);\r\n        if(value.length <= 0 || value.length >= 4){\r\n\r\n        }else{\r\n            this.props.changeSelectedModels(value);\r\n\r\n        }\r\n\r\n        //this.props.changeDataset(value);\r\n        //this.props.clearIdInfo();\r\n    }\r\n\r\n    public render() {\r\n        \r\n        let disabledModelsSelector = false;\r\n        if(!this.props.selected_models_list || this.props.models_list.length <= 0){\r\n            disabledModelsSelector = true;\r\n        }\r\n        //if(!disabledDatasetSelector && !this.props.dataset_id){\r\n        //    this.onDatasetSelectorChange(7);\r\n        //}\r\n        let {models_list} = this.props;\r\n        let nlabel_options_indexed = [];\r\n        for(let i = 0; i< models_list.length; i++){\r\n            let nlabel_object:any = {\r\n                \"name\":  models_list[i],\r\n                \"id\": i\r\n            }\r\n            nlabel_options_indexed.push(nlabel_object);\r\n        }\r\n        return (\r\n                <Row>\r\n                    <Col span={4}>\r\n                        Models:&nbsp;\r\n                        </Col>\r\n                        <Col span={20}>\r\n                        <Select\r\n                            mode=\"multiple\"\r\n                            allowClear\r\n                            placeholder=\"Select models\"\r\n                            style={{ width: '100%' }}\r\n                            onChange={this.onModelSelectorChange}\r\n                            disabled={disabledModelsSelector}\r\n                            value={this.props.selected_models_list}\r\n                            defaultValue={[]}\r\n                        >\r\n                            {nlabel_options_indexed.map((d:any)=>(\r\n                                <Option value={d.name} key={d.id}>{d.name}</Option>\r\n                            ))}\r\n                        </Select>\r\n                        </Col>\r\n                </Row>\r\n            )\r\n        \r\n    }\r\n}\r\n","import ModelSelector from '../components/DataRuns/ControlPanel/ModelSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeSelectedModels} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    models_list: state.models_list,\r\n    selected_models_list: state.selected_models_list,\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeSelectedModels: (dataset_id:number | null) => dispatch(changeSelectedModels(dataset_id)),\r\n})\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModelSelector);\r\n","import * as React from 'react';\r\nimport {Tabs, Table, Row,  Radio, Col, Slider, InputNumber} from 'antd';\r\nimport DataSelectorContainer from '../../../container/DataSelectorContainer';\r\nimport ModelSelectorContainer from '../../../container/ModelSelectorContainer';\r\nimport ModelSelector from './ModelSelector';\r\n//const TabPane = Tabs.TabPane\r\n//const CheckboxGroup = Checkbox.Group;\r\nconst RadioGroup = Radio.Group;\r\nconst RadioPlainOptions = ['All', 'Training', 'Validation', 'Test'];\r\nconst plainOptions = ['Train', 'Valid', 'Test','Others'];\r\nconst defaultCheckedList = ['Train', 'Valid', 'Test', 'Others'];\r\nexport interface ControlPanelProps {\r\n    InspectCategoryList : any,\r\n    onChangeInspectCategoryList : any,\r\n    dataset_id: number | null,\r\n    K_value:any,\r\n    changeK_value:any\r\n}\r\n\r\nexport interface ControlPanelState {}\r\n\r\nexport default class ControlPanel extends React.Component<ControlPanelProps, ControlPanelState> {\r\n    public min_K_value = 1;\r\n    public max_K_value = 5;\r\n    constructor(props: ControlPanelProps) {\r\n        super(props);\r\n        this.onChangeRadioCategory = this.onChangeRadioCategory.bind(this);\r\n        //this.onRowClick = this.onRowClick.bind(this);\r\n        this.state = {\r\n        };\r\n    }\r\n    public transformCategoryList(categoryList:any){\r\n        if(categoryList.length === 4){\r\n            return RadioPlainOptions[0]; // All\r\n        }else if(categoryList.length === 1){\r\n            let category = categoryList[0];\r\n            if(category === 'Train'){\r\n                return RadioPlainOptions[1]; // Training\r\n            }else if(category === 'Valid'){\r\n                return RadioPlainOptions[2]; // Validation\r\n            }else if(category === 'Test'){\r\n                return RadioPlainOptions[3]; // Test\r\n            }\r\n        }\r\n        console.log(\"Some errors occur in categoryList\");\r\n        return 'All'; // If others\r\n    }\r\n    public onChangeRadioCategory(e:any){\r\n        let selectedValue = e.target.value;\r\n        let options:any [] = [];\r\n        if(selectedValue === RadioPlainOptions[0]){\r\n            // All\r\n            options = plainOptions;\r\n        }else if(selectedValue === RadioPlainOptions[1]){\r\n            // Training\r\n            options = [plainOptions[0]];\r\n        }else if(selectedValue === RadioPlainOptions[2]){\r\n            // Validation\r\n            options = [plainOptions[1]];\r\n        }else if(selectedValue === RadioPlainOptions[3]){\r\n            // Test\r\n            options = [plainOptions[2]];\r\n        }else{\r\n            console.log(\"Some errors occur in onChangeRadioCategory selectedValue\");\r\n            options = plainOptions;\r\n        }\r\n        this.props.onChangeInspectCategoryList(options);\r\n    }\r\n    handleKvalueChange = (value:any) =>{\r\n        if(value>=this.min_K_value && value <= this.max_K_value){\r\n            this.props.changeK_value(value);\r\n        }else if(value < this.min_K_value){\r\n            this.props.changeK_value(this.min_K_value);\r\n        }else if(value > this.max_K_value){\r\n            this.props.changeK_value(this.max_K_value);\r\n        }\r\n    }\r\n    public render() {\r\n        let radio_value = this.transformCategoryList(this.props.InspectCategoryList);\r\n        let min_K_value = this.min_K_value;\r\n        let max_K_value = this.max_K_value;\r\n        let {K_value} = this.props;\r\n        return (\r\n            <div>\r\n            <div className=\"ViewTitle\">Control Panel</div>\r\n            <div className=\"ViewBox\">\r\n                    <Row>\r\n                        <DataSelectorContainer />\r\n                    </Row>\r\n                    {(this.props.dataset_id && this.props.dataset_id>=0)?\r\n                    <Row>\r\n                        <ModelSelectorContainer />\r\n                    </Row>:(<div />)\r\n                    }\r\n                    {(this.props.dataset_id && this.props.dataset_id>=0)?<Row>\r\n                        Inspect category:&nbsp;&nbsp;\r\n                        <RadioGroup\r\n                            value={radio_value}\r\n                            onChange={this.onChangeRadioCategory}\r\n                        >\r\n                            {RadioPlainOptions.map((d:any,index:number)=>{\r\n                                return <Radio key={d} value={d}>{d}</Radio>\r\n                                \r\n                            })}\r\n                        </RadioGroup>\r\n                        \r\n                    </Row>:(<div />)\r\n                    }\r\n                    {(this.props.dataset_id && this.props.dataset_id>=0)?<Row>\r\n                        <Row>K value:</Row>\r\n                    \r\n                <Row>\r\n                    <Col span={16}>\r\n                    <Slider\r\n                        min={min_K_value}\r\n                        max={max_K_value}\r\n                        onChange={this.handleKvalueChange}\r\n                        value={typeof K_value === 'number' ? K_value : 0}\r\n                    />\r\n                    </Col>\r\n                    <Col span={4}>\r\n                    <InputNumber\r\n                        min={min_K_value}\r\n                        max={max_K_value}\r\n                        style={{ margin: '0 16px' }}\r\n                        value={K_value}\r\n                        onChange={this.handleKvalueChange}\r\n                    />\r\n                    </Col>\r\n                </Row>\r\n                </Row>:(<div />)\r\n                    }\r\n                    \r\n            </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n","import './index.css';\r\nimport ControlPanel from './ControlPanel';\r\nexport default ControlPanel;","import ControlPanel from '../components/DataRuns/ControlPanel'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport {changeInspectCategoryList, changeK_value} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    InspectCategoryList: state.InspectCategoryList,\r\n    dataset_id : state.dataset_id,\r\n    K_value:state.K_value\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onChangeInspectCategoryList : (InspectCategoryList:any) => dispatch(changeInspectCategoryList(InspectCategoryList)),\r\n    changeK_value: (K_value:any) => dispatch(changeK_value(K_value))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\r\n\r\n\r\n\r\n","\r\nimport './ParallelSets.css'\r\nimport * as React from \"react\";\r\nimport {getInfectionNodeColor, getInfectionEdgeColor, getCoraNodeColor, getLayoutMode} from '../../../helper';\r\nconst d3 = require(\"d3\");\r\nconst d3_parsets = require(\"./d3.parsets.js\");\r\nexport interface IProps {\r\n    PSJson:any,\r\n    changeFilters:any,\r\n    width: number,\r\n    height:number,\r\n    PSDimensions:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ParallelCoordinates extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onRibbonClick = this.onRibbonClick.bind(this);\r\n        this.clearFilter = this.clearFilter.bind(this);\r\n        this.onCategoryClick = this.onCategoryClick.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        if(prevProps.PSJson.name !== this.props.PSJson.name || !this.comparePSDimensions(prevProps.PSDimensions, this.props.PSDimensions) ){\r\n            d3.selectAll(\"#ParallelSets_SVG\").remove();\r\n            this.props.changeFilters({});\r\n            this.renderD3();\r\n        }\r\n\r\n        \r\n     }\r\n     public comparePSDimensions(prev:any, current:any){\r\n         if(prev.length !== current.length){\r\n             return 0; // Not equal\r\n         }else{\r\n             let flag = 1;\r\n            for(let i = 0; i<prev.length; i++){\r\n                if(prev[i] !== current[i]){\r\n                    flag = 0;\r\n                    break;\r\n                }\r\n            }   \r\n            return flag;\r\n         }\r\n     }\r\n     public onRibbonClick(e:any){\r\n        const filters:any = {};\r\n        let current = e.data;\r\n        while(current){\r\n            if(current.hasOwnProperty(\"parent\")){\r\n                filters[current.dimension] = [current.name];\r\n                current = current.parent;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        //filters[feature] = selected;            \r\n        this.props.changeFilters(filters);\r\n    }\r\n    public onCategoryClick(e:any){\r\n        console.log(\"onCategoryClick\", e);\r\n        const filters:any = {};\r\n        let current = e.data;\r\n        filters[current.dimension.name] = [current.name];\r\n        this.props.changeFilters(filters);\r\n    }\r\n    public clearFilter(){\r\n        console.log(\"clearFilter\");\r\n        this.props.changeFilters({});\r\n    }\r\n    public renderD3(){\r\n        console.log(\"Parallel Sets props\", this.props);\r\n        // Parallel Sets\r\n        let {width, height,PSJson,PSDimensions} = this.props;\r\n        let PSData = PSJson.PSData;\r\n        let chart_dimensions = PSDimensions;\r\n        //let chart_dimensions = [\"Survived\", \"Sex\", \"Age\", \"Class\"];\r\n        if(chart_dimensions.length <= 1){\r\n            console.log(\"The number of dimensions must be larger or equal to 2.\")\r\n            return ;\r\n        }\r\n        // tension = 1 --> line\r\n        // tension = 0.5 --> curve\r\n        var chart = d3.parsets()\r\n            .dimensions(chart_dimensions)\r\n            .width(width)\r\n            .height(height)\r\n            .tension(1)\r\n            .on(\"ribbonClick\",this.onRibbonClick)\r\n            .on(\"sortDimensions\",this.clearFilter)\r\n            .on(\"sortCategories\",this.clearFilter)\r\n            .on(\"categoryClick\", this.onCategoryClick)\r\n            \r\n        var vis = d3.select(\"#parallelSets\").append(\"svg\")\r\n            .attr(\"id\",\"ParallelSets_SVG\")\r\n            .attr(\"width\", chart.width())\r\n            .attr(\"height\", chart.height());\r\n        //console.log(\"chart width, height\", chart.width(), chart.height())\r\n            \r\n        //var partition = d3.partition()\r\n        //    .size([chart.width(), chart.height() * 5 / 4])\r\n            //.children(function(d:any) { return d.children ? d3.values(d.children) : null; })\r\n            //.value(function(d:any) { return d.count; });\r\n\r\n        //var ice = false;\r\n        /*\r\n        function curves() {\r\n            var t = vis.transition().duration(500);\r\n            if (ice) {\r\n                t.delay(1000);\r\n                icicle();\r\n            }\r\n            t.call(chart.tension(this.checked ? .5 : 1));\r\n        }*/\r\n\r\n        //console.log(\"Titanic\", csv);\r\n        //d3.csv(\"titanic.csv\", function(csv:any) {\r\n        //console.log(\"PSJson\", PSJson);\r\n            let csv = PSData;\r\n            vis.datum(csv).call(chart);\r\n        //})\r\n        /*\r\n        var icicle = function(this:any) {\r\n                var newIce = this.checked,\r\n                tension = chart.tension();\r\n            if (newIce === ice) return;\r\n            if (ice = newIce) {\r\n                var dimensions:any = [];\r\n                vis.selectAll(\"g.dimension\")\r\n                    .each(function(d:any) { dimensions.push(d); });\r\n                dimensions.sort(function(a:any, b:any) { return a.y - b.y; });\r\n                var root = d3.parsets.tree({children: {}}, csv, dimensions.map(function(d:any) { return d.name; }), function() { return 1; }),\r\n                    nodes:any = partition(root),\r\n                    nodesByPath:any = {};\r\n                    nodes.forEach(function(d:any) {\r\n                        var path = d.data.name,\r\n                            p = d;\r\n                        while ((p = p.parent) && p.data.name) {\r\n                        path = p.data.name + \"\\0\" + path;\r\n                        }\r\n                        if (path) nodesByPath[path] = d;\r\n                    });\r\n                var data:any = [];\r\n                vis.on(\"mousedown.icicle\", stopClick, true)\r\n                    .select(\".ribbon\").selectAll(\"path\")\r\n                    .each(function(d:any) {\r\n                        var node = nodesByPath[d.path],\r\n                            s = d.source,\r\n                            t = d.target;\r\n                        s.node.x0 = t.node.x0 = 0;\r\n                        s.x0 = t.x0 = node.x;\r\n                        s.dx0 = s.dx;\r\n                        t.dx0 = t.dx;\r\n                        s.dx = t.dx = node.dx;\r\n                        data.push(d);\r\n                    });\r\n                iceTransition(vis.selectAll(\"path\"))\r\n                    .attr(\"d\", function(d:any) {\r\n                        var s = d.source,\r\n                            t = d.target;\r\n                        return ribbonPath(s, t, tension);\r\n                    })\r\n                    .style(\"stroke-opacity\", 1);\r\n                iceTransition(vis.selectAll(\"text.icicle\")\r\n                    .data(data)\r\n                    .enter().append(\"text\")\r\n                    .attr(\"class\", \"icicle\")\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"dy\", \".3em\")\r\n                    .attr(\"transform\", function(d:any) {\r\n                        return \"translate(\" + [d.source.x0 + d.source.dx / 2, d.source.dimension.y0 + d.target.dimension.y0 >> 1] + \")rotate(90)\";\r\n                    })\r\n                    .text(function(d:any) { return d.source.dx > 15 ? d.node.name : null; })\r\n                    .style(\"opacity\", 1e-6))\r\n                    .style(\"opacity\", 1);\r\n                iceTransition(vis.selectAll(\"g.dimension rect, g.category\")\r\n                    .style(\"opacity\", 1))\r\n                    .style(\"opacity\", 1e-6)\r\n                    .each(\"end\", function(this:any) { d3.select(this).attr(\"visibility\", \"hidden\"); });\r\n                iceTransition(vis.selectAll(\"text.dimension\"))\r\n                    .attr(\"transform\", \"translate(0,-5)\");\r\n                vis.selectAll(\"tspan.sort\").style(\"visibility\", \"hidden\");\r\n            } else {\r\n                vis.on(\"mousedown.icicle\", null)\r\n                    .select(\".ribbon\").selectAll(\"path\")\r\n                    .each(function(this:any,d:any) {\r\n                        var s = d.source,\r\n                            t = d.target;\r\n                        s.node.x0 = s.node.x;\r\n                        s.x0 = s.x;\r\n                        s.dx = s.dx0;\r\n                        t.node.x0 = t.node.x;\r\n                        t.x0 = t.x;\r\n                        t.dx = t.dx0;\r\n                    });\r\n                iceTransition(vis.selectAll(\"path\"))\r\n                    .attr(\"d\", function(d:any) {\r\n                        var s = d.source,\r\n                            t = d.target;\r\n                        return ribbonPath(s, t, tension);\r\n                    })\r\n                    .style(\"stroke-opacity\", null);\r\n                iceTransition(vis.selectAll(\"text.icicle\"))\r\n                    .style(\"opacity\", 1e-6).remove();\r\n                iceTransition(vis.selectAll(\"g.dimension rect, g.category\")\r\n                    .attr(\"visibility\", null)\r\n                    .style(\"opacity\", 1e-6))\r\n                    .style(\"opacity\", 1);\r\n                iceTransition(vis.selectAll(\"text.dimension\"))\r\n                    .attr(\"transform\", \"translate(0,-25)\");\r\n                vis.selectAll(\"tspan.sort\").style(\"visibility\", null);\r\n            }\r\n            d3.select(\"#icicle\")\r\n                .on(\"change\", icicle)\r\n                .each(icicle);\r\n        }\r\n        \r\n\r\n        function iceTransition(g:any) {\r\n            return g.transition().duration(1000);\r\n        }\r\n\r\n        function ribbonPath(s:any, t:any, tension:any) {\r\n            var sx = s.node.x0 + s.x0,\r\n                tx = t.node.x0 + t.x0,\r\n                sy = s.dimension.y0,\r\n                ty = t.dimension.y0;\r\n            var m0 = tension * sy + (1 - tension) * ty;\r\n            var m1 = tension * ty + (1 - tension) * sy;\r\n            return (tension === 1 ? [\r\n                \"M\", [sx, sy],\r\n                \"L\", [tx, ty],\r\n                \"h\", t.dx,\r\n                \"L\", [sx + s.dx, sy],\r\n                \"Z\"]\r\n            : [\"M\", [sx, sy],\r\n                \"C\", [sx, m0], \" \",\r\n                    [tx, m1], \" \", [tx, ty],\r\n                \"h\", t.dx,\r\n                \"C\", [tx + t.dx, m1], \" \", [sx + s.dx, m0], \" \", [sx + s.dx, sy],\r\n                \"Z\"]).join(\"\");\r\n        }\r\n\r\n        function stopClick() { d3.event.stopPropagation(); }\r\n\r\n        // Given a text function and width function, truncates the text if necessary to\r\n        // fit within the given width.\r\n        function truncateText(text:any, width:any) {\r\n            return function(this:any, d:any, i:any) {\r\n                var t = this.textContent = text(d, i),\r\n                    w = width(d, i);\r\n                if (this.getComputedTextLength() < w) return t;\r\n                this.textContent = \"…\" + t;\r\n                var lo = 0,\r\n                    hi = t.length + 1,\r\n                    x;\r\n                while (lo < hi) {\r\n                var mid = lo + hi >> 1;\r\n                if ((x = this.getSubStringLength(0, mid)) < w) lo = mid + 1;\r\n                else hi = mid;\r\n                }\r\n                return lo > 1 ? t.substr(0, lo - 2) + \"…\" : \"\";\r\n            };\r\n        }\r\n\r\n        d3.select(\"#file\").on(\"change\", function(this:any) {\r\n            var file = this.files[0],\r\n                reader = new FileReader;\r\n            reader.onloadend = function() {\r\n                var csv = d3.csv.parse(reader.result);\r\n                vis.datum(csv).call(chart\r\n                    .value(csv[0].hasOwnProperty(\"Number\") ? function(d:any) { return +d.Number; } : 1)\r\n                    .dimensions(function(d:any) { \r\n                        return d3.keys(d[0]).filter(function(d:any) { \r\n                            return d !== \"Number\"; \r\n                        }).sort(); \r\n                    }));\r\n            };\r\n            reader.readAsText(file);\r\n        });\r\n        */\r\n    }\r\n    public render() {\r\n        return (\r\n            <div id=\"parallelSets\" />\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import ParallelSets from '../components/DataRuns/PSView/ParallelSets';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    PSDimensions: state.PSDimensions\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeFilters: (filters:any) => dispatch(changeFilters(filters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ParallelSets);\r\n","import * as React from \"react\";\r\nimport { Tag } from 'antd';\r\nimport {getNodeStatisticStr} from '../../../helper';\r\nexport interface IProps {\r\n    PSSelectedNodes: number,\r\n    totalNodeNum: number\r\n}\r\nexport interface IState {\r\n}\r\nexport default class PSViewNodeStatistic extends React.Component<IProps, IState>{\r\n    public render() {\r\n        return <Tag> {getNodeStatisticStr(this.props.PSSelectedNodes, this.props.totalNodeNum)}</Tag>\r\n    }\r\n}\r\n\r\n","import PSViewNodeStatistic from '../components/DataRuns/PSView/PSViewNodeStatistic'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../types';\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    PSSelectedNodes: state.PSSelectedNodes\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PSViewNodeStatistic);\r\n\r\n\r\n\r\n","import * as React from \"react\";\r\nimport { Modal, Select, Button, Row, Col, Slider, InputNumber } from 'antd';\r\nimport { PSDIMENSIONS_CHANGE } from \"../../../constants\";\r\nexport interface IProps {\r\n    PSSettingModal_visible: boolean,\r\n    PSSettingModal_visible_setting: any,\r\n    changePSDimensions:any,\r\n    PSDimensions:any,\r\n    CandidatePSDimensions:any,\r\n    DefaultPSDimensions:any,\r\n    K_value:any,\r\n    changeK_value:any\r\n}\r\nexport interface IState {\r\n}\r\nexport default class PSSettingsModal extends React.Component<IProps, IState>{\r\n    public min_K_value = 1;\r\n    public max_K_value = 5;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    handleOk = (e:any) => {\r\n        console.log(e);\r\n        this.props.PSSettingModal_visible_setting(false);\r\n      };\r\n    \r\n    handleCancel = (e:any) => {\r\n        console.log(e);\r\n        this.props.PSSettingModal_visible_setting(false);\r\n      };\r\n    handleChange = (value:any) =>{\r\n        if(value.length < 2){\r\n            console.log(\"Modal Warning: the number of dimensions cannot be less than 2.\");\r\n        }else{\r\n            this.props.changePSDimensions(value);\r\n\r\n        }\r\n        //console.log(\"selected\", value);\r\n    }\r\n    handleKvalueChange = (value:any) =>{\r\n        if(value>=this.min_K_value && value <= this.max_K_value){\r\n            this.props.changeK_value(value);\r\n        }else if(value < this.min_K_value){\r\n            this.props.changeK_value(this.min_K_value);\r\n        }else if(value > this.max_K_value){\r\n            this.props.changeK_value(this.max_K_value);\r\n        }\r\n    }\r\n    public render() {\r\n        const { Option } = Select;\r\n        const children = [];\r\n        let min_K_value = this.min_K_value;\r\n        let max_K_value = this.max_K_value;\r\n        let {K_value} = this.props;\r\n        let CandidatePSDimensions = this.props.CandidatePSDimensions;\r\n        for (let i = 0; i < CandidatePSDimensions.length; i++) {\r\n            children.push(<Option key={CandidatePSDimensions[i]}>{CandidatePSDimensions[i]}</Option>);\r\n        }\r\n\r\n        if(this.props.PSDimensions.length <=0){\r\n            this.props.changePSDimensions(this.props.DefaultPSDimensions);\r\n        }\r\n        console.log(\"Parallel Sets View Settings Modal, \", this.props.PSSettingModal_visible);\r\n        return  (      \r\n        <Modal\r\n            title=\"Parallel Sets View Settings\"\r\n            visible={this.props.PSSettingModal_visible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n            footer={[\r\n                <Button key=\"OK\" type=\"primary\" onClick={this.handleOk}>\r\n                  OK\r\n                </Button>\r\n              ]}\r\n        >\r\n                Dimensions Selection:\r\n                <Select\r\n                    mode=\"multiple\"\r\n                    style={{ width: '100%' }}\r\n                    placeholder=\"Please select dimensions.\"\r\n                    value={this.props.PSDimensions}\r\n                    onChange={this.handleChange}\r\n                >\r\n                    {children}\r\n                </Select>\r\n                {/*K value:\r\n                <Row>\r\n                    <Col span={18}>\r\n                    <Slider\r\n                        min={min_K_value}\r\n                        max={max_K_value}\r\n                        onChange={this.handleKvalueChange}\r\n                        value={typeof K_value === 'number' ? K_value : 0}\r\n                    />\r\n                    </Col>\r\n                    <Col span={4}>\r\n                    <InputNumber\r\n                        min={min_K_value}\r\n                        max={max_K_value}\r\n                        style={{ margin: '0 16px' }}\r\n                        value={K_value}\r\n                        onChange={this.handleKvalueChange}\r\n                    />\r\n                    </Col>\r\n                </Row>*/}\r\n        </Modal>)\r\n    }\r\n}\r\n\r\n","import PSViewNodeStatistic from '../components/DataRuns/PSView/PSViewNodeStatistic'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../types';\r\nimport PSSettingsModal from '../components/DataRuns/PSView/PSSettingsModal';\r\nimport { changePSSettingsModal_visible, changePSDimensions, changeK_value } from '../actions';\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    PSSettingModal_visible: state.PSSettingsModal_visible,\r\n    PSDimensions: state.PSDimensions,\r\n    K_value:state.K_value\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    PSSettingModal_visible_setting: (visible:boolean) => dispatch(changePSSettingsModal_visible(visible)),\r\n    changePSDimensions: (PSDimensions:any) => dispatch(changePSDimensions(PSDimensions)),\r\n    changeK_value: (K_value:any) => dispatch(changeK_value(K_value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PSSettingsModal);\r\n\r\n\r\n\r\n","import PSView from './PSView'\r\nexport default PSView;\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\nimport ParallelSetsContainer from '../../../container/ParallelSetsContainer';\r\nimport PSViewNodeStatisticContainer from '../../../container/PSViewNodeStatisticContainer';\r\nimport { Row , Button} from 'antd';\r\nimport {constructNeighborSet,getCoraNodeColor,getTrainColor,\r\n    getLabelDistribution, getLabelDistribution2, cropAnchorsList, \r\n    getSimilarityFeatureSet, getShortestPathDistanceSet, \r\n    constructMetaInformation, constructSelectedMask,getNodeColorInfo,\r\n    constructDegreeRangeList, getDegreeCategory, binningContinuousVariable, \r\n    getContinuousVariableCategory, getMaxComponent} from '../../../helper';\r\nimport PSSettingsModalContainer from \"../../../container/PSSettingsModalContainer\";\r\nimport { SettingOutlined } from '@ant-design/icons';\r\n\r\n\r\n\r\n\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    width:number,\r\n    height:number,\r\n    checkedList:any[],\r\n    changePSJson:any,\r\n    changePSSettingsModal_visible:any,\r\n    changePSDimensions:any,\r\n    selected_models_list:any,\r\n    K_value:any\r\n}\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport default class PSView extends React.Component<IProps, IState>{\r\n    public prev_bundle_id = -1;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     \r\n\r\n    public constructPSJson(graph_object:any, show_mode:number, CheckedList:any, \r\n        width:number, height:number, selected_models_list:any){\r\n        //console.log(\"constructPSJson begin\");\r\n        console.log(\"constructPSJson\", graph_object);\r\n        let CheckedList_str = CheckedList.join(\"_\");\r\n        let Selected_models_str = selected_models_list.join(\"_\");\r\n        let common = graph_object.common;\r\n        let individual = graph_object.individual;\r\n         \r\n        \r\n        \r\n        if(selected_models_list.length === 0){\r\n            console.log(\"No selected models\");\r\n            return {\"success\": false};\r\n        }\r\n        let key_model_name = selected_models_list[0];\r\n        let graph_out = individual[key_model_name].graph_out;\r\n        let graph_name = common.name+\"_\"+common.dataset_id+\"_\"+(show_mode)+\"_\"+common.data_type_id+\"_CheckedList_\"+CheckedList_str+\r\n        \"_CheckedList_End_\"+width+\"_\"+height+\"_\"+this.props.K_value + \"SELECTED_MODEL_\"+Selected_models_str+\"_SELECTED_MODEL_END_\";\r\n\r\n        let graph_in = common.graph_in;\r\n        let graph_target = common.graph_target;\r\n        let graph_explaination = common.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        let data_type = common.data_type_id;\r\n        let NeighborSet = constructNeighborSet(graph_in);\r\n        let mask = common.mask;\r\n        let train_mask_set = new Set(common.mask.train);\r\n\r\n        if(data_type === 2){\r\n            let node_num = graph_target.node_features.length;\r\n            let num_classes = common.graph_additional_info.num_class;\r\n            let selected_mask = constructSelectedMask(node_num, CheckedList, mask);\r\n            let models_list = graph_object.individual_model_names;\r\n            //console.log(\"Mask\",this.state.checkedList, selected_mask);\r\n            // 1. Calculate degree, one_hop_accuracy, cn_consistency, SPD, KFS\r\n            let meta_package:any = constructMetaInformation(node_num,NeighborSet,graph_target.node_features, graph_out.node_features)\r\n            //console.log(\"shortest_path_distance, selected_mask, node_num, NeighborSet, mask.train\", selected_mask, node_num, NeighborSet, mask.train);\r\n            let enableSPD = true;\r\n            let enableKFS = true;\r\n            let enableK_settings = true; // enable setting k values.\r\n            let shortest_path_distance_package:any, feature_similarity_list:any;\r\n            if(enableSPD){\r\n                shortest_path_distance_package = common.graph_additional_info.SPD;\r\n            }else{\r\n                shortest_path_distance_package = getShortestPathDistanceSet(selected_mask, node_num, NeighborSet, mask.train);\r\n            }\r\n            if(enableKFS){\r\n                feature_similarity_list = common.graph_additional_info.KFS;\r\n            }else{\r\n                feature_similarity_list = getSimilarityFeatureSet(selected_mask, mask.train, graph_in.feature, graph_in.feature_value, graph_target.node_features);\r\n            }\r\n            let degree_list = meta_package[\"degree_list\"];\r\n            let degree_range_list = constructDegreeRangeList(degree_list.slice());\r\n            let one_hop_accuracy_list = meta_package[\"one_hop_accuracy_list\"];\r\n            let cn_consistency_list = meta_package[\"cn_consistency_list\"];\r\n\r\n\r\n            let PSData:any = [];\r\n            //let P1_name = individual.GCN.real_model_name;\r\n            //let P2_name = individual.MLP.real_model_name;\r\n            //let P3_name = individual.GCN_Identity_features.real_model_name;\r\n            let pie_name = selected_models_list;\r\n            let P1_correctness = key_model_name+\"_correctness\";\r\n            let All_correctness = [];\r\n            for(let i = 0; i<models_list.length; i++){\r\n                All_correctness.push(models_list[i] + \"_correctness\")\r\n            }\r\n            //let P2_correctness = P2_name+\"_correctness\";\r\n            //let P3_correctness = P3_name+\"_correctness\";\r\n            let P1_one_hop_accuracy = key_model_name+\"_one_hop_accuracy\";\r\n            let CGTNGT_name = \"Label_consistency\";\r\n            let CGTNPT_name = \"Label-Prediction_consistency\";\r\n            let CPTNGT_name = \"Prediction-Label_consistency\";\r\n            let CPTNPT_name = \"Prediction_consistency\";\r\n            let SPD_consistency_name = \"Nearest_training_nodes_dominant_label_consistency\";\r\n            let KFS_consistency_name = \"Top-k_most_similar_training_nodes_dominant_label_consistency\";\r\n            let SPD_distribution_name = \"Nearest_training_nodes_label_distribution\";\r\n            let KFS_distribution_name = \"Top-k_most_similar_training_nodes_label_distribution\"\r\n            let Distance_name = \"Shortest_Path_Distance_to_Training_Nodes\";\r\n            //let Default_PSColumns = [\"Rule\",P1_correctness,\"Label\"];\r\n            //let Default_PSColumns = [P1_correctness,\"Confidence\",\r\n            //CGTNGT_name,SPD_consistency_name,KFS_consistency_name, \"Label\"]\r\n            let Default_PSColumns = [P1_correctness,SPD_consistency_name,KFS_consistency_name, \"Label\"]\r\n            /**\r\n             * \r\n             */\r\n            /*let PSColumns = [\"Label\",P1_correctness,P1_one_hop_accuracy,P2_correctness, \r\n            P3_correctness,\"Degree\",\"Shortest_Path_Distance_to_Train_Nodes\",\"Rule\",\r\n            \"CGTNGT\",\"CGTNPT\",\"CPTNGT\",\"CPTNPT\",\"SPD_label\",\"KFS_label\",\r\n            \"SPD_consistency\",\"KFS_consistency\",\"Confidence\"];*/\r\n            let PSColumns = [\"Label\",P1_one_hop_accuracy,\"Degree\",Distance_name,\r\n            CGTNGT_name,CGTNPT_name,CPTNGT_name,CPTNPT_name,\r\n            SPD_consistency_name,KFS_consistency_name,\"Confidence\"];\r\n            for(let i = 0; i<All_correctness.length; i++){\r\n                PSColumns.push(All_correctness[i]);\r\n            }\r\n            for(let i = 0; i<num_classes;i++){\r\n                PSColumns.push(SPD_distribution_name+\"_\"+i);\r\n            }\r\n            for(let i = 0; i<num_classes;i++){\r\n                PSColumns.push(KFS_distribution_name+\"_\"+i);\r\n            }\r\n            \r\n            /*let PCPDimension = [\r\n                {name: 'degree', range: [1,max_degree], type:\"log\"},\r\n                {name: 'ground_truth_label', range: ground_truth_label_range, type:\"ordinal\"},\r\n                {name: 'prediction_label', range: prediction_label_range, type:\"ordinal\"},\r\n                {name: 'correctness', range: [0,1], type:\"ordinal\"},\r\n                {name: 'one_hop_accuracy', range:[0,1], type:\"continuous\"}\r\n\r\n            ];*/\r\n            let whole_correct_num = 0;\r\n            let whole_accuracy = 0;\r\n            let ground_truth_label_stats:any = {};\r\n            let correct_label = \"Correct\";\r\n            let wrong_label = \"Wrong\";\r\n            let shortest_path_label_consistency = 0, shortest_path_label_accuracy = 0;\r\n            //console.log(\"constructPSJson prepare data\");\r\n            \r\n            let getLabelName = () =>{\r\n                let graph_info = common.graph_additional_info;\r\n                let num_class = graph_info.num_class;\r\n                let label = [];\r\n                if(Object.keys(graph_info).indexOf(\"idx_to_class\")>=0){\r\n                    let idx_to_class = graph_info.idx_to_class;\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push(idx_to_class[i])\r\n                    }\r\n                }else{\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push(\"\"+i);\r\n                    }\r\n                }\r\n                return label;\r\n            }\r\n            let label_name = getLabelName();\r\n            let P1_prediction_label = key_model_name + \"_Prediction_Label\";\r\n            let P1_confidence = key_model_name + \"_Confidence\";\r\n            // 2. Prepare node_json.\r\n            for(let i = 0; i<selected_mask.length;i++){\r\n                let index = selected_mask[i];\r\n                let node_json:any = {};\r\n                let ground_truth_label = graph_target.node_features[index];\r\n                let gcn_prediction_label = graph_out.node_features[index];\r\n                let gcn_confidence = graph_out.output_vector[index][gcn_prediction_label];\r\n                //let mlp_prediction_label = individual.MLP.graph_out.node_features[index];\r\n                //let gcn_identity_features_prediction_label = individual.GCN_Identity_features.graph_out.node_features[index];\r\n                \r\n                \r\n                \r\n                node_json[\"Data_id\"] = index;\r\n                \r\n\r\n                // 2.1 Color\r\n                node_json[\"Color\"] = getNodeColorInfo(index, graph_target, individual, selected_models_list, train_mask_set);\r\n                //node_json[\"Rule\"] = \"\"+satisfied_rule_id[index];\r\n\r\n                // 2.2 SPD\r\n                if(enableSPD){\r\n                    node_json[\"Shortest_Path_Distance_to_Train_Nodes\"] = shortest_path_distance_package[index].dis;\r\n                    node_json[\"Spd_node_info\"] = shortest_path_distance_package[index].train_nodes;\r\n                    \r\n                }else{\r\n                    node_json[\"Shortest_Path_Distance_to_Train_Nodes\"] = shortest_path_distance_package[\"\"+index].shortest_path_distance;\r\n                    node_json[\"Spd_node_info\"] = getLabelDistribution(shortest_path_distance_package[\"\"+index].shortest_path_set, graph_target.node_features, num_classes);\r\n                }\r\n                if(node_json[\"Shortest_Path_Distance_to_Train_Nodes\"] === \"inf\"){\r\n                    node_json[\"Transformed_Distance\"] = 0;\r\n                }else{\r\n                    if(node_json[\"Shortest_Path_Distance_to_Train_Nodes\"]>=5){\r\n                        node_json[\"Transformed_Distance\"] = 0;\r\n                    }else{\r\n                        node_json[\"Transformed_Distance\"] = 1-0.2*node_json[\"Shortest_Path_Distance_to_Train_Nodes\"];\r\n                    }\r\n\r\n                }\r\n                node_json[Distance_name] = node_json[\"Shortest_Path_Distance_to_Train_Nodes\"];\r\n                shortest_path_label_consistency = shortest_path_label_consistency + node_json[\"Spd_node_info\"][gcn_prediction_label];\r\n                if(node_json[\"Spd_node_info\"][gcn_prediction_label]>=Math.max(...node_json[\"Spd_node_info\"])){\r\n                    shortest_path_label_accuracy = shortest_path_label_accuracy + 1;\r\n                }\r\n                \r\n                // 2.3 KFS\r\n                if(enableKFS){\r\n                    node_json[\"Topkfs_node_info\"] = feature_similarity_list[index][\"train_nodes\"];\r\n                    node_json[\"Topkfs_nodes\"] = feature_similarity_list[index][\"details\"];\r\n                    if(enableK_settings){\r\n                        node_json[\"Topkfs_nodes\"] = cropAnchorsList(node_json[\"Topkfs_nodes\"],this.props.K_value);\r\n                        node_json[\"Topkfs_node_info\"] = getLabelDistribution2(node_json[\"Topkfs_nodes\"], num_classes);\r\n                    }\r\n                    node_json[\"Topkfs_nodes\"] = node_json[\"Topkfs_nodes\"].sort((a:any,b:any)=>{\r\n                        if(a.anchor_label<b.anchor_label){\r\n                            return -1;\r\n                        }else if(a.anchor_label > b.anchor_label){\r\n                            return 1;\r\n                        }else{\r\n                            if(a.anchor_similarity>b.anchor_similarity){\r\n                                return -1;\r\n                            }else{\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    })\r\n                }else{\r\n                    let topk_feature_sim_set = feature_similarity_list[\"\"+index].topk_anchor_similarity_list.map((d:any)=>d.anchor_id);\r\n                    node_json[\"Topkfs_node_info\"] = getLabelDistribution(topk_feature_sim_set, graph_target.node_features, num_classes);\r\n                    \r\n                    node_json[\"Topkfs_nodes\"] = feature_similarity_list[\"\"+index].topk_anchor_similarity_list;\r\n                    node_json[\"Topkfs_nodes\"] = node_json[\"Topkfs_nodes\"].sort((a:any,b:any)=>{\r\n                        if(a.anchor_label<b.anchor_label){\r\n                            return -1;\r\n                        }else if(a.anchor_label > b.anchor_label){\r\n                            return 1;\r\n                        }else{\r\n                            if(a.anchor_similarity>b.anchor_similarity){\r\n                                return -1;\r\n                            }else{\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                //node_json[\"Max_feature_similarity\"] = feature_similarity_list[\"\"+index].feature_similarity;\r\n                //node_json[\"Mfs_node_info\"] = getLabelDistribution(feature_similarity_list[\"\"+index].feature_sim_set, graph_target.node_features, num_classes);\r\n\r\n                \r\n                \r\n                \r\n                // 2.4 CN consistency + degree\r\n                node_json[\"CN_consistency\"] = cn_consistency_list[index];\r\n                node_json[\"Degree\"] = getDegreeCategory(degree_list[index], degree_range_list);//\"\"+degree_list[index];\r\n                node_json[\"Real_Degree\"] = degree_list[index];\r\n                //if(degree_list[index] > 7){\r\n                //    node_json[\"Degree\"] = \">7\";\r\n               // }\r\n                \r\n\r\n                // 2.5 Ground truth\r\n                //node_json[\"Ground_Truth\"] =  label_name[ground_truth_label];\r\n                node_json[\"Ground_Truth_Label\"] = \"\"+ground_truth_label;\r\n                if(!(ground_truth_label in ground_truth_label_stats)){\r\n                    ground_truth_label_stats[ground_truth_label] = {\r\n                        \"correct_num\": 0,\r\n                        \"wrong_num\" : 0\r\n                    }\r\n                }\r\n                node_json[\"Label\"] = node_json[\"Ground_Truth_Label\"];\r\n                // TODO:\r\n\r\n                // 2.6 Model prediction results and confidence.\r\n\r\n                //node_json[P1_prediction_label] =  \"\"+gcn_prediction_label;\r\n                node_json[P1_confidence] = gcn_confidence;\r\n                //node_json[\"GCN(w/o_adj)_Prediction_Label\"] = \"\"+mlp_prediction_label;\r\n                //node_json[\"GCN(w/o_features)_Prediction_Label\"] = \"\"+gcn_identity_features_prediction_label;\r\n                //node_json[P2_correctness] = mlp_prediction_label === ground_truth_label?correct_label:wrong_label;\r\n                //node_json[P3_correctness] = gcn_identity_features_prediction_label === ground_truth_label?correct_label:wrong_label;\r\n                for(let j = 0; j<All_correctness.length; j++){\r\n                    let model_name = models_list[j];\r\n                    let prediction_label = individual[model_name].graph_out.node_features[index];\r\n                    node_json[model_name + \"_Prediction_Label\"] = prediction_label;\r\n                    node_json[All_correctness[j]] = prediction_label === ground_truth_label?correct_label:wrong_label;\r\n                }\r\n                if(ground_truth_label===gcn_prediction_label){\r\n                    //node_json[P1_correctness] = correct_label;\r\n                    whole_correct_num = whole_correct_num + 1;\r\n                    ground_truth_label_stats[ground_truth_label][\"correct_num\"] = \r\n                    ground_truth_label_stats[ground_truth_label][\"correct_num\"] + 1;\r\n\r\n                }else{\r\n                    //node_json[P1_correctness] = wrong_label;\r\n                    ground_truth_label_stats[ground_truth_label][\"wrong_num\"] = \r\n                    ground_truth_label_stats[ground_truth_label][\"wrong_num\"] + 1;\r\n                }\r\n                \r\n                node_json[P1_one_hop_accuracy] = \"\"+one_hop_accuracy_list[index];\r\n                let one_hop_accuracy = one_hop_accuracy_list[index];\r\n                if(one_hop_accuracy>0&&one_hop_accuracy<1){\r\n                    node_json[P1_one_hop_accuracy] = \"(0,1)\";\r\n                }\r\n                /*if(one_hop_accuracy>0&&one_hop_accuracy<=0.2){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0,0.2]\";\r\n                }else if(one_hop_accuracy>0.2 && one_hop_accuracy <=0.4){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.2,0.4]\";\r\n                }else if(one_hop_accuracy>0.4 && one_hop_accuracy <=0.6){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.4,0.6]\";\r\n                }else if(one_hop_accuracy>0.6 && one_hop_accuracy <=0.8){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.6,0.8)\";\r\n                }else if(one_hop_accuracy>0.8 && one_hop_accuracy <1){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.8,1)\";\r\n                }*/\r\n                //node_json[\"two_hop_accuracy\"] = \r\n\r\n\r\n                // 2.7 Push node_json to PSData\r\n                PSData.push(node_json);\r\n                //PCPIndex.push(index);\r\n            }\r\n\r\n\r\n\r\n\r\n            // binning CN, SPD, KFS\r\n            let CN_list:any = [[],[],[],[]];\r\n            let SPD_list:any = [];\r\n            let KFS_list:any = [];\r\n            let GCN_Confidence_list:any = [];\r\n            let CN_range_list:any = [[],[],[],[]];\r\n            let SPD_range_list:any = [];\r\n            let KFS_range_list:any = [];\r\n            let GCN_Confidence_range_list:any = [];\r\n            for(let i = 0; i<num_classes;i++){\r\n                SPD_list.push([]);\r\n                KFS_list.push([]);\r\n                SPD_range_list.push([]);\r\n                KFS_range_list.push([]);\r\n            }\r\n\r\n            //let degree_list = meta_package[\"degree_list\"];\r\n            //let degree_range_list = constructDegreeRangeList(degree_list.slice());\r\n            for(let i = 0; i<PSData.length;i++){\r\n                let node_json = PSData[i];\r\n                let cn_consistency = node_json[\"CN_consistency\"];\r\n                CN_list[0].push(cn_consistency[\"cgt_ngt\"]);\r\n                CN_list[1].push(cn_consistency[\"cgt_npt\"]);\r\n                CN_list[2].push(cn_consistency[\"cpt_ngt\"]);\r\n                CN_list[3].push(cn_consistency[\"cpt_npt\"]);\r\n                let spd = node_json[\"Spd_node_info\"];\r\n                let kfs = node_json[\"Topkfs_node_info\"];\r\n                for(let j = 0 ;j<num_classes;j++){\r\n                    SPD_list[j].push(spd[j]);\r\n                    KFS_list[j].push(kfs[j]);\r\n                }\r\n                // TODO\r\n                GCN_Confidence_list.push(node_json[P1_confidence]);\r\n            }\r\n\r\n            for(let i = 0; i<CN_list.length; i++){\r\n                CN_range_list[i] = binningContinuousVariable(CN_list[i]);\r\n            }\r\n            for(let i = 0; i<SPD_list.length; i++){\r\n                SPD_range_list[i] = binningContinuousVariable(SPD_list[i]);\r\n            }\r\n            for(let i = 0; i<KFS_list.length; i++){\r\n                KFS_range_list[i] = binningContinuousVariable(KFS_list[i]);\r\n            }\r\n            GCN_Confidence_range_list = binningContinuousVariable(GCN_Confidence_list);\r\n            for(let i = 0; i<PSData.length;i++){\r\n                let node_json = PSData[i];\r\n                let cn_consistency = node_json[\"CN_consistency\"];\r\n                node_json[CGTNGT_name] = getContinuousVariableCategory(cn_consistency[\"cgt_ngt\"],CN_range_list[0]);\r\n                node_json[CGTNPT_name] = getContinuousVariableCategory(cn_consistency[\"cgt_npt\"],CN_range_list[1]);\r\n                node_json[CPTNGT_name] = getContinuousVariableCategory(cn_consistency[\"cpt_ngt\"],CN_range_list[2]);\r\n                node_json[CPTNPT_name] = getContinuousVariableCategory(cn_consistency[\"cpt_npt\"],CN_range_list[3]);\r\n                let spd = node_json[\"Spd_node_info\"];\r\n                let kfs = node_json[\"Topkfs_node_info\"];\r\n\r\n                for(let j = 0 ;j<num_classes;j++){\r\n                    node_json[SPD_distribution_name+\"_\"+j]=getContinuousVariableCategory(spd[j],SPD_range_list[j]);\r\n                    node_json[KFS_distribution_name+\"_\"+j]=getContinuousVariableCategory(kfs[j],KFS_range_list[j]);\r\n                }\r\n                let spd_label = getMaxComponent(spd);\r\n                let kfs_label = getMaxComponent(kfs);\r\n                if(spd_label === -1){\r\n                    node_json[\"SPD_label\"] = \"Not Sure\";\r\n                    node_json[SPD_consistency_name] = \"Not Sure\";\r\n                }else{\r\n                    node_json[\"SPD_label\"] = \"\"+spd_label;\r\n                    if(node_json[\"Ground_Truth_Label\"] === node_json[\"SPD_label\"]){\r\n                        node_json[SPD_consistency_name] = \"True\";\r\n                    }else{\r\n                        node_json[SPD_consistency_name] = \"False\";\r\n                    }\r\n                }\r\n                if(kfs_label === -1){\r\n                    node_json[\"KFS_label\"] = \"Not Sure\";\r\n                    node_json[KFS_consistency_name] = \"Not Sure\";\r\n                }else{\r\n                    node_json[\"KFS_label\"] = \"\"+kfs_label;\r\n                    if(node_json[\"Ground_Truth_Label\"] === node_json[\"KFS_label\"]){\r\n                        node_json[KFS_consistency_name] = \"True\";\r\n                    }else{\r\n                        node_json[KFS_consistency_name] = \"False\";\r\n                    }\r\n                }\r\n                // TODO\r\n                node_json[\"Confidence\"] = getContinuousVariableCategory(node_json[P1_confidence], GCN_Confidence_range_list);\r\n\r\n            }\r\n\r\n            //console.log(\"len, shortest_path_label_accuracy, rate\", selected_mask.length, shortest_path_label_accuracy, shortest_path_label_accuracy / selected_mask.length );\r\n            PSData[\"columns\"] = PSColumns;\r\n            PSData[\"default_columns\"] = Default_PSColumns;\r\n\r\n            // Calculate stats\r\n            let keys = Object.keys(ground_truth_label_stats);\r\n            let maxtotal = 0;\r\n            for(let i = 0 ;i < keys.length; i++){\r\n                let key = keys[i];\r\n                let stats = ground_truth_label_stats[key];\r\n                let total = stats[\"correct_num\"] + stats[\"wrong_num\"];\r\n                if(total > 0){\r\n                    stats[\"accuracy\"] = stats[\"correct_num\"] / total;\r\n                }else{\r\n                    stats[\"accuracy\"] = 0;\r\n                }\r\n                stats[\"total\"] = total;\r\n                if(total > maxtotal ){\r\n                    maxtotal = total;\r\n                }\r\n            }   \r\n            for(let i = 0 ;i<keys.length;i++){\r\n                let key = keys[i];\r\n                let stats = ground_truth_label_stats[key];\r\n                if(maxtotal > 0){\r\n                    stats[\"max_percentage\"] = stats[\"total\"] / maxtotal;\r\n                }else{\r\n                    stats[\"max_percentage\"] = 0;\r\n                }\r\n            }\r\n            \r\n            if(selected_mask.length <= 0 ){\r\n                console.log(\"No selected data.\");\r\n                return {\"success\": false};\r\n            }else{\r\n                whole_accuracy = whole_correct_num / selected_mask.length;\r\n                let graph_json = {\r\n                    \"success\":true,\r\n                    \"name\":graph_name,\r\n                    \"PSData\":PSData,\r\n                    \"accuracy\":whole_accuracy,\r\n                    \"nodenum\":selected_mask.length,\r\n                    \"pie_name\":pie_name,\r\n                    \"graph_additional_info\":common.graph_additional_info\r\n                }\r\n                return graph_json;\r\n            }\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n        \r\n    }\r\n    public showPSSettingModal(){\r\n        this.props.changePSSettingsModal_visible(true);\r\n    }\r\n    public render() {\r\n        //console.log(\"render PS view\");\r\n        let {graph_object, show_mode, explained_node, onExplainNodeChange, onShowModeChange} = this.props;\r\n        //let screenwidth = window.innerWidth;\r\n        //let screenheight = window.innerHeight;\r\n        //let PCPJson:any = this.constructPCPJson(graph_object,show_mode, explained_node, onExplainNodeChange, onShowModeChange, this.state.checkedList);\r\n        \r\n        let PSWidth = this.props.width - 10;\r\n        let PSHeight = this.props.height - 60;\r\n        let PSJson:any = this.constructPSJson(graph_object,show_mode, this.props.checkedList, PSWidth, PSHeight, this.props.selected_models_list);\r\n        //console.log(\"construct PS Json\", PSJson);\r\n        this.props.changePSJson(PSJson);\r\n        let current_bundle_id = graph_object[\"bundle_id\"];\r\n        let prev_bundle_id = this.prev_bundle_id;\r\n        if(current_bundle_id !== prev_bundle_id){\r\n            this.props.changePSDimensions(PSJson[\"PSData\"][\"default_columns\"]);\r\n            this.prev_bundle_id = current_bundle_id;\r\n        }\r\n        \r\n        return <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n            \r\n            <div className=\"ViewTitle\">Parallel Sets View\r\n            <div style={{float:'right'}}>\r\n                        {PSJson[\"success\"]?(\r\n                        <div>\r\n                            <div>\r\n                                <Button type=\"default\" size=\"small\" onClick={()=>{this.showPSSettingModal()}} ><SettingOutlined /></Button>\r\n                                {/*<Button type=\"default\" size=\"small\" onClick={()=>{this.showPSSettingModal()}}>Settings</Button>*/}\r\n                                <PSSettingsModalContainer CandidatePSDimensions={PSJson[\"PSData\"][\"columns\"]} DefaultPSDimensions={PSJson[\"PSData\"][\"default_columns\"]}/>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                                {/*Accuracy: <Tag>{PCPJson[\"accuracy\"].toFixed(4)}</Tag>  &nbsp;&nbsp;&nbsp;&nbsp; <Tag>{PSJson[\"nodenum\"]}</Tag>*/} \r\n                                #Nodes: <PSViewNodeStatisticContainer totalNodeNum={PSJson[\"nodenum\"]}></PSViewNodeStatisticContainer>\r\n                            </div>\r\n                            \r\n                        </div>)\r\n                        :\r\n                        (<div />)}\r\n                        </div>\r\n            </div>\r\n            <div className=\"ViewBox\">\r\n                <Row gutter={4}>\r\n                    <Row>\r\n                        {PSJson[\"success\"]?(\r\n                        <ParallelSetsContainer width={PSWidth} height={PSHeight} PSJson={PSJson} />):(<div />)}\r\n                    </Row>\r\n                    \r\n                </Row>\r\n                \r\n                \r\n            </div>\r\n            {/*<Row>\r\n                {PSJson[\"success\"]?(<SelectedNodeListContainer PCPJson={PSJson} height={screenheight*0.29} width={screenwidth * 6/ 24 -20}/>):(<div />)}\r\n            </Row>*/}\r\n        </div>\r\n        \r\n    }\r\n}\r\n\r\n","import PSView from '../components/DataRuns/PSView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport {changePSJson, changePSSettingsModal_visible, changePSDimensions} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    checkedList: state.InspectCategoryList,\r\n    K_value:state.K_value,\r\n    selected_models_list: state.selected_models_list\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changePSJson: (PSJson: any) => dispatch(changePSJson(PSJson)),\r\n    changePSSettingsModal_visible:  (visible:boolean) => dispatch(changePSSettingsModal_visible(visible)),\r\n    changePSDimensions: (PSDimensions:any) => dispatch(changePSDimensions(PSDimensions))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PSView);\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport { Select} from 'antd';\r\nimport \"./ProjectionView.css\";\r\nimport {getCoraNodeColor, compareSelectedNodeIdList} from '../../../helper';\r\nimport { UMAP } from 'umap-js';\r\nimport { min } from 'd3-array';\r\n\r\n\r\n//import { SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE } from '../../../constants';\r\n//import reorder from '../FeatureMatrixView/reorder.v1';\r\nconst d3 = require(\"d3\");\r\n//const mds = require(\"./mdsjs.js\");\r\nconst d3_lasso = require(\"./d3-lasso.js\");\r\nconst tsnejs = require(\"./tsne.js\");\r\n\r\nconst Option = Select.Option;\r\n\r\nconst legend_line_style = {\r\n    \"stroke\":\"#bbb\",\r\n    \"stroke-width\":2,\r\n    \"stroke-dasharray\":\"2,3\"\r\n} \r\n\r\nexport interface ProjectionViewProps {\r\n    id:number,\r\n    refreshnumber:number,\r\n    filters:any,\r\n    PCPJson:any,\r\n    changeSelectedNodeIdList: any,\r\n    width:number,\r\n    height: number,\r\n    showSource:boolean,\r\n    changeShowSource:any,\r\n    selectedNodeIdList:any,\r\n    showMode:number,\r\n    x:number,\r\n    y:number,\r\n    name:string,\r\n    onChangeHighLightNodeIdList:any,\r\n    onChangeHoveredNodeIdList:any,\r\n    renderLines:any,\r\n    dataPackage:any,\r\n    updateSingleHighlightNodeStatus:any,\r\n    enableLegends:boolean,\r\n    layoutMode:number,\r\n    graph_additional_info:any\r\n}\r\n\r\nexport interface ProjectionViewState {\r\n    \r\n\r\n}\r\n\r\nexport default class ProjectionView extends React.Component<ProjectionViewProps, ProjectionViewState> {\r\n    public point_array:any[] = [];\r\n    public additional_info:any = {};\r\n    public model:any = {};\r\n    //public showMode: number = 1; \r\n    // 1 -> ground truth label / prediction label\r\n    // 2 -> shortest path distance / center neighbor consistency rate.\r\n    // 3 -> shortest path distance train nodes label distribution\r\n    // 4 -> topkfs train nodes label distribution\r\n    constructor(props: ProjectionViewProps) {\r\n        super(props);\r\n        this.mappingGraph = this.mappingGraph.bind(this);\r\n        this.onSelectedNodeListChange = this.onSelectedNodeListChange.bind(this);\r\n        this.onShowModeChange = this.onShowModeChange.bind(this);\r\n        this.handleTitleMouseOut = this.handleTitleMouseOut.bind(this);\r\n        this.handleTitleMouseMove = this.handleTitleMouseMove.bind(this);\r\n        this.handleGlyphMouseMove = this.handleGlyphMouseMove.bind(this);\r\n        this.handleGlyphMouseOut = this.handleGlyphMouseOut.bind(this);\r\n        this.state = {\r\n            showMode: 1\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    componentDidUpdate(prevProps:ProjectionViewProps, prevState:ProjectionViewState){\r\n        if(!compareSelectedNodeIdList(prevProps.selectedNodeIdList,this.props.selectedNodeIdList) || \r\n                prevProps.dataPackage[\"mode\"]!==this.props.dataPackage[\"mode\"] ){\r\n            //this.onSelectedNodeListChange(this.props.selectedNodeIdList);\r\n            this.renderD3();\r\n            return;\r\n        }else{\r\n            if( prevProps.showMode !== this.props.showMode || prevProps.layoutMode !== this.props.layoutMode){\r\n                this.renderD3();\r\n                return;\r\n            }\r\n        }\r\n        if(prevProps.enableLegends !== this.props.enableLegends){\r\n            this.renderInViewLegend();\r\n            return;\r\n        }\r\n        //if(!compareSelectedNodeIdList(prevProps.highlightNodeIdList, this.props.highlightNodeIdList)){\r\n            //this.updateHighlightStatus();\r\n        //}\r\n        \r\n    }\r\n    \r\n    public onSelectedNodeListChange(selectedNodeList:any, highlightNodeIdList:any, showMode:number){\r\n        this.props.onChangeHighLightNodeIdList(selectedNodeList, highlightNodeIdList, showMode);\r\n    } \r\n    public onHoveredNodeListChange(rawNodeList:any, hoveredNodeIdList:any, showMode:number){\r\n        this.props.onChangeHoveredNodeIdList(rawNodeList, hoveredNodeIdList, showMode);\r\n    } \r\n    public hiddenTooltip(){\r\n        d3.select(\"#tooltip_proj\").style('opacity', 0);\r\n    }\r\n    public handleTitleMouseOut(e:any){\r\n       this.hiddenTooltip();\r\n    }\r\n    public handleGlyphMouseOut(e:any){\r\n       this.hiddenTooltip();\r\n       let showMode = this.props.showMode;\r\n       this.onHoveredNodeListChange([], [], showMode);\r\n\r\n    }\r\n    public constructPathOnNodeList(nodelist:any){\r\n        let path = \"\";\r\n        for(let i = 0; i<nodelist.length;i++){\r\n            let note = \"M\";\r\n            if(i>0){\r\n                note = \"L\"\r\n            }\r\n            path = path+note+nodelist[i][0]+\" \"+nodelist[i][1]+\" \";\r\n        }\r\n        return path;\r\n\r\n    }\r\n    public getArc(radius:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(radius*2);\r\n    }\r\n    \r\n    public getVariableArc(radius:number, outer_radius:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(outer_radius);\r\n    }\r\n    public getArcConf(radius:number, stroke_width:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(stroke_width+radius);\r\n    }\r\n    public getSizeScale(size:number){\r\n        return Math.sqrt(1+Math.log(size)) ; \r\n    }\r\n    /**\r\n     * Render Glyph GT+3PT\r\n     * @param nodes \r\n     * @param node_enter \r\n     * @param radius_gap \r\n     * @param radius \r\n     * @param scale \r\n     */\r\n    public renderGlyphGT3PT(nodes:any,node_enter:any,radius_gap:number,radius:number,additional_info:any,scale:number=1,enable_size:boolean=false){\r\n        // 1 -> ground truth label / prediction label\r\n        let getArc = this.getArc;\r\n        let getArcConf = this.getArcConf;\r\n        let getSizeScale = this.getSizeScale;\r\n        let inner_radius = radius - radius_gap;\r\n        var outer_circles_enter = node_enter.append(\"circle\").attr(\"class\",\"proj_outer_circle\");\r\n        var outer_circles = nodes.select(\"circle.proj_outer_circle\");\r\n        var outer_circles_enter_update = outer_circles_enter.merge(outer_circles);\r\n        let pie_name = additional_info[\"pie_name\"];\r\n        let key_model_name = pie_name[0];\r\n        let fill_color_index = pie_name.length + 1;\r\n        let models_length = pie_name.length;\r\n        // TODOS:\r\n        outer_circles_enter_update//.transition(trans)\r\n                    .attr(\"r\", function(d:any){\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                        return radius*scale*s_scale*2;\r\n                    })\r\n                    .attr(\"fill\", function(d:any) { return d.data.Color[fill_color_index]; });\r\n        /*\r\n        var arc_data = [{\r\n            \"index\":0,\r\n            \"value\":1/3\r\n        }, {\r\n            \"index\":1,\r\n            \"value\":1/3\r\n        }, {\r\n            \"index\":2,\r\n            \"value\":1/3\r\n        }];*/\r\n        var arc_data:any = [];\r\n        for(let i = 0; i<models_length; i++){\r\n            arc_data.push({\r\n                \"index\":i,\r\n                \"value\":1/models_length\r\n            })\r\n        }\r\n        let startAngle = -180 / models_length;\r\n        var ori_arcs = d3.pie()\r\n        .startAngle((startAngle/180) * Math.PI)\r\n        .endAngle((2+startAngle/180) * Math.PI)\r\n        .value(function(a:any){\r\n            return a.value;\r\n        })\r\n        .sort(function(a:any, b:any) {\r\n            return a.index<b.index;\r\n        });\r\n        var arcs = ori_arcs(arc_data);\r\n        let overall_background = [];\r\n        for (let i = 0; i < models_length; i++){\r\n            let background_enter = node_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n            let background = nodes.select(\"path.arc_\"+i);\r\n            let background_enter_update  = background_enter.merge(background);\r\n            background_enter_update\r\n            .style(\"fill\", function(d:any){\r\n                return d.data.Color[i+1]\r\n            })\r\n            .style(\"stroke\",\"#bbb\")\r\n            .style(\"stroke-width\",1)\r\n            .attr(\"d\", function(d:any){\r\n                let s_scale = 1;\r\n                if(enable_size){\r\n                    s_scale = getSizeScale(d.data.size);\r\n                }\r\n                return getArc(radius*scale*s_scale)(arcs[i])\r\n            });\r\n            overall_background.push(background_enter_update);\r\n\r\n        }\r\n\r\n        var ori_arcs_conf = d3.pie()\r\n        .startAngle((0/180) * Math.PI)\r\n        .endAngle((2-0/180) * Math.PI)\r\n        .value(function(a:any){\r\n            return a.value;\r\n        })\r\n        .sort(function(a:any, b:any) {\r\n            return a.index<b.index;\r\n        });\r\n\r\n        let overall_background_conf = [];\r\n        let outer_radius = 2*radius + 2;\r\n        let stroke_width = 1;\r\n        for (let i = 3; i < 5; i++){\r\n            let background_enter = node_enter.append(\"path\").attr(\"class\",\"carc_\"+i)\r\n            let background = nodes.select(\"path.carc_\"+i);\r\n            let background_enter_update  = background_enter.merge(background);\r\n            background_enter_update\r\n            .style(\"fill\", function(d:any){\r\n                if(i===3){\r\n                    return \"#000\";\r\n                }else if(i===4){\r\n                    return \"#fff\";\r\n                }\r\n                //return getCoraNodeColor(i,2);\r\n            })\r\n            .attr(\"d\", function(d:any){\r\n                var arc_data =[\r\n                    {\r\n                        \"index\":0,\r\n                        \"value\":d.data[key_model_name+\"_Confidence\"]\r\n                    },\r\n                    {\r\n                        \"index\":1,\r\n                        \"value\":1 - d.data[key_model_name+\"_Confidence\"]\r\n                    }\r\n                ] ;\r\n                \r\n                \r\n                var arcs = ori_arcs_conf(arc_data);\r\n                let s_scale = 1;\r\n                if(enable_size){\r\n                    s_scale = getSizeScale(d.data.size);\r\n                }\r\n                return getArcConf(outer_radius*scale*s_scale, stroke_width*scale*s_scale)(arcs[i-3])\r\n            });\r\n            overall_background_conf.push(background_enter_update);\r\n\r\n        }\r\n        var inner_circles_enter = node_enter.append(\"circle\").attr(\"class\",\"inner_circle\");\r\n        var inner_circles = nodes.select(\"circle.inner_circle\");\r\n        var inner_circles_enter_update = inner_circles_enter.merge(inner_circles);\r\n        \r\n        inner_circles_enter_update//.transition(trans)\r\n        .attr(\"r\", function(d:any){\r\n            let s_scale = 1;\r\n            if(enable_size){\r\n                s_scale = getSizeScale(d.data.size);\r\n            }\r\n            return inner_radius*scale*s_scale;\r\n        })\r\n        .attr(\"fill\", function(d:any) { return d.data.Color[0]; });\r\n        \r\n    }\r\n    /**\r\n     * Render Legend GT + 3PT\r\n     * @param legend_svg \r\n     * @param refresh_number \r\n     * @param radius_gap \r\n     * @param radius \r\n     */\r\n    public renderLegendGT3PT(legend_svg:any, refresh_number:number, radius_gap:number, radius:number, legend_configuration:any, additional_info:any){\r\n        let constructPathOnNodeList = this.constructPathOnNodeList;\r\n        let pie_name = additional_info[\"pie_name\"];\r\n        let key_model_name = pie_name[0]\r\n        // Define Variable\r\n        let legend_x = legend_configuration[\"legend_x\"];\r\n        let legend_y = legend_configuration[\"legend_y\"];\r\n        let legned_scale = legend_configuration[\"legend_scale\"];\r\n        let legend_Color = legend_configuration[\"legend_Color\"];\r\n        \r\n        let legend_conf = legend_configuration[\"legend_conf\"];\r\n        let key_model_confidence = key_model_name+\"_Confidence\";\r\n        \r\n        let models_length = pie_name.length;\r\n        let last_fill_index = models_length + 1;\r\n        let legend_data_point:any = {\r\n            \"data\":{\r\n                \"Color\": legend_Color,\r\n                \"Data_id\": refresh_number\r\n            }\r\n        }\r\n        legend_data_point[\"data\"][key_model_confidence] = legend_conf;\r\n        let legend_text_setting = legend_configuration[\"legend_text_setting\"]\r\n        \r\n        let outer_radius = 2*radius + 2;\r\n        let stroke_width = 1;\r\n        \r\n        let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                        .data([legend_data_point], function(d:any){\r\n                            return d.data.Data_id;\r\n                        });\r\n            legend_pie_all.exit().remove();\r\n        let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                        .attr(\"class\", \"legend_pie\")\r\n                        .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n        this.renderGlyphGT3PT(legend_pie_all, legend_pie, radius_gap, radius, additional_info, legned_scale);\r\n        \r\n\r\n        // ----- Render Legend Text\r\n        for(let i = 0; i<models_length; i++){\r\n            //overall_background.push(background_enter_update);\r\n\r\n            let start_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 1.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))]\r\n            let middle_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n\r\n            if(i===1){\r\n                middle_point= [4.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n            }else{\r\n\r\n            }\r\n            let end_point = [4.5*legned_scale*radius*Math.sin((+60)/180*Math.PI) ,4.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n\r\n            legend_pie.append(\"path\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                .attr(\"fill\", \"none\")\r\n            legend_pie.append(\"text\")\r\n                .attr(\"x\", end_point[0])\r\n                .attr(\"y\", end_point[1])\r\n                .attr(\"text-anchor\", legend_text_setting[i+1][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[i+1][\"dominant-baseline\"])\r\n                .text(legend_text_setting[i+1][\"text\"])\r\n        }\r\n        \r\n    \r\n        let gt_x = 4.5*legned_scale*radius*Math.sin((+60)/180*Math.PI);\r\n        let gt_y = 4.5*legned_scale*radius*(-Math.cos((+60)/180*Math.PI))+legend_text_setting[0][\"y_offset\"];\r\n        legend_pie.append(\"line\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"x1\", 0)\r\n                .attr(\"y1\", 0)\r\n                .attr(\"x2\", gt_x)\r\n                .attr(\"y2\", gt_y);\r\n        legend_pie.append(\"text\")\r\n                .attr(\"x\", gt_x)\r\n                .attr(\"y\", gt_y)\r\n                .attr(\"text-anchor\", legend_text_setting[0][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[0][\"dominant-baseline\"])\r\n                .text(legend_text_setting[0][\"text\"])\r\n        gt_x = 3.5*legned_scale*radius*Math.sin((+90)/180*Math.PI);\r\n        gt_y = 3.5*legned_scale*radius*(-Math.cos((+90)/180*Math.PI))+legend_text_setting[last_fill_index][\"y_offset\"];\r\n        legend_pie.append(\"line\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"x1\", outer_radius*legned_scale + (stroke_width/2)*legned_scale)\r\n                .attr(\"y1\", 0)\r\n                .attr(\"x2\", gt_x)\r\n                .attr(\"y2\", gt_y);\r\n        legend_pie.append(\"text\")\r\n                .attr(\"x\", gt_x)\r\n                .attr(\"y\", gt_y)\r\n                .attr(\"text-anchor\", legend_text_setting[last_fill_index][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[last_fill_index][\"dominant-baseline\"])\r\n                .text(legend_text_setting[last_fill_index][\"text\"])\r\n        \r\n    }\r\n    public renderGlyphDEGCN(nodes:any,node_enter:any,radius:number,additional_info:any, scale:number=1,enable_size:boolean=false){\r\n        //let max_shortest_path_distance = additional_info[\"max_shortest_path_distance\"] + 1;\r\n        let getSizeScale = this.getSizeScale;\r\n        let max_degree = additional_info[\"max_degree\"];\r\n        function getXY(value:number, i:number, nclass:number, polyradius:number){\r\n            return [value*polyradius*Math.sin(i/nclass*Math.PI*2), -value*polyradius*Math.cos(i/nclass*Math.PI*2)];\r\n        }\r\n        function constructPointStrFromData(dataValues:any, polyradius:number){\r\n            let coordinates:any[] = [];\r\n            let nclass = dataValues.length;\r\n            for(let i = 0 ; i<nclass; i ++){\r\n                coordinates.push(getXY(dataValues[i], i, nclass, polyradius));\r\n            }\r\n            let pointstr = \"\";\r\n            for(var pti=0;pti<coordinates.length;pti++){\r\n                pointstr=pointstr+coordinates[pti][0]+\",\"+coordinates[pti][1]+\" \";\r\n              }\r\n            return pointstr;\r\n        }\r\n        function constructPointStr(d:any){\r\n            let dataValues:any[] = [];\r\n           let degree = d.data.Real_Degree;\r\n            dataValues.push(degree / max_degree);\r\n            dataValues.push(d.data.CN_consistency.cgt_ngt);\r\n            dataValues.push(d.data.CN_consistency.cgt_npt);\r\n            dataValues.push(d.data.CN_consistency.cpt_ngt);\r\n            dataValues.push(d.data.CN_consistency.cpt_npt);\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            let polyradius = radius * 2 * scale*s_scale;\r\n\r\n            return constructPointStrFromData(dataValues, polyradius);\r\n        }\r\n        var outer_circles_enter = node_enter.append(\"circle\").attr(\"class\",\"proj_outer_circle\");\r\n        var outer_circles = nodes.select(\"circle.proj_outer_circle\");\r\n        var outer_circles_enter_update = outer_circles_enter.merge(outer_circles);\r\n        outer_circles_enter_update//.transition(trans)\r\n                    .attr(\"r\", function(d:any){\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                        return radius*2*scale*s_scale\r\n                    })\r\n                    .attr(\"fill\", function(d:any) { return d.data.Color[d.data.Color.length-1]; });\r\n        /*var outer_polygon_enter = node_enter.append(\"polygon\").attr(\"class\", \"sp_polygon_outer\");\r\n        var outer_polygons = nodes.select(\"polygon.sp_polygon_outer\");\r\n        var outer_polygon_enter_update = outer_polygon_enter.merge(outer_polygons);\r\n        outer_polygon_enter_update\r\n        .attr(\"points\",function(d:any){return constructPointStrFromData([1,1,1,1,1])})\r\n        .style(\"fill\", function(d:any){return d.data.Color[4];})\r\n        .style(\"stroke-width\",\"1.5px\")\r\n        .style(\"stroke\",\"#bbb\");*/\r\n        \r\n        for(let i = 0; i<5; i++){\r\n            \r\n            var bg_line_enter = node_enter.append(\"line\").attr(\"class\",\"background_line_\"+i);\r\n            var bg_lines = nodes.select(\"line.background_line_\"+i);\r\n            var bg_line_enter_update = bg_line_enter.merge(bg_lines);\r\n            bg_line_enter_update//.transition(trans)\r\n                        .attr(\"x1\", 0)\r\n                        .attr(\"y1\", 0)\r\n                        .attr(\"x2\", (d:any)=>{\r\n                            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                            let polyradius = radius * 2 * scale * s_scale;\r\n                            let XY = getXY(1,i,5,polyradius);\r\n                            return XY[0];\r\n                        })\r\n                        .attr(\"y2\", (d:any)=>{\r\n                            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                            let polyradius = radius * 2 * scale * s_scale;\r\n                            let XY = getXY(1,i,5,polyradius);\r\n                            return XY[1];\r\n                        })\r\n                        .style(\"stroke\", \"#bbb\")\r\n                        .style(\"stroke-width\", 2)\r\n                        .style(\"stroke-dasharray\",\"1,1\");\r\n        }\r\n        var polygon_enter = node_enter.append(\"polygon\").attr(\"class\",\"sp_polygon\");\r\n        var polygons = nodes.select(\"polygon.sp_polygon\");\r\n        var polygon_enter_update = polygon_enter.merge(polygons);\r\n        polygon_enter_update\r\n        .attr(\"points\",constructPointStr)\r\n        .style(\"fill\", function(d:any){return d.data.Color[0]})\r\n    }\r\n    public renderLegendDEGCN(legend_svg:any, refresh_number:number, radius:number, additional_info:any, legend_configuration:any){\r\n        let constructPathOnNodeList = this.constructPathOnNodeList;\r\n        let legend_x = legend_configuration[\"legend_x\"];\r\n        let legend_y = legend_configuration[\"legend_y\"];\r\n        let legend_scale = legend_configuration[\"legend_scale\"];\r\n        let legend_Color = legend_configuration[\"legend_Color\"];\r\n        let legend_text_setting = legend_configuration[\"legend_text_setting\"];\r\n        let legend_data_point:any = {\r\n            \"data\":{\r\n                \"Color\": legend_Color,\r\n                \"Data_id\": refresh_number,\r\n                \"Real_Degree\": legend_configuration[\"legend_degree\"],\r\n                \"CN_consistency\": legend_configuration[\"legend_CN_consistency\"]\r\n            }\r\n        }\r\n        let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                        .data([legend_data_point], function(d:any){\r\n                            return d.data.Data_id;\r\n                        });\r\n            legend_pie_all.exit().remove();\r\n        let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                        .attr(\"class\", \"legend_pie\")\r\n                        .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n        \r\n        \r\n        this.renderGlyphDEGCN(legend_pie_all, legend_pie, radius, additional_info, legend_scale);\r\n\r\n        // ----- Render Legend Text\r\n        for(let i = 0; i<5; i++){\r\n            let start_point = [2*legend_scale*radius*Math.sin((+72*i)/180*Math.PI), 2*legend_scale*radius*(-Math.cos((+72*i)/180*Math.PI))]\r\n            let middle_point = [2*legend_scale*radius*Math.sin((+72*i)/180*Math.PI), 4.5*legend_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n            let end_point = [4.5*legend_scale*radius*Math.sin((+72)/180*Math.PI) ,4.5*legend_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n            legend_pie.append(\"path\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                .attr(\"fill\", \"none\");\r\n            legend_pie.append(\"text\")\r\n                .attr(\"x\", end_point[0])\r\n                .attr(\"y\", end_point[1])\r\n                .attr(\"text-anchor\", legend_text_setting[i][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[i][\"dominant-baseline\"])\r\n                .text(legend_text_setting[i][\"text\"])\r\n        }\r\n\r\n    }\r\n\r\n    public renderGlyphP1SPD(nodes:any,node_enter:any,radius:number,rect_scale:number,num_class:number, scale:number=1,enable_size:boolean=false){\r\n        let rect_width = radius*rect_scale/2*scale;\r\n        let rect_height = radius*rect_scale*scale;\r\n        let getSizeScale = this.getSizeScale;\r\n        let constructPathOnNodeList = this.constructPathOnNodeList;\r\n        var outer_rects_enter = node_enter.append(\"rect\").attr(\"class\",\"gnn_outer_rects\");\r\n        var outer_rects = nodes.select(\"rect.gnn_outer_rects\");\r\n        var outer_rects_enter_update = outer_rects_enter.merge(outer_rects);\r\n        outer_rects_enter_update//.transition(trans)\r\n                    .attr(\"x\",(d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                        return -rect_width*s_scale;\r\n                    })\r\n                    .attr(\"y\",(d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                        return -rect_height / 2 * s_scale;\r\n                    } )\r\n                    .attr(\"width\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return s_scale * rect_width * 2\r\n                    })\r\n                    .attr(\"height\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return rect_height * s_scale;\r\n                    })\r\n                    .attr(\"fill\", function(d:any) { \r\n                        return d.data.Color[d.data.Color.length-1]; });\r\n                    //.style(\"stroke\",\"#bbb\")\r\n                    //.style(\"stroke-width\",1);\r\n        let rect_gap = 0.25;\r\n        let gnnrect_enter = node_enter.append(\"rect\").attr(\"class\",\"gnnrect\");\r\n        let gnnrects = nodes.select(\"rect.gnnrect\");\r\n        let gnnrect_enter_update = gnnrect_enter.merge(gnnrects);\r\n        gnnrect_enter_update\r\n        .attr(\"x\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            return -rect_width*s_scale;\r\n        })\r\n        .attr(\"y\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            return -rect_height / 2 * s_scale;\r\n        } )\r\n        .attr(\"width\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return s_scale * rect_width - rect_gap;\r\n        })\r\n        .attr(\"height\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return rect_height * s_scale;\r\n        })\r\n        .attr(\"fill\", function(d:any){return d.data.Color[1]});\r\n\r\n\r\n\r\n        //.style(\"stroke\",\"#bbb\")\r\n        //.style(\"stroke-width\",1);\r\n        for(let i = 0; i<num_class; i++){\r\n            let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n            let rects = nodes.select(\"rect.rect_\"+i);\r\n            let rect_enter_update = rect_enter.merge(rects);\r\n            rect_enter_update\r\n            .attr(\"x\", function(d:any){\r\n                return rect_gap\r\n            })\r\n            .attr(\"y\", function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                let culmulative_proportion = 0;\r\n                for(let j= 0 ; j<i; j++){\r\n                    culmulative_proportion = culmulative_proportion + d.data.Spd_node_info[j];\r\n                }\r\n                return s_scale*(culmulative_proportion*rect_height-rect_height / 2)\r\n            })\r\n            .attr(\"width\",function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                return rect_width*s_scale-rect_gap;\r\n            })\r\n            .attr(\"height\", function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                return s_scale*rect_height*d.data.Spd_node_info[i];\r\n            })\r\n            .attr(\"fill\", function(d:any){return getCoraNodeColor(i,2);})\r\n            ;\r\n        }\r\n        let line_enter = node_enter.append(\"path\").attr(\"class\",\"line_distance\");\r\n        let lines = nodes.select(\"path.line_distance\");\r\n        let line_enter_update = line_enter.merge(lines);\r\n        line_enter_update.attr(\"stroke\", \"#000\")\r\n                .attr(\"stroke-width\", \"2\")\r\n                .attr(\"d\", function(d:any){\r\n                    let dis:any = d.data.Transformed_Distance;\r\n                    let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                    let left = -(rect_width)*s_scale;\r\n                    let top = -(rect_height) / 2 * s_scale - 4;\r\n                    let width = 2*rect_width*s_scale\r\n                    let start_point = [left , top]\r\n                    if(dis>1){\r\n                        dis = 1;\r\n                    }else if(dis<0){\r\n                        dis = 0;\r\n                    }\r\n                    let end_point = [left + width * dis ,top];\r\n                    return constructPathOnNodeList([start_point,end_point])\r\n                })\r\n                .attr(\"fill\", \"none\")\r\n        let gnngap_enter = node_enter.append(\"rect\").attr(\"class\",\"gnngap\");\r\n        let gnngaps = nodes.select(\"rect.gnngap\");\r\n        let gnngap_enter_update = gnngap_enter.merge(gnngaps);\r\n        gnngap_enter_update\r\n        .attr(\"x\",(d:any)=>{\r\n            return -rect_gap;\r\n        })\r\n        .attr(\"y\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            return -rect_height / 2 * s_scale;\r\n        } )\r\n        .attr(\"width\", (d:any)=>{\r\n            return rect_gap*2;\r\n        })\r\n        .attr(\"height\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return rect_height * s_scale;\r\n        })\r\n        .attr(\"fill\", function(d:any){return \"#bbb\"});\r\n    }\r\n\r\n    /**\r\n     * Render Legend P1+SPD\r\n     * @param legend_svg \r\n     * @param refresh_number \r\n     * @param radius \r\n     */\r\n    public renderLegendP1SPD(legend_svg:any, refresh_number:number, radius:number, legend_configuration:any){\r\n        let constructPathOnNodeList = this.constructPathOnNodeList;\r\n        let legend_x = legend_configuration[\"legend_x\"];\r\n        let legend_y = legend_configuration[\"legend_y\"];\r\n        let legned_scale = legend_configuration[\"legend_scale\"];\r\n        let legend_spd_info = legend_configuration[\"legend_spd_info\"];\r\n        let legend_transformed_distance = legend_configuration[\"legend_transformed_distance\"];\r\n        let legend_num_class = legend_spd_info.length;\r\n        let legend_rect_scale = 3;\r\n        let legend_Color = legend_configuration[\"legend_Color\"];\r\n        let legend_text_setting = legend_configuration[\"legend_text_setting\"];\r\n        let legend_data_point:any = {\r\n            \"data\":{\r\n                \"Color\": legend_Color,\r\n                \"Data_id\": refresh_number,\r\n                \"Spd_node_info\": legend_spd_info,\r\n                \"Transformed_Distance\":legend_transformed_distance\r\n            }\r\n        }\r\n        let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                .data([legend_data_point], function(d:any){\r\n                    return d.data.Data_id;\r\n                });\r\n        legend_pie_all.exit().remove();\r\n        let legend_pie = legend_pie_all.enter().append(\"g\")\r\n            .attr(\"class\", \"legend_pie\")\r\n            .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n        this.renderGlyphP1SPD(legend_pie_all, legend_pie, radius, legend_rect_scale, legend_num_class, legned_scale);\r\n        let rect_width = radius*legend_rect_scale/2*legned_scale;\r\n        let rect_height = radius*legend_rect_scale*legned_scale;\r\n        \r\n        \r\n        // ----- Render Legend Text\r\n        for(let i = 0; i<3; i++){\r\n            let start_point:any=[], middle_point:any=[], end_point:any=[];\r\n            let point_list:any[] = [];\r\n            if(i===0){\r\n                let middle_point_2:any = [];\r\n                start_point = [-0.5*rect_width, 0];\r\n                middle_point = [-1.3*rect_width, 0];\r\n                middle_point_2 = [-1.3*rect_width, -1.5*rect_height]\r\n                end_point = [1.5*rect_width,-1.5*rect_height];\r\n                \r\n                point_list = [start_point,middle_point, middle_point_2, end_point];\r\n            }else if(i===1){\r\n                start_point = [+0.5*rect_width, 0];\r\n                middle_point = [+0.5*rect_width, +0.1*rect_height];\r\n                end_point = [1.5*rect_width,+0.1*rect_height];\r\n                point_list = [start_point,middle_point, end_point];\r\n            }else if(i===2){\r\n                start_point = [0, -0.5*rect_height-1];\r\n                middle_point = [0, -0.5*rect_height-4];\r\n                end_point = [1.5*rect_width,-0.5*rect_height-4];\r\n                point_list = [start_point,middle_point, end_point];\r\n            }\r\n\r\n            legend_pie.append(\"path\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"d\", constructPathOnNodeList(point_list))\r\n                .attr(\"fill\", \"none\")\r\n            let text = legend_pie.append(\"text\")\r\n                .attr(\"x\", end_point[0])\r\n                .attr(\"y\", end_point[1])\r\n                .attr(\"text-anchor\", legend_text_setting[i][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[i][\"dominant-baseline\"])\r\n                .text(legend_text_setting[i][\"text\"]);\r\n            this.wrapLines(text);\r\n        }\r\n    }\r\n    /*public renderGlyphP1KFS(nodes:any,node_enter:any,radius:number,rect_scale:number, scale:number=1,enable_size:boolean=false){\r\n        let rect_width = radius*rect_scale / 2* scale;\r\n        let rect_height = radius*rect_scale*scale;\r\n        let getSizeScale = this.getSizeScale;\r\n        var outer_rects_enter = node_enter.append(\"rect\").attr(\"class\",\"gnn_outer_rects\");\r\n        var outer_rects = nodes.select(\"rect.gnn_outer_rects\");\r\n        var outer_rects_enter_update = outer_rects_enter.merge(outer_rects);\r\n        outer_rects_enter_update//.transition(trans)\r\n                    .attr(\"x\",(d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return -rect_width*s_scale;\r\n                    })\r\n                    .attr(\"y\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return -rect_height / 2 *s_scale\r\n                    })\r\n                    .attr(\"width\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return rect_width * 2*s_scale\r\n                    })\r\n                    .attr(\"height\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return rect_height*s_scale\r\n                    })\r\n                    .attr(\"fill\", function(d:any) { return d.data.Color[4]; })\r\n                    .style(\"stroke\",\"#bbb\")\r\n                    .style(\"stroke-width\",1);\r\n        \r\n\r\n\r\n        let gnnrect_enter = node_enter.append(\"rect\").attr(\"class\",\"gnnrect\");\r\n        let gnnrects = nodes.select(\"rect.gnnrect\");\r\n        let gnnrect_enter_update = gnnrect_enter.merge(gnnrects);\r\n        gnnrect_enter_update\r\n        .attr(\"x\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return -rect_width*s_scale;\r\n        })\r\n        .attr(\"y\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return -rect_height / 2 *s_scale\r\n        })\r\n        .attr(\"width\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return rect_width*s_scale\r\n        })\r\n        .attr(\"height\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return rect_height*s_scale\r\n        })\r\n        .attr(\"fill\", function(d:any){return d.data.Color[1]})\r\n        .style(\"stroke\",\"#bbb\")\r\n        .style(\"stroke-width\",1);\r\n        let topk = 5;\r\n        let individual_proportion = 1/ topk;\r\n        for(let i = 0; i<topk; i++){\r\n            let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n            let rects = nodes.select(\"rect.rect_\"+i);\r\n            let rect_enter_update = rect_enter.merge(rects);\r\n            rect_enter_update\r\n            .attr(\"x\", function(d:any){\r\n                return 0\r\n            })\r\n            .attr(\"y\", function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                let culmulative_proportion = individual_proportion*(i);\r\n                return s_scale*(culmulative_proportion*rect_height-rect_height / 2)\r\n            })\r\n            .attr(\"width\",function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                let max_feature_similarity = 0;\r\n\r\n                for(let j = 0; j<topk;j++){\r\n                    let sim = d.data.Topkfs_nodes[j].anchor_similarity;\r\n                    if(max_feature_similarity<sim){\r\n                        max_feature_similarity = sim;\r\n                    }\r\n                }\r\n                let target_sim = d.data.Topkfs_nodes[i].anchor_similarity;\r\n                if(max_feature_similarity>0){\r\n                    target_sim = target_sim / max_feature_similarity;\r\n                }\r\n                //return rect_width*d.data.Spd_node_info[i];\r\n                return rect_width * target_sim * s_scale;\r\n            })\r\n            .attr(\"height\", function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                return rect_height*individual_proportion*s_scale;\r\n            })\r\n            .attr(\"fill\", function(d:any){\r\n                let node_info = d.data.Topkfs_nodes;\r\n                let label = node_info[i].anchor_label;\r\n                return getCoraNodeColor(label,2);\r\n            });\r\n        }\r\n    }*/\r\n\r\n    public renderGlyphP1KFS(nodes:any,node_enter:any,radius:number,rect_scale:number,num_class:number, scale:number=1,enable_size:boolean=false){\r\n        let rect_width = radius*rect_scale/2*scale;\r\n        let rect_height = radius*rect_scale*scale;\r\n        let getSizeScale = this.getSizeScale;\r\n\r\n        var outer_rects_enter = node_enter.append(\"rect\").attr(\"class\",\"gnn_outer_rects\");\r\n        var outer_rects = nodes.select(\"rect.gnn_outer_rects\");\r\n        var outer_rects_enter_update = outer_rects_enter.merge(outer_rects);\r\n        outer_rects_enter_update//.transition(trans)\r\n                    .attr(\"x\",(d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                        return -rect_width*s_scale;\r\n                    })\r\n                    .attr(\"y\",(d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n                        return -rect_height / 2 * s_scale;\r\n                    } )\r\n                    .attr(\"width\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return s_scale * rect_width * 2\r\n                    })\r\n                    .attr(\"height\", (d:any)=>{\r\n                        let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                        return rect_height * s_scale;\r\n                    })\r\n                    .attr(\"fill\", function(d:any) { \r\n                        \r\n                        return d.data.Color[d.data.Color.length - 1]; });\r\n                   // .style(\"stroke\",\"#bbb\")\r\n                   // .style(\"stroke-width\",1);\r\n\r\n        let gnnrect_enter = node_enter.append(\"rect\").attr(\"class\",\"gnnrect\");\r\n        let gnnrects = nodes.select(\"rect.gnnrect\");\r\n        let gnnrect_enter_update = gnnrect_enter.merge(gnnrects);\r\n        gnnrect_enter_update\r\n        .attr(\"x\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            return -rect_width*s_scale;\r\n        })\r\n        .attr(\"y\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            return -rect_height / 2 * s_scale;\r\n        } )\r\n        .attr(\"width\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return s_scale * rect_width\r\n        })\r\n        .attr(\"height\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return rect_height * s_scale;\r\n        })\r\n        .attr(\"fill\", function(d:any){return d.data.Color[1]});\r\n        //.style(\"stroke\",\"#bbb\")\r\n        //.style(\"stroke-width\",1);\r\n        for(let i = 0; i<num_class; i++){\r\n            let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n            let rects = nodes.select(\"rect.rect_\"+i);\r\n            let rect_enter_update = rect_enter.merge(rects);\r\n            rect_enter_update\r\n            .attr(\"x\", function(d:any){\r\n                return 0\r\n            })\r\n            .attr(\"y\", function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                let culmulative_proportion = 0;\r\n                for(let j= 0 ; j<i; j++){\r\n                    culmulative_proportion = culmulative_proportion + d.data.Topkfs_node_info[j];\r\n                }\r\n                return s_scale*(culmulative_proportion*rect_height-rect_height / 2)\r\n            })\r\n            .attr(\"width\",function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                return rect_width*s_scale;\r\n            })\r\n            .attr(\"height\", function(d:any){\r\n                let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n                return s_scale*rect_height*d.data.Topkfs_node_info[i];\r\n            })\r\n            .attr(\"fill\", function(d:any){return getCoraNodeColor(i,2);})\r\n            ;\r\n        }\r\n        let rect_gap = 0.25;\r\n        let gnngap_enter = node_enter.append(\"rect\").attr(\"class\",\"gnngap\");\r\n        let gnngaps = nodes.select(\"rect.gnngap\");\r\n        let gnngap_enter_update = gnngap_enter.merge(gnngaps);\r\n        gnngap_enter_update\r\n        .attr(\"x\",(d:any)=>{\r\n            return -rect_gap;\r\n        })\r\n        .attr(\"y\",(d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1;\r\n            return -rect_height / 2 * s_scale;\r\n        } )\r\n        .attr(\"width\", (d:any)=>{\r\n            return rect_gap*2;\r\n        })\r\n        .attr(\"height\", (d:any)=>{\r\n            let s_scale = (enable_size)?getSizeScale(d.data.size):1; \r\n            return rect_height * s_scale;\r\n        })\r\n        .attr(\"fill\", function(d:any){return \"#bbb\"});\r\n\r\n\r\n    }\r\n    public wrapLines(text:any) {\r\n            \r\n        var words = text.text().split(\"\\n\").reverse(),\r\n          word,\r\n          lineNumber = 0,\r\n          lineHeight = text.node().getBoundingClientRect().height,\r\n          x = +text.attr('x'),\r\n          y = +text.attr('y'), tspan;\r\n          text.text(null)\r\n        //console.log(\"words\", words)\r\n        while (word = words.pop()) {\r\n          tspan = text.append('tspan').attr('x', x).attr('y', lineNumber * lineHeight + y).text(word);\r\n          lineNumber = lineNumber + 1;\r\n        }\r\n               \r\n      }\r\n    /**\r\n     * Render Legend P1+KFS\r\n     * @param legend_svg \r\n     * @param refresh_number \r\n     * @param radius \r\n     */\r\n    public renderLegendP1KFS(legend_svg:any, refresh_number:number, radius:number, legend_configuration:any){\r\n        let constructPathOnNodeList = this.constructPathOnNodeList;\r\n        let legend_x = legend_configuration[\"legend_x\"];\r\n        let legend_y =  legend_configuration[\"legend_y\"];\r\n        let legned_scale =  legend_configuration[\"legend_scale\"];\r\n        let legend_rect_scale = 3;\r\n        let legend_Color =  legend_configuration[\"legend_Color\"];\r\n        let legend_kfs_info = legend_configuration[\"legend_Topkfs_node_info\"];\r\n        let legend_num_class = legend_kfs_info.length;\r\n        let legend_data_point:any = {\r\n            \"data\":{\r\n                \"Color\": legend_Color,\r\n                \"Data_id\": refresh_number,\r\n                \"Topkfs_nodes\": legend_configuration[\"legend_Topkfs_nodes\"],\r\n                \"Topkfs_node_info\": legend_kfs_info\r\n            }\r\n        }\r\n        let legend_text_setting = legend_configuration[\"legend_text_setting\"];\r\n        let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                        .data([legend_data_point], function(d:any){\r\n                            return d.data.Data_id;\r\n                        });\r\n            legend_pie_all.exit().remove();\r\n        //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n\r\n        let legend_pie = legend_pie_all.enter().append(\"g\")\r\n            .attr(\"class\", \"legend_pie\")\r\n            .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\");\r\n        this.renderGlyphP1KFS(legend_pie_all, legend_pie, radius, legend_rect_scale, legend_num_class, legned_scale);\r\n        let rect_width = radius*legend_rect_scale / 2*legned_scale;\r\n        let rect_height = radius*legend_rect_scale*legned_scale;\r\n        \r\n        // Render Circle\r\n        \r\n        function wrapWord(text:any, width:any) {\r\n            \r\n              var words = text.text().split('').reverse(),\r\n                word,\r\n                line = [],\r\n                lineNumber = 0,\r\n                lineHeight = text.node().getBoundingClientRect().height,\r\n                x = +text.attr('x'),\r\n                y = +text.attr('y'),\r\n                tspan = text.text(null).append('tspan').attr('x', x).attr('y', y);\r\n              while (word = words.pop()) {\r\n                line.push(word);\r\n                const dash = lineNumber > 0 ? '-' : '';\r\n                tspan.text(dash + line.join(''));\r\n                if (tspan.node().getComputedTextLength() > width) {\r\n                  line.pop();\r\n                  tspan.text(line.join(''));\r\n                  line = [word];\r\n                  tspan = text.append('tspan').attr('x', x).attr('y', ++lineNumber * lineHeight + y).text(word);\r\n                }\r\n              }\r\n                     \r\n            }\r\n            \r\n        // ----- Render Legend Text\r\n        for(let i = 0; i<2; i++){\r\n            let start_point:any=[], middle_point:any=[], end_point:any=[];\r\n            if(i===0){\r\n                start_point = [-0.5*rect_width, 0]\r\n                middle_point = [-0.5*rect_width, -rect_height]\r\n                end_point = [1.5*rect_width,-rect_height]\r\n            }else if(i===1){\r\n                start_point = [+0.5*rect_width, 0]\r\n                middle_point = [+0.5*rect_width, 0]\r\n                end_point = [1.5*rect_width,0]\r\n            }\r\n\r\n            legend_pie.append(\"path\")\r\n                .attr(\"stroke\", legend_line_style[\"stroke\"])\r\n                .attr(\"stroke-width\", legend_line_style[\"stroke-width\"])\r\n                .style(\"stroke-dasharray\",legend_line_style[\"stroke-dasharray\"])\r\n                .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                .attr(\"fill\", \"none\")\r\n            let text = legend_pie.append(\"text\")\r\n                .attr(\"x\", end_point[0])\r\n                .attr(\"y\", end_point[1])\r\n                .attr(\"text-anchor\", legend_text_setting[i][\"text-anchor\"])\r\n                .attr(\"dominant-baseline\", legend_text_setting[i][\"dominant-baseline\"])\r\n                .text(legend_text_setting[i][\"text\"])\r\n            this.wrapLines(text);\r\n        }\r\n    }\r\n    public renderColorLegend(legend_color_svg:any, colorLegend:number){\r\n        console.log(\"Rendering Color Legend in Projection View...\", legend_color_svg, colorLegend);\r\n\r\n        let row_legend_color = legend_color_svg.selectAll(\"g.legend_row_color\")\r\n                                .data(colorLegend, function(d:any,i:any){\r\n                                    return d.text+\"_\"+i+\"_\"+d.color;\r\n                                });\r\n        let g_row_legend_color = row_legend_color.enter().append(\"g\")\r\n                            .attr(\"class\",\"legend_row_color\")\r\n                            .attr(\"transform\", function(d:any,i:any){\r\n                                return \"translate(10,\"+(10+i*20)+\")\";\r\n                            });\r\n            g_row_legend_color.append(\"circle\")\r\n                            .attr(\"r\", 5)\r\n                            .attr(\"fill\", function(d:any){\r\n                                return d.color;\r\n                            })\r\n                            \r\n            g_row_legend_color.append(\"text\")\r\n                            .attr(\"x\", 10)\r\n                            .attr(\"y\", 5)\r\n                            .text(function(d:any){\r\n                                return d.text;\r\n                            })\r\n                            \r\n            row_legend_color.exit().remove();\r\n     }\r\n    public renderLegend(data_package:any){\r\n        let configuration = data_package[\"configuration\"];\r\n        let tooltip_svg = data_package[\"tooltip_svg\"];\r\n        let additional_info = data_package[\"additional_info\"];\r\n        let e = data_package[\"e\"];\r\n        let showMode = data_package[\"showMode\"];\r\n        let legendMode = data_package[\"legendMode\"]; // 1 - hovering, 2 - static\r\n        // ---------------------- Render Glyph -------------------------- //\r\n        var radius = configuration[\"radius\"];\r\n        var radius_gap = 0.3;\r\n        var inner_radius = radius - radius_gap;\r\n        let legend_pie_x = 0;\r\n        let legend_pie_y = 0;\r\n        var top_svg = tooltip_svg;\r\n        var legend_svg = top_svg.append(\"g\")\r\n                .attr(\"width\", 100)\r\n                .attr(\"height\", 70)\r\n                .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n        e.refresh_number = e.refresh_number + 1;\r\n        var pie_name = additional_info[\"pie_name\"];\r\n        var key_model_name = pie_name[0];\r\n        //var P2_name = pie_name[1];\r\n        //var P3_name = pie_name[2];\r\n        if(showMode === 1){\r\n            let legend_x = 30;\r\n            let legend_y = 50;\r\n            if(legendMode === 2){\r\n                legend_x = 30;\r\n                legend_y = 50;\r\n            }\r\n            let legned_scale = 2;\r\n            let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#fff\"];\r\n            let legend_conf = 0.66;\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":\"Label\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+1\r\n                }\r\n            ]\r\n            let y_offset_list = [-7.5, 0, +19]\r\n            for(let i =0; i<pie_name.length; i++){\r\n                legend_text_setting.push({\r\n                    \"text\":pie_name[i],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":y_offset_list[i]\r\n                })\r\n            }\r\n            legend_text_setting.push({\r\n                \"text\":\"Conf.\",\r\n                \"text-anchor\":\"begin\",\r\n                \"dominant-baseline\":\"central\",\r\n                \"y_offset\":0\r\n            })\r\n\r\n            /** \"text\":\"Confidence\" */\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legned_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_conf\":legend_conf,\r\n                \"legend_text_setting\":legend_text_setting\r\n            }\r\n            this.renderLegendGT3PT(legend_svg, e.refresh_number, radius_gap, radius, legend_configuration, additional_info);\r\n            \r\n            // render color legend.\r\n            if(legendMode === 2){\r\n                let color_svg = data_package[\"color_svg\"];\r\n                let colorLegend = data_package[\"colorLegend\"];\r\n                this.renderColorLegend(color_svg, colorLegend);\r\n            }\r\n            \r\n\r\n\r\n        }else if(showMode === 2){\r\n            let legend_x = 30;\r\n            let legend_y = 45;\r\n            let legend_scale = 2;\r\n            let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#fff\"];\r\n            let legend_degree = 8;\r\n            let legend_CN_consistency = {\r\n                \"cgt_ngt\":0.8,\r\n                \"cgt_npt\":0.8,\r\n                \"cpt_ngt\":0.8,\r\n                \"cpt_npt\":0.8\r\n            }\r\n            let legend_additional_info = {\r\n                \"max_degree\":10\r\n            }\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":\"DEG\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+16\r\n                },\r\n                {\r\n                    \"text\":\"Label cons.\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+16\r\n                },\r\n                {\r\n                    \"text\":\"L. - p. cons.\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+0\r\n                },\r\n                {\r\n                    \"text\":\"P. - l. cons.\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+18\r\n                },\r\n                {\r\n                    \"text\":\"Pred. cons.\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":-22\r\n                },\r\n            ];\r\n            /**\r\n             * \"text\":\"DEG\"\r\n             * \"text\":\"Label consistency\"\r\n             * \"text\":\"Label - prediction consistency\",\r\n             * \"text\":\"Prediction - label consistency\",\r\n             * \"text\":\"Prediction consistency\",\r\n             */\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legend_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_text_setting\":legend_text_setting,\r\n                \"legend_degree\":legend_degree,\r\n                \"legend_CN_consistency\":legend_CN_consistency\r\n            }\r\n            this.renderLegendDEGCN(legend_svg, e.refresh_number, radius, legend_additional_info, legend_configuration);\r\n        }else if(showMode === 3){\r\n            let legend_x = 20;\r\n            let legend_y = 40;\r\n            if(legendMode === 2){\r\n                legend_x = 30;\r\n                legend_y = 50;\r\n            }\r\n            let legend_scale = 2;\r\n            let legend_spd_info = [0, 0.7, 0.2, 0.1];\r\n            let legend_transformed_distance = 0.5;\r\n            let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#fff\"];\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":key_model_name,\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":\"Near. train. \\n label dist.\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":\"Closeness\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                }\r\n            ];\r\n            /**\r\n             * Nearest training nodes \\n label distribution\r\n             * \"text\":\"Closeness\",\r\n             */\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legend_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_text_setting\":legend_text_setting,\r\n                \"legend_spd_info\":legend_spd_info,\r\n                \"legend_transformed_distance\":legend_transformed_distance\r\n\r\n            }\r\n            this.renderLegendP1SPD(legend_svg, e.refresh_number, radius, legend_configuration);\r\n        }else if(showMode === 4){\r\n            let legend_x = 20;\r\n            let legend_y = 30;\r\n            if(legendMode === 2){\r\n                legend_x = 30;\r\n                legend_y = 50;\r\n            }\r\n            let legend_scale = 2;\r\n            let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\",\"#fff\"];\r\n            let legend_Topkfs_nodes = [\r\n                {\r\n                    \"anchor_label\":0,\r\n                    \"anchor_similarity\":1\r\n                },\r\n                {\r\n                    \"anchor_label\":1,\r\n                    \"anchor_similarity\":0.9\r\n                },\r\n                {\r\n                    \"anchor_label\":2,\r\n                    \"anchor_similarity\":0.8\r\n                },\r\n                {\r\n                    \"anchor_label\":3,\r\n                    \"anchor_similarity\":0.7\r\n                },\r\n                {\r\n                    \"anchor_label\":4,\r\n                    \"anchor_similarity\":0.6\r\n                },\r\n            ]\r\n            let legend_Topkfs_node_info = [0.2, 0.2, 0.2, 0.2, 0.2];\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":key_model_name,\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":\"Top-k. feat. \\n train. l. dist.\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                }\r\n            ];\r\n            /**\r\n             * Top-k similar feature \\n training nodes label distribution\r\n             */\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legend_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_text_setting\":legend_text_setting,\r\n                \"legend_Topkfs_nodes\":legend_Topkfs_nodes,\r\n                \"legend_Topkfs_node_info\":legend_Topkfs_node_info\r\n\r\n            }\r\n            this.renderLegendP1KFS(legend_svg, e.refresh_number, radius, legend_configuration);\r\n        }\r\n    }\r\n    public handleTitleMouseMove(e:any, configuration:any, additional_info:any){\r\n        //console.log(\"handleTitleMouseMove\",e);\r\n        var xy:any;\r\n        \r\n        //xy = d3.mouse(this);\r\n        xy = [d3.event.pageX, d3.event.pageY];\r\n        \r\n        let svgWidth = 100;\r\n        let svgHeight = 100;\r\n        let showMode = this.props.showMode;\r\n        if(showMode === 1){\r\n            svgWidth = 190;\r\n            svgHeight = 100;\r\n        }else if(showMode === 2){\r\n            svgWidth = 300;\r\n            svgHeight = 100;\r\n        }else if(showMode === 3){\r\n            svgWidth = 210;\r\n            svgHeight = 60+10;\r\n        }else if(showMode === 4){\r\n            svgWidth = 280;\r\n            svgHeight = 60;\r\n        }\r\n        var tooltip_proj = d3.select('#tooltip_proj')\r\n                            .style('opacity', 0.95)\r\n                            .style('top', (xy[1] - svgHeight) + 'px')\r\n                            .style('left', (xy[0] + 10) + 'px')\r\n        ;\r\n        tooltip_proj.selectAll(\"*\").remove();\r\n        var tooltip_svg = tooltip_proj.append(\"svg\")\r\n        .attr(\"width\", svgWidth)\r\n        .attr(\"height\", svgHeight);\r\n\r\n        var data_package = {\r\n            \"configuration\":configuration,\r\n            \"tooltip_svg\":tooltip_svg,\r\n            \"additional_info\":additional_info,\r\n            \"e\": e,\r\n            \"showMode\": showMode,\r\n            \"legendMode\": 1\r\n        }\r\n        this.renderLegend(data_package);\r\n        \r\n    }\r\n    public handleGlyphMouseMove(e:any, configuration:any, additional_info:any){\r\n        //console.log(\"handleGlyphMouseMove\",d3.select(e).data());\r\n        var xy:any;\r\n        var data_point = d3.select(e).data()[0][\"data\"];\r\n        //xy = d3.mouse(this);\r\n        xy = [d3.event.pageX, d3.event.pageY];\r\n        \r\n        let svgWidth = 100;\r\n        let svgHeight = 100;\r\n        let showMode = this.props.showMode;\r\n        let spd_desc_info = \"\";\r\n        let kfs_desc_info = \"\";\r\n        if(showMode === 1){\r\n            svgWidth = 200+15;\r\n            svgHeight = 100;\r\n        }else if(showMode === 2){\r\n            svgWidth = 330;\r\n            svgHeight = 100;\r\n        }else if(showMode === 3){\r\n            svgWidth = 210+5;\r\n            svgHeight = 60+10;\r\n            let legend_spd_info = data_point[\"Spd_node_info\"];\r\n            for(let i = 0 ; i<legend_spd_info.length; i++){\r\n                if(legend_spd_info[i]===0){\r\n\r\n                }else{\r\n                    spd_desc_info = spd_desc_info + \"\\nLabel \"+i+\":\"+legend_spd_info[i].toFixed(2);\r\n                    svgHeight = svgHeight + 20;\r\n                }\r\n            }\r\n        }else if(showMode === 4){\r\n            svgWidth = 280;\r\n            svgHeight = 60;\r\n            let legend_kfs_info = data_point[\"Topkfs_node_info\"];\r\n            for(let i = 0 ; i<legend_kfs_info.length; i++){\r\n                if(legend_kfs_info[i]===0){\r\n\r\n                }else{\r\n                    kfs_desc_info = kfs_desc_info + \"\\nLabel \"+i+\":\"+legend_kfs_info[i].toFixed(2);\r\n                    svgHeight = svgHeight + 20;\r\n                }\r\n            }\r\n            /*let legend_kfs_info = data_point[\"Topkfs_nodes\"];\r\n            for(let i = 0 ; i<legend_kfs_info.length; i++){\r\n                let anchor = legend_kfs_info[i];\r\n                //ID:\"+anchor[\"anchor_id\"]+\" \r\n                kfs_desc_info = kfs_desc_info + \"\\nLabel:\"+anchor[\"anchor_label\"]+\" Similarity:\"+anchor[\"anchor_similarity\"].toFixed(2);\r\n                svgHeight = svgHeight + 20;\r\n                \r\n            }*/\r\n        }\r\n        svgHeight = svgHeight + 20;\r\n        let x_coord = xy[1] - svgHeight;\r\n        let y_coord = xy[0] + 10;\r\n        let opacity = 0.95;\r\n        if(showMode === 4){\r\n            y_coord = xy[0] - 10 - svgWidth;\r\n        }\r\n\r\n        var tooltip_proj = d3.select('#tooltip_proj')\r\n                            .style('opacity', opacity)\r\n                            .style('top', (x_coord) + 'px')\r\n                            .style('left', (y_coord) + 'px')\r\n        ;\r\n        tooltip_proj.selectAll(\"*\").remove();\r\n        var tooltip_svg = tooltip_proj.append(\"svg\")\r\n        .attr(\"width\", svgWidth)\r\n        .attr(\"height\", svgHeight);\r\n        \r\n        // ---------------------- Render Glyph -------------------------- //\r\n        var radius = configuration[\"radius\"];\r\n        var radius_gap = 0.3;\r\n        var inner_radius = radius - radius_gap;\r\n        let legend_pie_x = 0;\r\n        let legend_pie_y = 20;\r\n        var top_svg = tooltip_svg;\r\n        // ---------------------- Render Meta Text ---------------------- //\r\n        //console.log(data_point);\r\n        let meta_text = \"\";\r\n        if(data_point[\"size\"] === 1){\r\n            meta_text = \"The id of this node:\"+data_point[\"raw_id_list\"][0];\r\n        }else{\r\n            meta_text = \"The size of this cluster:\"+data_point[\"size\"];\r\n        }\r\n        top_svg.append(\"text\")\r\n        .attr(\"x\",10)\r\n        .attr(\"y\",5)\r\n        .attr(\"text-anchor\",\"start\")\r\n        .attr(\"dominant-baseline\",\"hanging\")\r\n        .text(meta_text);\r\n\r\n        // text-anchor=\"start\"\r\n        // dominant-baseline=\"hanging\"\r\n        var legend_svg = top_svg.append(\"g\")\r\n                .attr(\"width\", 100)\r\n                .attr(\"height\", 70)\r\n                .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n        e.refresh_number = e.refresh_number + 1;\r\n        \r\n        var pie_name = additional_info[\"pie_name\"];\r\n        var key_model_name = pie_name[0];\r\n        //var P2_name = pie_name[1];\r\n        //var P3_name = pie_name[2];\r\n        if(showMode === 1){\r\n            let legend_x = 30;\r\n            let legend_y = 50;\r\n            let legned_scale = 2;\r\n            let legend_Color = data_point[\"Color\"];\r\n            let legend_conf = data_point[key_model_name+\"_Confidence\"];\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":\"Label:\"+data_point[\"Ground_Truth_Label\"],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+1\r\n                }\r\n            ]\r\n            let y_offset_list = [-7.5, 0, +19]\r\n            for(let i = 0; i<pie_name.length; i++){\r\n                legend_text_setting.push({\r\n                    \"text\":pie_name[i]+\":\"+data_point[pie_name[i]+\"_Prediction_Label\"],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":y_offset_list[i]\r\n                })\r\n            }\r\n            legend_text_setting.push(\r\n                {\r\n                    \"text\":\"Confidence:\"+data_point[key_model_name+\"_Confidence\"].toFixed(2),\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                }\r\n            )\r\n                \r\n\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legned_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_conf\":legend_conf,\r\n                \"legend_text_setting\":legend_text_setting\r\n            }\r\n            this.renderLegendGT3PT(legend_svg, e.refresh_number, radius_gap, radius, legend_configuration, additional_info);\r\n        }else if(showMode === 2){\r\n            let legend_x = 30;\r\n            let legend_y = 45;\r\n            let legend_scale = 2;\r\n            let legend_Color = data_point[\"Color\"];\r\n            let legend_degree = data_point[\"Real_Degree\"];\r\n            let legend_CN_consistency = data_point[\"CN_consistency\"];\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":\"DEG/MAX_DEG:\"+data_point[\"Real_Degree\"].toFixed(2)+\"/\"+additional_info[\"max_degree\"],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+16\r\n                },\r\n                {\r\n                    \"text\":\"Label consistency:\"+data_point[\"CN_consistency\"][\"cgt_ngt\"].toFixed(2),\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+16\r\n                },\r\n                {\r\n                    \"text\":\"Label - prediction consistency:\"+data_point[\"CN_consistency\"][\"cgt_npt\"].toFixed(2),\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+0\r\n                },\r\n                {\r\n                    \"text\":\"Prediction - label consistency:\"+data_point[\"CN_consistency\"][\"cpt_ngt\"].toFixed(2),\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+18\r\n                },\r\n                {\r\n                    \"text\":\"Prediction consistency:\"+data_point[\"CN_consistency\"][\"cpt_npt\"].toFixed(2),\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":-22\r\n                },\r\n            ];\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legend_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_degree\":legend_degree,\r\n                \"legend_CN_consistency\":legend_CN_consistency,\r\n                \"legend_text_setting\":legend_text_setting\r\n            }\r\n            this.renderLegendDEGCN(legend_svg, e.refresh_number, radius, additional_info, legend_configuration);\r\n        }else if(showMode === 3){\r\n            let legend_x = 20;\r\n            let legend_y = 40;\r\n            let legend_scale = 2;\r\n            let legend_spd_info = data_point[\"Spd_node_info\"];\r\n            let legend_Color = data_point[\"Color\"];\r\n            let legend_transformed_distance = data_point[\"Transformed_Distance\"];\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":key_model_name+\":\"+data_point[key_model_name+\"_Prediction_Label\"],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":\"Nearest training nodes \\n label distribution\" + spd_desc_info,\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":\"Closeness:\" + legend_transformed_distance.toFixed(2),\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                }\r\n            ];\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legend_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_text_setting\":legend_text_setting,\r\n                \"legend_spd_info\":legend_spd_info,\r\n                \"legend_transformed_distance\":legend_transformed_distance\r\n            }\r\n            this.renderLegendP1SPD(legend_svg, e.refresh_number, radius, legend_configuration);\r\n        }else if(showMode === 4){\r\n            let legend_x = 20;\r\n            let legend_y = 30;\r\n            let legend_scale = 2;\r\n            let legend_Color = data_point[\"Color\"];\r\n            let legend_Topkfs_nodes = data_point[\"Topkfs_nodes\"]\r\n            let legend_Topkfs_node_info = data_point[\"Topkfs_node_info\"];\r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":key_model_name+\":\"+data_point[key_model_name+\"_Prediction_Label\"],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":\"Top-k similar features \\n training nodes label distribution\"+kfs_desc_info,\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                }\r\n            ];\r\n            let legend_configuration = {\r\n                \"legend_x\":legend_x,\r\n                \"legend_y\":legend_y,\r\n                \"legend_scale\":legend_scale,\r\n                \"legend_Color\":legend_Color,\r\n                \"legend_text_setting\":legend_text_setting,\r\n                \"legend_Topkfs_nodes\":legend_Topkfs_nodes,\r\n                \"legend_Topkfs_node_info\":legend_Topkfs_node_info\r\n\r\n            }\r\n            this.renderLegendP1KFS(legend_svg, e.refresh_number, radius, legend_configuration);\r\n        }\r\n\r\n\r\n        // ----- Change the style of hovered nodes and lines.  ------\r\n        let Data_id = data_point.Data_id;\r\n        let new_return_result:any[] = data_point.raw_id_list;\r\n        let new_highlight_node = [Data_id];\r\n        this.onHoveredNodeListChange(new_return_result, new_highlight_node, showMode);\r\n\r\n        \r\n    }\r\n    public renderInViewLegend(){\r\n        let enableLegends = this.props.enableLegends;\r\n        let showMode = this.props.showMode;\r\n        let configuration = {\r\n            \"radius\":3.5,\r\n            \"showlabel\": false,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        let additional_info = this.additional_info;\r\n        let graph_additional_info = this.props.graph_additional_info;\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"]; // rect height\r\n        if(height<1){\r\n            height = 1\r\n        }\r\n        let legendWidth = 140;\r\n        let legendHeight = 100;\r\n        let legend_left_padding = 10;\r\n        //let showMode = this.props.showMode;\r\n        /*\r\n        if(showMode === 1){\r\n            legendWidth = 140;\r\n            legendHeight = 100;\r\n        }else if(showMode === 2){\r\n            legendWidth = 300;\r\n            legendHeight = 100;\r\n        }else if(showMode === 3){\r\n            legendWidth = 210;\r\n            legendHeight = 60+10+10;\r\n        }else if(showMode === 4){\r\n            legendWidth = 280;\r\n            legendHeight = 60+10;\r\n        }*/\r\n        \r\n        var legend_top_padding = 10;\r\n        var legend_height = legendHeight + legend_top_padding;\r\n        var legend_width = legendWidth + legend_left_padding;\r\n        legend_width = Math.min(width, legend_width);\r\n        // --> legend_left_padding --> legendWidth\r\n        //  || blank || legendHeight || legend_top_padding\r\n        d3.select(\"#ScatterPlot_sub_legend\"+this.props.id).remove();\r\n        d3.select(\"#ScatterPlot_sub_colorlegend\"+this.props.id).remove();\r\n        var legend_top_svg = d3.select(\"#TopSVGChart_ScatterPlot_Legend_\"+this.props.id);\r\n\r\n        if(enableLegends){\r\n            console.log(\"Enable projection view legends rendering...\")\r\n            \r\n            let legend_glyph_y = height-legend_height;\r\n            // Position (legend_left_padding, height - legend_top_padding - legendHeight)\r\n            var legend_svg = legend_top_svg.append(\"g\")\r\n            .attr(\"id\",\"ScatterPlot_sub_legend\"+this.props.id)\r\n            .attr(\"transform\", function() {\r\n                return \"translate(\" + legend_left_padding + \",\" +  (legend_glyph_y) + \")\";\r\n                })\r\n            .attr(\"width\", legend_width - legend_left_padding)\r\n            .attr(\"height\", legend_height-legend_top_padding);\r\n            legend_svg.append(\"rect\")\r\n            .attr(\"x\",0)\r\n            .attr(\"y\",0)\r\n            .attr(\"width\", legend_width - legend_left_padding)\r\n            .attr(\"height\", legend_height-legend_top_padding)\r\n            .attr(\"fill\",\"white\")\r\n            .attr(\"stroke\",\"#bbb\")\r\n            .attr(\"stroke-width\",2)\r\n            .attr(\"fill-opacity\",0.9)\r\n            .attr(\"stroke-opacity\",0.5)\r\n            ;\r\n            // Rect [0, 0, legendWidth, legendHeight]\r\n            var data_package:any = {\r\n                \"configuration\":configuration,\r\n                \"tooltip_svg\":legend_svg,\r\n                \"additional_info\":additional_info,\r\n                \"e\": this,\r\n                \"showMode\": showMode,\r\n                \"legendMode\": 2\r\n            }\r\n            if(showMode === 1)\r\n            {\r\n\r\n                let getColorLegend = () =>{\r\n                    let graph_info = graph_additional_info;\r\n                    //let graph_info = common.graph_additional_info;\r\n                    let num_class = graph_info.num_class;\r\n                    let label = [];\r\n                    if(Object.keys(graph_info).indexOf(\"idx_to_class\")>=0){\r\n                        let idx_to_class = graph_info.idx_to_class;\r\n                        for(let i = 0; i< num_class;i++){\r\n                            label.push({\r\n                                \"text\":\"\"+i+\":\"+idx_to_class[i],\r\n                                \"color\":getCoraNodeColor(i,2)\r\n                            })\r\n                        }\r\n                    }else{\r\n                        for(let i = 0; i< num_class;i++){\r\n                            label.push({\r\n                                \"text\":i,\r\n                                \"color\":getCoraNodeColor(i,2)\r\n                            })\r\n                        }\r\n                    }\r\n                    return label;\r\n                }\r\n                let colorLegend = getColorLegend();\r\n                let legend_color_x = 10;\r\n\r\n                // ---- Calculate the legend color width and height.\r\n                let max_text_length = 0;\r\n                colorLegend.forEach((d:any)=>{\r\n                    let text = \"\" + d.text;\r\n                    if(text.length>max_text_length){\r\n                        max_text_length = text.length;\r\n                    }\r\n                })\r\n                \r\n                let legend_color_width = max_text_length*8+24;\r\n                //console.log(\"maxtextlength\", max_text_length, legend_color_width);\r\n                let legend_color_height = colorLegend.length*20;\r\n                // ----------------------------------------------\r\n    \r\n                // || blank || legend_color_height || 10 || legend_glyph_y           \r\n                let legend_color_y = legend_glyph_y - 10 - legend_color_height;\r\n    \r\n                var legend_color_svg = legend_top_svg.append(\"g\")\r\n                    .attr(\"id\", \"ScatterPlot_sub_colorlegend\"+this.props.id)\r\n                    .attr(\"width\", legend_color_width)\r\n                    .attr(\"height\", legend_color_height)\r\n                    .attr(\"transform\", \"translate(\"+legend_color_x+\",\"+legend_color_y+\")\")\r\n                let legend_rect = legend_color_svg.selectAll(\"rect\").data([0]);\r\n                let legend_rect_enter = legend_rect.enter().append(\"rect\");\r\n                //console.log(\"legend_rect\", legend_rect);\r\n                legend_rect_enter.merge(legend_rect)\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", 0)\r\n                    .attr(\"width\", legend_color_width)\r\n                    .attr(\"height\", legend_color_height)\r\n                    .attr(\"fill\", \"#fff\")\r\n                    .attr(\"opacity\", 0.8)\r\n                    .attr(\"stroke\", \"#bbb\")\r\n                    .attr(\"stroke-width\", 1)\r\n                    .attr(\"rx\",3)\r\n                    .attr(\"ry\",3);\r\n    \r\n                data_package[\"color_svg\"] = legend_color_svg;\r\n                data_package[\"colorLegend\"] = colorLegend;\r\n\r\n            }\r\n            \r\n\r\n           \r\n            this.renderLegend(data_package);\r\n        }else{\r\n            console.log(\"Not Enable projection view legends...\")\r\n\r\n        }\r\n\r\n\r\n            \r\n    }\r\n    /**\r\n     * Render glyphs based on data points.\r\n     * First, save the params to class variable, if null, then restore params from class variable.\r\n     * Second, remove already rendered things.\r\n     * @param point_array \r\n     * @param additional_info \r\n     * @param model \r\n     */\r\n    public mappingGraph(point_array:any=null,additional_info:any=null, model:any=null) {\r\n        let getSizeScale = this.getSizeScale;\r\n\r\n        //let getArc = this.getArc;\r\n        //let getArcConf = this.getArcConf;\r\n        if(point_array===null){\r\n            point_array = this.point_array;\r\n        }else{\r\n            this.point_array = point_array;\r\n        }\r\n        if(additional_info === null){\r\n            additional_info = this.additional_info;\r\n        }else{\r\n            this.additional_info = additional_info;\r\n        }\r\n        if(model === null){\r\n            model = this.model;\r\n        }else{\r\n            this.model = model;\r\n        }\r\n        let showMode = this.props.showMode;\r\n        let layoutMode = this.props.layoutMode;\r\n        d3.select(\"#ScatterPlot_sub_\"+this.props.id).remove();\r\n        d3.select(\"#ScatterPlot_Legend_sub_\"+this.props.id).remove();\r\n        d3.select(\"#ScatterPlot_sub_colorlegend\"+this.props.id).remove();\r\n        if(point_array.length <= 0){\r\n            return;\r\n        }\r\n        \r\n        \r\n\r\n        var nodenum = point_array.length;\r\n        var configuration = {\r\n            \"radius\":3.5,\r\n            \"showlabel\": true,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        if(nodenum >= 100){\r\n            configuration = {\r\n                \"radius\":3.5,\r\n                \"showlabel\": false,\r\n                \"width\": this.props.width,\r\n                \"height\": this.props.height\r\n            }\r\n        }\r\n        var top_top_svg = d3.select(\"#TopSVGChart_ScatterPlot_\"+this.props.id)\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"]; // rect height\r\n        if(height<1){\r\n            height = 1\r\n        }\r\n        let handleTitleMouseMove = this.handleTitleMouseMove;\r\n        function handleTitleMouseMoveBridge(this:any){\r\n            //console.log(\"handleTitleMouseMoveBridge\",this);\r\n            handleTitleMouseMove(this,configuration, additional_info);\r\n        }\r\n        var top_svg = top_top_svg.append(\"g\")\r\n        .attr(\"id\",\"ScatterPlot_sub_\"+this.props.id);\r\n        top_svg.append(\"rect\")\r\n        .attr(\"x\",0)\r\n        .attr(\"y\",0)\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"fill\",\"white\")\r\n        .attr(\"stroke\",\"#bbb\")\r\n        .attr(\"stroke-width\",2)\r\n        .attr(\"fill-opacity\",0.1)\r\n        .attr(\"stroke-opacity\",0.5)\r\n        ;\r\n        var legend_top_top_svg = d3.select(\"#TopSVGChart_ScatterPlot_Legend_\"+this.props.id);\r\n        var legend_top_svg = legend_top_top_svg.append(\"g\")\r\n        .attr(\"id\",\"ScatterPlot_Legend_sub_\"+this.props.id);\r\n        legend_top_svg.append(\"text\")\r\n        .attr(\"x\",width/2)\r\n        .attr(\"y\",-4)\r\n        .attr(\"text-anchor\",\"middle\")\r\n        .text(this.props.name);\r\n        //.on(\"mousemove\", handleTitleMouseMoveBridge)\r\n        //.on(\"mouseout\",this.handleTitleMouseOut);\r\n        this.renderInViewLegend();\r\n        var svg = top_svg.append(\"g\").attr(\"class\",\"main_drawings\");\r\n            svg.attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n\r\n        let clip_name = \"clip_\"+this.props.id;\r\n        let clip_path_name = \"url(#\"+clip_name+\")\";\r\n            svg.append(\"defs\")\r\n            .append(\"clipPath\")\r\n            .attr(\"id\",clip_name)\r\n            .append(\"rect\")\r\n            .attr(\"x\",0)\r\n            .attr(\"y\",0)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n            svg.attr(\"clip-path\", clip_path_name);\r\n\r\n        var nodes = svg\r\n            .selectAll(\"g.nodes\")\r\n            .data(point_array,function(d:any,i:any){\r\n                return \"\"+d.data.Data_id;\r\n            });\r\n        //console.log(\"point_array\", point_array);\r\n        //console.log(\"nodes enter, update, exit\", nodes.enter(), nodes, nodes.exit());\r\n            \r\n        var node_enter = nodes.enter().append(\"g\").attr(\"class\",\"nodes\");\r\n        var node_enter_update = nodes.merge(node_enter).attr(\"opacity\",0.9);\r\n        nodes.exit().remove();\r\n       \r\n        let handleGlyphMouseMove = this.handleGlyphMouseMove;\r\n        function handleGlyphMouseMoveBridge(this:any){\r\n            handleGlyphMouseMove(this,configuration, additional_info);\r\n        }\r\n        node_enter_update.on(\"mousemove\", handleGlyphMouseMoveBridge).on(\"mouseout\",this.handleGlyphMouseOut);\r\n        \r\n        // render glyph\r\n\r\n        \r\n        let radius = 3;\r\n        let radius_gap = 0.3;\r\n        let rect_scale = 4.5;\r\n        let enable_size = true;\r\n\r\n        if(showMode === 1){\r\n            //enable_size = true;\r\n            this.renderGlyphGT3PT(nodes, node_enter, radius_gap, radius,additional_info,1, enable_size);\r\n        }else if(showMode === 2){\r\n            //enable_size = true;\r\n            // 2 -> shortest path distance / center neighbor consistency rate.\r\n            this.renderGlyphDEGCN(nodes, node_enter, radius, additional_info,1,enable_size);\r\n        }else if(showMode === 3){\r\n            // 3 -> shortest path distance train nodes label distribution\r\n            var num_class = point_array[0].data.Spd_node_info.length;\r\n            this.renderGlyphP1SPD(nodes, node_enter, radius, rect_scale, num_class,1,enable_size);\r\n        }else if(showMode === 4){\r\n            // 4 -> topkfs train nodes label distribution\r\n            var num_class = point_array[0].data.Topkfs_node_info.length;\r\n           this.renderGlyphP1KFS(nodes, node_enter, radius, rect_scale,num_class,1,enable_size);\r\n        }\r\n\r\n        \r\n     \r\n\r\n        \r\n        if(enable_size){\r\n            //var title_enter = node_enter.append(\"title\");\r\n            //nodes.select(\"title\").merge(title_enter)\r\n            //    .text(function(d:any) { return d.data.Data_id; });\r\n            //var title_enter = node_enter.append(\"title\");\r\n            //nodes.select(\"title\").merge(title_enter)\r\n            //    .text(function(d:any) { return \"size:\"+d.data.size; });\r\n        }\r\n        let margin = 40;\r\n        var centerx = d3.scaleLinear().range([ margin, width - margin]),\r\n            centery = d3.scaleLinear().range([margin, height - margin]);\r\n        let radius_collision =  radius * 2+radius_gap*2;\r\n        if(showMode === 2){\r\n            \r\n        }else if(showMode === 1){\r\n            radius_collision = radius_collision + 3;\r\n        }else if(showMode === 3 || showMode === 4){\r\n            radius_collision = radius * rect_scale / 3 * 2 + radius_gap * rect_scale / 3 * 2;\r\n        }\r\n        // default alphaDecay = 0.005\r\n        // default alpha = 0.1\r\n        let renderLines = this.props.renderLines;\r\n        let enable_lasso_selection:boolean = true;\r\n        function ticked() {\r\n            node_enter.merge(nodes)\r\n            .attr(\"transform\", function(d:any) {\r\n            return \"translate(\" + d.x + \",\" +  d.y + \")\";\r\n            })\r\n            if(enable_lasso_selection){\r\n                renderLines();\r\n            }\r\n        }\r\n        if(nodenum>=2){\r\n            // t-SNE settings:\r\n            //      alpha 0.1\r\n            //      alphaDecay 0.005\r\n            // UMAP\r\n            //      alpha 0.2\r\n            //      alphaDecay 0.005\r\n            let alpha = 0.1;\r\n            let alphaDecay = 0.005;\r\n            if(layoutMode===1){\r\n                alpha = 0.1;\r\n                alphaDecay = 0.005;\r\n            }else if(layoutMode === 2){\r\n                alpha = 0.2;\r\n                alphaDecay = 0.005;\r\n            }\r\n            const forcetsne = d3.forceSimulation(point_array)\r\n            .alphaDecay(alphaDecay)\r\n            .alpha(alpha)\r\n            .force('tsne', function (alpha:any) {\r\n                \r\n                // every time you call this, solution gets better\r\n                model.step();\r\n\r\n                // Y is an array of 2-D points that you can plot\r\n                let pos:any;\r\n                if(layoutMode === 1){\r\n                    pos = model.getSolution();\r\n                }else if(layoutMode === 2){\r\n                    pos = model.getEmbedding();\r\n                }\r\n                //\r\n                centerx.domain(d3.extent(pos.map((d:any) => d[0])));\r\n                centery.domain(d3.extent(pos.map((d:any) => d[1])));\r\n\r\n                point_array.forEach((d:any, i:any) => {\r\n                    d.x += alpha * (centerx(pos[i][0]) - d.x);\r\n                    d.y += alpha * (centery(pos[i][1]) - d.y);\r\n                });\r\n                \r\n            })\r\n            .force('collide', d3.forceCollide().radius((d:any) => {\r\n                let s_scale = 1;\r\n                if(enable_size){\r\n                    s_scale = getSizeScale(d.data.size);\r\n                }\r\n                return s_scale * radius_collision;\r\n            }))\r\n            .on('tick',ticked);\r\n        }else{\r\n            ticked();\r\n        }\r\n        \r\n                \r\n        \r\n        \r\n        \r\n        if(enable_lasso_selection){\r\n            var lasso_start = function() {\r\n                lasso.items()\r\n                    .classed(\"lasso_not_possible\",true)\r\n                    .classed(\"lasso_unselected\", false)\r\n                    .classed(\"lasso_selected\",false);\r\n            };\r\n    \r\n            var lasso_draw = function() {\r\n            \r\n                // Style the possible dots\r\n                lasso.possibleItems()\r\n                    .classed(\"lasso_not_possible\",false)\r\n                    .classed(\"lasso_unselected\", false)\r\n                    .classed(\"lasso_possible\",true);\r\n    \r\n                // Style the not possible dot\r\n                lasso.notPossibleItems()\r\n                    .classed(\"lasso_not_possible\",true)\r\n                    .classed(\"lasso_unselected\", false)\r\n                    .classed(\"lasso_possible\",false);\r\n            };\r\n            let onSelectedNodeListChange = this.onSelectedNodeListChange;\r\n            var lasso_end = function() {\r\n                // Reset the color of all dots\r\n                lasso.items()\r\n                    .classed(\"lasso_not_possible\",false)\r\n                    .classed(\"lasso_possible\",false);\r\n    \r\n                // Style the selected dots\r\n                lasso.selectedItems()\r\n                    .classed(\"lasso_selected\",true)\r\n    \r\n                // Reset the style of the not selected dots\r\n                \r\n                let selectedItemsData = lasso.selectedItems().data();\r\n                let return_result:any;\r\n                lasso.notSelectedItems().data().forEach((d:any)=>{\r\n                    d.selected = false;\r\n                })\r\n                lasso.selectedItems().data().forEach((d:any)=>{\r\n                    d.selected = true;\r\n                })\r\n                if(selectedItemsData.length === 0){\r\n                    return_result = lasso.notSelectedItems().data();\r\n                    lasso.notSelectedItems()\r\n                    .classed(\"lasso_unselected\", false);\r\n                }else{\r\n                    return_result = selectedItemsData;\r\n                    lasso.notSelectedItems()\r\n                    .classed(\"lasso_unselected\", true);\r\n                }\r\n                console.log(return_result);\r\n                //let new_return_result = return_result.map((d:any)=>{\r\n                //    return d.data.Data_id;\r\n                //})\r\n                let new_return_result:any[] = [];\r\n                return_result.forEach((d:any)=>{\r\n                    new_return_result = new_return_result.concat(d.data.raw_id_list);\r\n                })\r\n                let new_highlight_node = selectedItemsData.map((d:any)=>{\r\n                    return d.data.Data_id;\r\n                })\r\n                onSelectedNodeListChange(new_return_result, new_highlight_node, showMode);\r\n            };\r\n            \r\n            var lasso = d3_lasso.default()\r\n                .closePathSelect(true)\r\n                .closePathDistance(100)\r\n                .items(node_enter_update)\r\n                .targetArea(top_top_svg)\r\n                .on(\"start\",lasso_start)\r\n                .on(\"draw\",lasso_draw)\r\n                .on(\"end\",lasso_end);\r\n            \r\n            top_top_svg.call(lasso);\r\n        }\r\n        this.props.updateSingleHighlightNodeStatus(showMode);\r\n        \r\n        \r\n        \r\n    };\r\n    \r\n    public renderD3(){\r\n        let dataPackage = this.props.dataPackage;\r\n        var matrix:any = dataPackage[\"matrix\"];\r\n        var selectedNodeList:any = dataPackage[\"selectedNodeList\"];\r\n        var additional_info:any = this.props.dataPackage[\"additional_info\"];\r\n        let layoutMode = this.props.layoutMode;\r\n        let model;\r\n        if(layoutMode === 1){\r\n            model = new tsnejs.tSNE({\r\n                dim: 2,\r\n                perplexity: 30,\r\n            });\r\n            model.initDataDist(matrix);\r\n\r\n        }else if(layoutMode === 2){\r\n        \r\n            let getDistance = (x:any, y:any)=>{\r\n                let x_indices = x[0];\r\n                let y_indices = y[0];\r\n                return matrix[x_indices][y_indices];\r\n            }\r\n            model = new UMAP({\r\n                nComponents: 2,\r\n                distanceFn: getDistance,\r\n                nNeighbors: Math.min(15, matrix.length - 1)\r\n            });\r\n            \r\n            let fakedata = [];\r\n            for(let i = 0; i<matrix.length;i++){\r\n                fakedata.push([i]);\r\n            }\r\n            let nEpochs = 1;\r\n            if(fakedata.length>=2){\r\n                nEpochs = model.initializeFit(fakedata);\r\n    \r\n            }\r\n        }\r\n\r\n        /*for (let i = 0; i < nEpochs; i++) {\r\n            umap.step();\r\n        }\r\n        let embedding = umap.getEmbedding();\r\n        console.log(\"nEpochs\", nEpochs);\r\n        console.log(\"umap embedding\", embedding);*/\r\n        \r\n        let initial_x = this.props.width / 2;\r\n        let initial_y = this.props.height / 2;\r\n        var point_array :any = [];\r\n        selectedNodeList.forEach((d:any,i:any)=>{\r\n            point_array.push(\r\n            {\r\n                \"data\":d,\r\n                \"x\":initial_x,\r\n                \"y\":initial_y\r\n            });\r\n        })\r\n        // console.log(\"pre point array\", JSON.parse(JSON.stringify(point_array)))\r\n        let updatefunc = this.mappingGraph;\r\n        updatefunc(point_array,additional_info, model);\r\n        \r\n    }\r\n    \r\n    \r\n    public onShowModeChange(showMode:number){\r\n        this.setState({\r\n            showMode: showMode\r\n        })\r\n    }\r\n    public render() {\r\n        let {x,y,width,height } = this.props;\r\n        return (\r\n         <g>\r\n             <g id={\"TopSVGChart_ScatterPlot_\"+this.props.id} transform={\"translate(\"+x+\",\"+y+\")\"} width={width} height={height}></g>\r\n                <g id={\"TopSVGChart_ScatterPlot_Legend_\"+this.props.id} transform={\"translate(\"+x+\",\"+y+\")\"} width={width} height={height}></g>\r\n                </g>\r\n         )\r\n                \r\n           \r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Tag } from 'antd';\r\nimport {getNodeStatisticStr} from '../../../helper';\r\nexport interface IProps {\r\n    ProjectionViewSelectedNodes: number,\r\n    ProjectionViewTotalNodeNum: number\r\n}\r\nexport interface IState {\r\n}\r\nexport default class ProjectionViewNodeStatistic extends React.Component<IProps, IState>{\r\n    public render() {\r\n        return <Tag> {getNodeStatisticStr(this.props.ProjectionViewSelectedNodes, this.props.ProjectionViewTotalNodeNum)}</Tag>\r\n    }\r\n}\r\n\r\n","import ProjectionViewNodeStatistic from '../components/DataRuns/ProjectionView/ProjectionViewNodeStatistic'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../types';\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    ProjectionViewSelectedNodes: state.ProjectionViewSelectedNodes,\r\n    ProjectionViewTotalNodeNum: state.ProjectionViewTotalNodeNum\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectionViewNodeStatistic);\r\n\r\n\r\n\r\n","\r\nexport default class HCluster{\r\n    public distance = (vector1:any, vector2:any)=>{\r\n        return 0;\r\n    };\r\n    public linkage:string = \"single\";\r\n    public distMatrix:any = null;\r\n    public showMode:number = 1;\r\n    public vector_type:any[] = [];\r\n    constructor(showMode:number){\r\n        this.showMode = showMode;\r\n        \r\n    }\r\n    public setlinkage(linkage:string){\r\n        this.linkage = linkage;\r\n    }\r\n    public setDistMatrix(x:any){\r\n        this.distMatrix = x.map(function(y:any) { return y.slice(0); });\r\n        //this.distMatrix = distMatrix;\r\n    }\r\n    public setDistance(distance:any){\r\n        this.distance = distance;\r\n    }\r\n    public cluster(vectors:any, limit_distance:number=0.5){\r\n        var n:number = vectors.length,\r\n            dMin:any = [],\r\n            cSize:any = [],\r\n            clusters:any = [],\r\n            c1:any,\r\n            c2:any,\r\n            c1Cluster:any,\r\n            c2Cluster:any,\r\n            p:any,\r\n            root:any,\r\n            i:any,\r\n            j:any,\r\n            id:number = 0,\r\n            clusterflag:any  = [];\r\n            //limit_distance = 0.5;\r\n\r\n        // Initialise distance matrix and vector of closest clusters.\r\n        if (this.distMatrix === null) {\r\n            this.distMatrix = [];\r\n            i = -1; \r\n            while (++i < n) {\r\n                dMin[i] = 0;\r\n                this.distMatrix[i] = [];\r\n                j = -1; \r\n                while (++j < n) {\r\n                    this.distMatrix[i][j] = i === j ? Infinity : this.distance(vectors[i] , vectors[j]);\r\n                    if (this.distMatrix[i][dMin[i]] > this.distMatrix[i][j]) dMin[i] = j;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.distMatrix.length < n || this.distMatrix[0].length < n)\r\n                throw {error: \"Provided distance matrix length \"+this.distMatrix.length+\" instead of \"+n};\r\n            i = -1; \r\n            while (++i < n) {\r\n                dMin[i] = 0;\r\n                j = -1; \r\n                while (++j < n) {\r\n                    if (i === j)\r\n                        this.distMatrix[i][j] = Infinity;\r\n                    if (this.distMatrix[i][dMin[i]] > this.distMatrix[i][j]) dMin[i] = j;\r\n                }\r\n            }\r\n        }\r\n        // create leaves of the tree\r\n        i = -1; \r\n        while (++i < n) {\r\n            if (i != id) console.log(\"i = %d, id = %d\", i, id);\r\n            clusters.push([]);\r\n            clusterflag.push(true);\r\n            clusters[i].push({\r\n                \"left\": null,\r\n                \"right\": null,\r\n                \"dist\": 0,\r\n                \"centroid\": vectors[i],\r\n                \"id\": id, //[jdf] keep track of original data index\r\n                \"size\": 1,\r\n                \"depth\": 0,\r\n                \"id_list\": [id] // save original id.\r\n            });\r\n            id++;\r\n            cSize[i] = 1;\r\n        }\r\n        \r\n        // Main loop\r\n        for (p = 0; p < n-1; p++) {\r\n            // find the closest pair of clusters\r\n            c1 = 0;\r\n            for (i = 0; i < n; i++) {\r\n                if (this.distMatrix[i][dMin[i]] < this.distMatrix[c1][dMin[c1]]) c1 = i;\r\n            }\r\n            c2 = dMin[c1];\r\n\r\n            // create node to store cluster info \r\n            c1Cluster = clusters[c1][0];\r\n            c2Cluster = clusters[c2][0];\r\n            if(this.distMatrix[c1][c2]>limit_distance){\r\n                break;\r\n            }\r\n            var newCluster:any = {\r\n                left: c1Cluster,\r\n                right: c2Cluster,\r\n                dist: this.distMatrix[c1][c2],\r\n                centroid: this.calculateCentroid(c1Cluster.size, c1Cluster.centroid,\r\n                                            c2Cluster.size, c2Cluster.centroid),\r\n                id: id++,\r\n                size: c1Cluster.size + c2Cluster.size,\r\n                depth: 1 + Math.max(c1Cluster.depth, c2Cluster.depth),\r\n                id_list: c1Cluster.id_list.concat(c2Cluster.id_list)\r\n            };\r\n            clusters[c1].splice(0, 0, newCluster);\r\n            cSize[c1] += cSize[c2];\r\n\r\n            // overwrite row c1 with respect to the linkage type\r\n            for (j = 0; j < n; j++) {\r\n                switch (this.linkage) {\r\n                case \"single\":\r\n                    if (this.distMatrix[c1][j] > this.distMatrix[c2][j])\r\n                        this.distMatrix[j][c1] = this.distMatrix[c1][j] = this.distMatrix[c2][j];\r\n                    break;\r\n                case \"complete\":\r\n                    if (this.distMatrix[c1][j] < this.distMatrix[c2][j])\r\n                        this.distMatrix[j][c1] = this.distMatrix[c1][j] = this.distMatrix[c2][j];\r\n                    break;\r\n                case \"average\":\r\n                    this.distMatrix[j][c1] = this.distMatrix[c1][j] = (cSize[c1] * this.distMatrix[c1][j] + cSize[c2] * this.distMatrix[c2][j]) / (cSize[c1] + cSize[j]);\r\n                    break;\r\n                }\r\n            }\r\n            this.distMatrix[c1][c1] = Infinity;\r\n            clusterflag[c2] = false;\r\n            for (i = 0; i < n; i++)\r\n                this.distMatrix[i][c2] = this.distMatrix[c2][i] = Infinity;\r\n\r\n            // update dmin and replace ones that previous pointed to c2 to point to c1\r\n            for (j = 0; j < n; j++) {\r\n                if (dMin[j] == c2) dMin[j] = c1;\r\n                if (this.distMatrix[c1][j] < this.distMatrix[c1][dMin[c1]]) dMin[c1] = j;\r\n            }\r\n\r\n            // keep track of the last added cluster\r\n            root = newCluster;\r\n        }\r\n        //console.log(\"clusterflag\",clusterflag);\r\n        let valid_cluster:any = [];\r\n        for(let i = 0; i<clusterflag.length; i++){\r\n            if(clusterflag[i] === true){\r\n                valid_cluster.push(clusters[i][0]);\r\n            }\r\n        }\r\n        return valid_cluster;\r\n    }\r\n    public calculateCentroid(c1Size:number, c1Centroid:any, c2Size:number, c2Centroid:any) {\r\n        var newCentroid = [],\r\n            newSize = c1Size + c2Size,\r\n            n = c1Centroid.length,\r\n            i = -1;\r\n        while (++i < n) {\r\n          newCentroid[i] = (c1Size * c1Centroid[i] + c2Size * c2Centroid[i]) / newSize;\r\n        }\r\n        return newCentroid;\r\n      }\r\n}\r\n/*\r\nscience.stats.hcluster = function() {\r\n    var distance = reorder.distance.euclidean,\r\n        linkage = \"single\", // single, complete or average\r\n        distMatrix = null;\r\n  \r\n    function hcluster(vectors) {\r\n      \r\n    }\r\n  \r\n    hcluster.linkage = function(x) {\r\n      if (!arguments.length) return linkage;\r\n      linkage = x;\r\n      return hcluster;\r\n    };\r\n  \r\n    hcluster.distance = function(x) {\r\n      if (!arguments.length) return distance;\r\n      distance = x;\r\n      return hcluster;\r\n    };\r\n  \r\n    hcluster.distanceMatrix = function(x) {\r\n      if (!arguments.length) return distMatrix;\r\n      distMatrix = x.map(function(y) { return y.slice(0); });\r\n      return hcluster;\r\n    };\r\n  \r\n    return hcluster;\r\n  };\r\n  \r\n*/","\r\n\r\nimport HCluster from './HCluster';\r\nimport \"./ProjectionView.css\";\r\n\r\nimport {getLayoutMode, compareSelectedNodeIdList, getNodeStatisticStr, constructNeighborSet, getCoraNodeColor, getTrainColor} from '../../../helper';\r\nconst d3 = require(\"d3\");\r\nexport default class ProjectionViewComputing{\r\n    public CacheDataPackage:any = {\r\n\r\n    }\r\n    public filters:any = {};\r\n    public PCPJson:any = {};\r\n    public pie_name:any = [];\r\n    public selectedNodeList:any = [];\r\n    public initialize_flag: boolean = false;\r\n    public cluster_selectedNodeIdIndex:any[] = [];\r\n    public cluster_highlightNodeIdDict: any = {};\r\n    public detail_highlightNodeIdList: any = [];\r\n    public cluster_hoveredNodeIdDict: any = {};\r\n    public detail_hoveredNodeIdList: any = [];\r\n    public cluster_rawHoveredNodeIdList:any = [];\r\n    public detail_rawHoveredNodeIdList:any = [];\r\n    public cluster_renderedLinesList: any[] = [];\r\n    public detail_renderedLinesList: any[] = [];\r\n    public cluster_hoveredLinesList: any[] = [];\r\n    public detail_hoveredLinesList: any[] = [];\r\n    public cluster_rawHighlightNodeIdList:any = [];\r\n    public detail_rawHighlightNodeIdList:any = [];\r\n    public aggregationMode : number = 1;\r\n    constructor(){\r\n        this.getDistance = this.getDistance.bind(this);\r\n        this.initialize = this.initialize.bind(this);\r\n        this.checkinitialize = this.checkinitialize.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.getDataPackage = this.getDataPackage.bind(this);\r\n        this.computeDistance = this.computeDistance.bind(this);\r\n        this.computeDistanceMatrix = this.computeDistanceMatrix.bind(this);\r\n        this.updateHighlightNodeIdList = this.updateHighlightNodeIdList.bind(this);\r\n    }\r\n    /**\r\n     * Aggregation Mode getter and setter.\r\n     * @param aggregationMode \r\n     */\r\n    public updateAggregationMode(aggregationMode:number){\r\n        this.aggregationMode = aggregationMode;\r\n    }\r\n    public getAggregationMode(){\r\n        return this.aggregationMode;\r\n    }\r\n\r\n\r\n    public getRawHighlightNodeIdList(){\r\n        if(this.aggregationMode === 1){\r\n            return this.cluster_rawHighlightNodeIdList;\r\n        }else if(this.aggregationMode === 2){\r\n            return this.detail_rawHighlightNodeIdList;\r\n        }\r\n    }\r\n    public updateNodeStatistic(changeSelectedNodeNum:any, changeTotalNodeNum:any){\r\n        if(this.aggregationMode === 1){\r\n            let selectedNodeNum = this.cluster_rawHighlightNodeIdList.length;\r\n            let totalNodeNum = this.selectedNodeList.length;\r\n            changeSelectedNodeNum(selectedNodeNum);\r\n            changeTotalNodeNum(totalNodeNum);\r\n        }else if(this.aggregationMode === 2){\r\n            let totalNodeNum = this.cluster_rawHighlightNodeIdList.length;\r\n            if(totalNodeNum === 0){\r\n                totalNodeNum = this.selectedNodeList.length;\r\n            }\r\n            let selectedNodeNum = this.detail_rawHighlightNodeIdList.length;\r\n            changeSelectedNodeNum(selectedNodeNum);\r\n            changeTotalNodeNum(totalNodeNum);\r\n        }\r\n    }\r\n\r\n    public calculateHighlightNodeIdList(highlightNodeIdList:any, showMode:number = 1){\r\n        if(this.aggregationMode === 1){\r\n            //this.cluster_highlightNodeIdDict[\"\"+showMode] = highlightNodeIdList;\r\n            // Initialize\r\n            let all_data_package:any = {};\r\n            let all_inverted_index:any = {};\r\n            let local_cluster_highlightNodeIdDict : any ={};\r\n            for(let id = 1;id<=4;id++){\r\n                all_data_package[\"\"+id]=this.getDataPackage(id,1);\r\n                all_inverted_index[\"\"+id]=all_data_package[\"\"+id][\"invertedIndex\"];\r\n                local_cluster_highlightNodeIdDict[\"\"+id] = [];\r\n            }\r\n\r\n            //let invertedIndex = all_data_package[\"\"+showMode][\"invertedIndex\"];\r\n            // Get inner node index.\r\n            let selectedNodeList = all_data_package[\"\"+showMode][\"selectedNodeList\"];\r\n            let selectedNodeIdList:any = [];\r\n            for(let i = 0; i<highlightNodeIdList.length;i++){\r\n                let id_list = selectedNodeList[highlightNodeIdList[i]][\"id_list\"];\r\n                selectedNodeIdList = selectedNodeIdList.concat(id_list);\r\n            }\r\n            \r\n            // Use inverted index to get cluster id in individual projection view.\r\n            // Determine the lines.\r\n            let renderedLinesCollection:any = {};\r\n            for(let i = 0; i<selectedNodeIdList.length; i++){\r\n                let node_id = selectedNodeIdList[i];\r\n                // Line package\r\n                //      size: internal counter.\r\n                //      1,2,3,4: cluster id\r\n                //      line_name: key of line package\r\n                let line_package:any = {\r\n                    \"size\":1\r\n                }\r\n                let line_name:any = \"LINE_\";\r\n                for(let id=1; id<=4;id++){\r\n                    let cluster_id = all_inverted_index[\"\"+id][node_id];\r\n                    line_package[\"\"+id]=cluster_id;\r\n                    line_name = line_name+cluster_id+\"_\";\r\n                }\r\n                line_package[\"name\"] = line_name;\r\n                // Use line name as keys, if existed, enlarge the size.\r\n                if(Object.keys(renderedLinesCollection).indexOf(line_name)>=0){\r\n                    renderedLinesCollection[line_name][\"size\"] = renderedLinesCollection[line_name][\"size\"] + 1;\r\n                }else{\r\n                    renderedLinesCollection[line_name] = line_package;\r\n                }\r\n            }\r\n            // Serialize lines collection.\r\n            let renderedLinesList = Object.keys(renderedLinesCollection).map((d:any)=>{\r\n                return renderedLinesCollection[d];\r\n            });\r\n\r\n            // Get highlight node id in individual view.\r\n            for(let i = 0; i<renderedLinesList.length; i++){\r\n                for(let id=1;id<=4;id++){\r\n                    let corr_id = renderedLinesList[i][\"\"+id];\r\n                    if(local_cluster_highlightNodeIdDict[\"\"+id].indexOf(corr_id)>=0){\r\n\r\n                    }else{\r\n                        local_cluster_highlightNodeIdDict[\"\"+id].push(corr_id);\r\n                    }\r\n                }\r\n                \r\n            }\r\n            this.cluster_selectedNodeIdIndex = selectedNodeIdList;\r\n            this.cluster_highlightNodeIdDict = local_cluster_highlightNodeIdDict;\r\n            this.cluster_renderedLinesList = renderedLinesList;\r\n            console.log(\"cluster_highlightNodeIdDict, renderedLinesList, showMode, selectedNodeIdList\", this.cluster_highlightNodeIdDict, this.cluster_renderedLinesList, showMode, selectedNodeIdList);\r\n        }else if(this.aggregationMode === 2){\r\n            this.detail_highlightNodeIdList = highlightNodeIdList;\r\n            let renderedLinesList:any [] = [];\r\n            for(let i = 0; i<highlightNodeIdList.length; i++){\r\n                let linepackage:any = {\r\n                    \"size\":1\r\n                }\r\n                let line_name:any = \"LINE_\";\r\n                for(let id = 1;id<=4;id++){\r\n                    linepackage[\"\"+id] = highlightNodeIdList[i];\r\n                    line_name = line_name+highlightNodeIdList[i]+\"_\";\r\n                }\r\n                linepackage[\"name\"] = line_name;\r\n                renderedLinesList.push(linepackage);\r\n            }\r\n            this.detail_renderedLinesList = renderedLinesList;\r\n            console.log(\"detail_highlightNodeIdList, renderedLinesList\", this.detail_highlightNodeIdList, this.detail_renderedLinesList);\r\n        }\r\n        \r\n    }\r\n    public updateFullHighlightStatus(){\r\n        for(let id=1;id<=4;id++){\r\n            this.updateSingleHighlightStatus(id);\r\n        }\r\n    }\r\n    public updateSingleHighlightStatus(id:number){\r\n        if(this.aggregationMode === 1){\r\n            if(this.cluster_highlightNodeIdDict[\"\"+id]){\r\n\r\n            }else{\r\n                this.cluster_highlightNodeIdDict[\"\"+id]=[];\r\n            }\r\n            this.updateHighlightStatus(this.cluster_highlightNodeIdDict[\"\"+id], id);\r\n            \r\n        }else if(this.aggregationMode === 2){\r\n            this.updateHighlightStatus(this.detail_highlightNodeIdList, id);\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    public updateHighlightNodeIdList(highlightNodeIdList:any, showMode:number=1, rawHighlightNodeIdList:any=[]){\r\n        if(this.aggregationMode === 1){\r\n            this.cluster_rawHighlightNodeIdList = rawHighlightNodeIdList;\r\n            this.detail_rawHighlightNodeIdList = [];\r\n            this.detail_highlightNodeIdList = [];\r\n            this.detail_renderedLinesList = [];\r\n        }else if(this.aggregationMode === 2){\r\n            this.detail_rawHighlightNodeIdList = rawHighlightNodeIdList;\r\n        }\r\n        this.calculateHighlightNodeIdList(highlightNodeIdList, showMode);\r\n        this.updateFullHighlightStatus();\r\n        \r\n    }\r\n    public updateHoveredNodeIdList(hoveredNodeIdList:any, showMode:number=1, rawHoveredNodeIdList:any=[]){\r\n        if(this.aggregationMode === 1){\r\n            this.cluster_rawHoveredNodeIdList = rawHoveredNodeIdList;\r\n            this.detail_rawHoveredNodeIdList = [];\r\n            this.detail_hoveredNodeIdList = [];\r\n        }else if(this.aggregationMode === 2){\r\n            this.detail_rawHoveredNodeIdList = rawHoveredNodeIdList;\r\n        }\r\n        this.calculateHoveredNodeIdList(hoveredNodeIdList, showMode);\r\n        this.updateFullHoveredStatus();\r\n        \r\n    }\r\n    public calculateHoveredNodeIdList(hoveredNodeIdList:any, showMode:number = 1){\r\n        if(this.aggregationMode === 1){\r\n            //this.cluster_highlightNodeIdDict[\"\"+showMode] = highlightNodeIdList;\r\n            // Initialize\r\n            let all_data_package:any = {};\r\n            let all_inverted_index:any = {};\r\n            let local_cluster_highlightNodeIdDict : any ={};\r\n            for(let id = 1;id<=4;id++){\r\n                all_data_package[\"\"+id]=this.getDataPackage(id,1);\r\n                all_inverted_index[\"\"+id]=all_data_package[\"\"+id][\"invertedIndex\"];\r\n                local_cluster_highlightNodeIdDict[\"\"+id] = [];\r\n            }\r\n\r\n            //let invertedIndex = all_data_package[\"\"+showMode][\"invertedIndex\"];\r\n            // Get inner node index.\r\n            let selectedNodeList = all_data_package[\"\"+showMode][\"selectedNodeList\"];\r\n            let selectedNodeIdList:any = [];\r\n            for(let i = 0; i<hoveredNodeIdList.length;i++){\r\n                let id_list = selectedNodeList[hoveredNodeIdList[i]][\"id_list\"];\r\n                selectedNodeIdList = selectedNodeIdList.concat(id_list);\r\n            }\r\n            \r\n            // Use inverted index to get cluster id in individual projection view.\r\n            // Determine the lines.\r\n            let renderedLinesCollection:any = {};\r\n            for(let i = 0; i<selectedNodeIdList.length; i++){\r\n                let node_id = selectedNodeIdList[i];\r\n                // Line package\r\n                //      size: internal counter.\r\n                //      1,2,3,4: cluster id\r\n                //      line_name: key of line package\r\n                let line_package:any = {\r\n                    \"size\":1\r\n                }\r\n                let line_name:any = \"LINE_\";\r\n                for(let id=1; id<=4;id++){\r\n                    let cluster_id = all_inverted_index[\"\"+id][node_id];\r\n                    line_package[\"\"+id]=cluster_id;\r\n                    line_name = line_name+cluster_id+\"_\";\r\n                }\r\n                line_package[\"name\"] = line_name;\r\n                // Use line name as keys, if existed, enlarge the size.\r\n                if(Object.keys(renderedLinesCollection).indexOf(line_name)>=0){\r\n                    renderedLinesCollection[line_name][\"size\"] = renderedLinesCollection[line_name][\"size\"] + 1;\r\n                }else{\r\n                    renderedLinesCollection[line_name] = line_package;\r\n                }\r\n            }\r\n            // Serialize lines collection.\r\n            let renderedLinesList = Object.keys(renderedLinesCollection).map((d:any)=>{\r\n                return renderedLinesCollection[d];\r\n            });\r\n\r\n            // Get highlight node id in individual view.\r\n            for(let i = 0; i<renderedLinesList.length; i++){\r\n                for(let id=1;id<=4;id++){\r\n                    let corr_id = renderedLinesList[i][\"\"+id];\r\n                    if(local_cluster_highlightNodeIdDict[\"\"+id].indexOf(corr_id)>=0){\r\n\r\n                    }else{\r\n                        local_cluster_highlightNodeIdDict[\"\"+id].push(corr_id);\r\n                    }\r\n                }\r\n                \r\n            }\r\n            this.cluster_hoveredNodeIdDict = local_cluster_highlightNodeIdDict;\r\n            this.cluster_hoveredLinesList = renderedLinesList;\r\n            //console.log(\"cluster_hoveredLinesList\", this.cluster_hoveredLinesList);\r\n        }else if(this.aggregationMode === 2){\r\n            this.detail_hoveredNodeIdList = hoveredNodeIdList;\r\n            let renderedLinesList:any [] = [];\r\n            for(let i = 0; i<hoveredNodeIdList.length; i++){\r\n                let linepackage:any = {\r\n                    \"size\":1\r\n                }\r\n                let line_name:any = \"LINE_\";\r\n                for(let id = 1;id<=4;id++){\r\n                    linepackage[\"\"+id] = hoveredNodeIdList[i];\r\n                    line_name = line_name+hoveredNodeIdList[i]+\"_\";\r\n                }\r\n                linepackage[\"name\"] = line_name;\r\n                renderedLinesList.push(linepackage);\r\n            }\r\n            this.detail_hoveredLinesList = renderedLinesList;\r\n        }\r\n        \r\n    }\r\n    public updateFullHoveredStatus(){\r\n        for(let id=1;id<=4;id++){\r\n            this.updateSingleHoveredStatus(id);\r\n        }\r\n    }\r\n    public updateSingleHoveredStatus(id:number){\r\n        if(this.aggregationMode === 1){\r\n            if(this.cluster_highlightNodeIdDict[\"\"+id]){\r\n\r\n            }else{\r\n                this.cluster_highlightNodeIdDict[\"\"+id]=[];\r\n            }\r\n            if(this.cluster_hoveredNodeIdDict[\"\"+id]){\r\n\r\n            }else{\r\n                this.cluster_hoveredNodeIdDict[\"\"+id]=[];\r\n            }\r\n            this.updateHoveredStatus(this.cluster_hoveredNodeIdDict[\"\"+id], this.cluster_highlightNodeIdDict[\"\"+id], id);\r\n            \r\n        }else if(this.aggregationMode === 2){\r\n            this.updateHoveredStatus(this.detail_hoveredNodeIdList, this.detail_highlightNodeIdList, id);\r\n        }\r\n    }\r\n    public updateHoveredStatus(hoveredNodeIdList:any, highlightNodeIdList:any, id:number){\r\n        console.log(\"updateHoveredStatus\", hoveredNodeIdList, id);\r\n        var top_svg = d3.select(\"#\"+\"ScatterPlot_sub_\"+id);\r\n        var svg = top_svg.select(\"g.main_drawings\");\r\n        var nodes = svg.selectAll(\"g.nodes\")\r\n        var hoveredNodes = nodes.filter((d:any)=>{\r\n            if(hoveredNodeIdList.indexOf(d.data.Data_id)>=0){\r\n                //if(highlightNodeIdList.indexOf(d.data.Data_id)>=0){\r\n                d.hovered = true;\r\n                return true;\r\n                //}\r\n            }\r\n            d.hovered = false;\r\n            return false;\r\n        })\r\n        nodes\r\n            .classed(\"hovered\", false);\r\n        hoveredNodes\r\n            .classed(\"hovered\", true);\r\n    }\r\n    public initialize(filters:any, PCPJson:any){\r\n        this.reset();\r\n        this.filters = filters;\r\n        this.PCPJson = PCPJson;\r\n        //let {filters, PCPJson} = this.props;\r\n        this.selectedNodeList = this.constructSelectedNodeList(filters, PCPJson);\r\n        this.pie_name = PCPJson[\"pie_name\"];\r\n        for(let i = 1; i<=4; i++){\r\n            //this.getDataPackage(i);\r\n            this.CacheDataPackage[\"\"+i] = this.computeDistance(i);\r\n        }\r\n        this.initialize_flag = true;\r\n    }\r\n    public checkinitialize(){\r\n        return this.initialize_flag;\r\n    }\r\n    public reset(){\r\n        this.CacheDataPackage = {};\r\n        this.filters = {};\r\n        this.PCPJson = {};\r\n        this.pie_name = [];\r\n        this.selectedNodeList = [];\r\n        this.initialize_flag = false;\r\n\r\n        this.cluster_selectedNodeIdIndex = [];\r\n        this.cluster_highlightNodeIdDict = {};\r\n        this.detail_highlightNodeIdList = [];\r\n        this.cluster_renderedLinesList = [];\r\n        this.detail_renderedLinesList = [];\r\n        this.cluster_rawHighlightNodeIdList = [];\r\n        this.detail_rawHighlightNodeIdList = [];\r\n\r\n        this.cluster_hoveredNodeIdDict = {};\r\n        this.detail_hoveredNodeIdList = [];\r\n        this.cluster_rawHoveredNodeIdList = [];\r\n        this.detail_rawHoveredNodeIdList = [];\r\n        this.cluster_hoveredLinesList = [];\r\n        this.detail_hoveredLinesList = [];\r\n\r\n        this.aggregationMode = 1;\r\n    }\r\n    public reconstructDataPackage(datapackage:any){\r\n        let new_selectedNodeIdIndex = this.cluster_selectedNodeIdIndex;\r\n        let matrix = datapackage[\"matrix\"];\r\n        let selectedNodeList = datapackage[\"selectedNodeList\"];\r\n        let new_selectedNodeList = new_selectedNodeIdIndex.map((d:any)=>{\r\n            return selectedNodeList[d];\r\n        })\r\n        let new_matrix = new_selectedNodeIdIndex.map((i:any)=>{\r\n            return new_selectedNodeIdIndex.map((j:any)=>{\r\n                return matrix[i][j];\r\n            })\r\n        })\r\n        let new_package = {\r\n            ...datapackage,\r\n            \"matrix\":new_matrix,\r\n            \"selectedNodeList\":new_selectedNodeList\r\n        }\r\n        return new_package;\r\n    }\r\n    public getDataPackage(showMode:number, aggregationMode:number){\r\n        if(Object.keys(this.CacheDataPackage).indexOf(\"\"+showMode)>=0){\r\n            let aggregation : string = \"cluster\";\r\n            if(aggregationMode === 1){\r\n                aggregation = \"cluster\";\r\n                return this.CacheDataPackage[\"\"+showMode][aggregation];\r\n            }else if(aggregationMode === 2){\r\n                aggregation = \"detail\";\r\n                let cluster_rawNodeNum = this.cluster_selectedNodeIdIndex.length;\r\n                if(cluster_rawNodeNum <= 0){\r\n                    return this.CacheDataPackage[\"\"+showMode][aggregation];\r\n                }else{\r\n                    return this.reconstructDataPackage(this.CacheDataPackage[\"\"+showMode][aggregation])\r\n                }\r\n            }\r\n            \r\n        }else{\r\n            //this.CacheDataPackage[\"\"+showMode] = this.computeDistance(showMode);\r\n            //return this.CacheDataPackage[\"\"+showMode];\r\n            return {}\r\n        }\r\n    }\r\n    public getSquareDistance(array1:any, array2:any){\r\n        let dis = 0;\r\n        for(let i = 0; i < array1.length; i++){\r\n            dis = dis +  Math.pow(Math.abs(array1[i]-array2[i]),2);\r\n        }\r\n        return dis;\r\n    }\r\n    public transformCNtoList(cn:any){\r\n        return [cn.cgt_ngt, cn.cgt_npt, cn.cpt_ngt, cn.cpt_npt];\r\n\r\n    }\r\n    public getDistance(selected_node_info_a:any, selected_node_info_b:any, additional_info:any, showMode:number){\r\n        // 1 -> ground truth label / prediction label\r\n        // 2 -> shortest path distance / center neighbor consistency rate.\r\n        // 3 -> shortest path distance train nodes label distribution\r\n        // 4 -> topkfs train nodes label distribution\r\n        let getSquareDistance = this.getSquareDistance;\r\n        let transformCNtoList = this.transformCNtoList;\r\n        let dis:number = 0;\r\n        let pie_name = additional_info[\"pie_name\"];\r\n        let key_model_name = pie_name[0];\r\n        let model_pred_label = []\r\n        for(let i = 0; i< pie_name.length; i++){\r\n            model_pred_label.push(pie_name[i] + \"_Prediction_Label\")\r\n        }\r\n        \r\n        if(showMode=== 1){\r\n            let columns = [\"Ground_Truth_Label\"];\r\n            for(let i = 0; i<model_pred_label.length; i++){\r\n                columns.push(model_pred_label[i]);\r\n            }\r\n            for(let i =0 ;i<columns.length; i++){\r\n                if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n\r\n                }else{\r\n                    dis = dis + 1;\r\n                }\r\n            }\r\n\r\n            let conf_a = selected_node_info_a[key_model_name+\"_Confidence\"];\r\n            let conf_b = selected_node_info_b[key_model_name+\"_Confidence\"];\r\n            dis = dis + Math.pow(Math.abs(conf_a-conf_b), 2);\r\n\r\n        }else if(showMode === 2){\r\n            let columns = [\"Ground_Truth_Label\"];\r\n        \r\n            for(let i =0 ;i<columns.length; i++){\r\n                if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n\r\n                }else{\r\n                    dis = dis + 1;\r\n                }\r\n            }\r\n           let degree_a = selected_node_info_a.Real_Degree;\r\n           let degree_b = selected_node_info_b.Real_Degree;\r\n           let max_degree = additional_info[\"max_degree\"];\r\n           degree_a = degree_a / max_degree;\r\n           degree_b = degree_b / max_degree;\r\n           dis = dis + Math.pow(Math.abs(degree_a-degree_b), 2);\r\n            let cn_diff = getSquareDistance(transformCNtoList(selected_node_info_a.CN_consistency)\r\n            , transformCNtoList(selected_node_info_b.CN_consistency));\r\n            dis = dis + cn_diff;\r\n        }else if(showMode === 3){\r\n            let columns = [model_pred_label[0]];\r\n        \r\n            for(let i =0 ;i<columns.length; i++){\r\n                if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n\r\n                }else{\r\n                    dis = dis + 1;\r\n                }\r\n            }\r\n            let spd_label_diff = getSquareDistance(selected_node_info_a.Spd_node_info, selected_node_info_b.Spd_node_info);\r\n            dis = dis + spd_label_diff;\r\n\r\n            /*let distance_a = selected_node_info_a.Shortest_Path_Distance_to_Train_Nodes;\r\n            let distance_b = selected_node_info_b.Shortest_Path_Distance_to_Train_Nodes;\r\n            if(distance_a === \"inf\"){\r\n                distance_a = 0;\r\n            }else{\r\n                distance_a = 1/(1+distance_a);\r\n            }\r\n            if(distance_b === \"inf\"){\r\n                distance_b = 0;\r\n            }else{\r\n                distance_b = 1/(1+distance_b);\r\n            }\r\n            dis = dis + (distance_a-distance_b)*(distance_a-distance_b);*/\r\n            let transformed_distance_a = selected_node_info_a.Transformed_Distance;\r\n            let transformed_distance_b = selected_node_info_b.Transformed_Distance;\r\n            dis = dis + (transformed_distance_a-transformed_distance_b)*(transformed_distance_a-transformed_distance_b);\r\n\r\n\r\n\r\n        }else if(showMode === 4){\r\n            let columns = [model_pred_label[0]];\r\n        \r\n            for(let i =0 ;i<columns.length; i++){\r\n                if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n\r\n                }else{\r\n                    dis = dis + 1;\r\n                }\r\n            }\r\n            let topk_label_diff = getSquareDistance(selected_node_info_a.Topkfs_node_info, selected_node_info_b.Topkfs_node_info);\r\n            dis = dis + topk_label_diff;\r\n        }\r\n        \r\n        \r\n        \r\n        return Math.sqrt(dis);\r\n    }\r\n    public constructSelectedNodeList(filters:any, PCPJson:any){\r\n        let data = PCPJson.PSData.slice();\r\n        let filterData:any[] = [];\r\n        \r\n        let filters_key = Object.keys(filters);\r\n        const selected = (d:any)=>{\r\n            if(filters_key.length>0){\r\n                for(let i = 0; i< filters_key.length;i ++){\r\n                    if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }else{\r\n                return true;\r\n            }\r\n        }\r\n        data.forEach((d:any,index:number)=>{\r\n            if(selected(d)){\r\n                let dataInstance = d;\r\n                filterData.push(dataInstance);\r\n            }\r\n        })\r\n        return filterData;\r\n    }\r\n    public aggregateSelectedNodeList(filter_selectedNodeList:any, columns:any, vector_type:any){\r\n        let data_package:any = {};\r\n        if(filter_selectedNodeList.length>=1){\r\n            for(let i = 0; i<columns.length; i++){\r\n                \r\n                let type = vector_type[i];\r\n                let name = columns[i];\r\n                if(type === \"categorical\"){\r\n                    let distribution :any = {};\r\n                    for(let j = 0; j<filter_selectedNodeList.length; j++){\r\n                        let key = filter_selectedNodeList[j][name];\r\n                        if(Object.keys(distribution).indexOf(key)>=0){\r\n                            distribution[key] = distribution[key] + 1;\r\n                        }else{\r\n                            distribution[key] = 1;\r\n                        }    \r\n                    }\r\n                    let keys = Object.keys(distribution);\r\n                    let max_key = keys[0];\r\n                    let max_num = distribution[max_key];\r\n                    for(let k=1; k<keys.length;k++){\r\n                        if(max_num<distribution[keys[k]]){\r\n                            max_num = distribution[keys[k]];\r\n                            max_key = keys[k];\r\n                        }\r\n                    }\r\n                    data_package[name] = max_key;\r\n                }else if(type === \"continuous\"){\r\n                    let summation:any = 0;\r\n                    for(let j = 0; j<filter_selectedNodeList.length; j++){\r\n                        let value = filter_selectedNodeList[j][name];\r\n                        summation = summation + value;\r\n                    }\r\n                    let mean = summation / filter_selectedNodeList.length;\r\n                    data_package[name] = mean;\r\n                }else if(type === \"dict_continuous\"){\r\n                    let new_columns = Object.keys(filter_selectedNodeList[0][name]);\r\n\r\n                    let new_vector_type:any[] = [];//[\"continuous\"]\r\n                    for(let j = 0; j<new_columns.length;j++){\r\n                        new_vector_type.push(\"continuous\");\r\n                    }\r\n                    let new_node_list:any = [];\r\n                    for(let j = 0; j<filter_selectedNodeList.length; j++){\r\n                        new_node_list.push(filter_selectedNodeList[j][name]);\r\n                    }\r\n                    //console.log(\"running filter_selectedNodeList new_vector_type new_columns new_node_list\", filter_selectedNodeList, new_vector_type, new_columns, new_node_list);\r\n\r\n                    let result_package = this.aggregateSelectedNodeList(new_node_list, new_columns, new_vector_type);\r\n                    data_package[name] = result_package;\r\n                }else if(type === \"vector_continuous\"){\r\n                    let vector_summation : any[] = [];\r\n                    let vector_length : number = filter_selectedNodeList[0][name].length;\r\n                    for(let j = 0; j<vector_length; j++){\r\n                        vector_summation[j] = 0;\r\n                    }\r\n                    for(let k = 0; k<filter_selectedNodeList.length; k++){\r\n                        for(let j = 0; j<vector_length; j++){\r\n                            vector_summation[j] = vector_summation[j] + filter_selectedNodeList[k][name][j];\r\n                        }\r\n                    }\r\n                    for(let j = 0; j<vector_length; j++){\r\n                        vector_summation[j] = vector_summation[j] / filter_selectedNodeList.length;\r\n                    }\r\n                    data_package[name] = vector_summation;\r\n                }\r\n\r\n    \r\n            }\r\n            return data_package;\r\n        }else{\r\n            return data_package;\r\n        }\r\n        \r\n    }\r\n    public transformClusterRoot(root:any, selectedNodeList:any, showMode:any, additional_info:any){\r\n        let filter_selectedNodeList:any[] = [];\r\n        let id_list = root.id_list;\r\n        let raw_id_list:any[] = [];\r\n        for(let i = 0; i<id_list.length; i++){\r\n            filter_selectedNodeList.push(selectedNodeList[id_list[i]]);\r\n        }\r\n        for(let i = 0; i<id_list.length; i++){\r\n            raw_id_list.push(filter_selectedNodeList[i][\"Data_id\"]);\r\n        }\r\n        let pie_name = additional_info[\"pie_name\"];\r\n        let key_model_name = pie_name[0];\r\n        if(showMode === 1){\r\n            let columns = [\"Ground_Truth_Label\"];\r\n            let vector_type = [\"categorical\"];\r\n            for(let i = 0 ; i< pie_name.length; i++){\r\n                columns.push(pie_name[i] + \"_Prediction_Label\");\r\n                vector_type.push(\"categorical\");\r\n            }\r\n            columns.push(pie_name[0] + \"_Confidence\")\r\n            vector_type.push(\"continuous\");\r\n            \r\n            let data_package:any = {};\r\n            data_package = this.aggregateSelectedNodeList(filter_selectedNodeList, columns, vector_type);\r\n            let color:any = [getCoraNodeColor(data_package[\"Ground_Truth_Label\"], 2)]; \r\n            for(let i = 0; i<pie_name.length; i++){\r\n                color.push(getCoraNodeColor(data_package[pie_name[i]+\"_Prediction_Label\"],3))\r\n            }\r\n            color.push(\"#fff\");\r\n            data_package[\"Color\"]=color;\r\n            data_package[\"id_list\"] = id_list;\r\n            data_package[\"raw_id_list\"] = raw_id_list;\r\n            data_package[\"size\"] = id_list.length;\r\n            return data_package;\r\n        }else if(showMode === 2){\r\n            // Ground truth, real degree, cn_1, cn_2, cn_3, cn_4\r\n            let columns = [\"Ground_Truth_Label\", \"Real_Degree\", \"CN_consistency\"];\r\n            let vector_type = [\"categorical\", \"continuous\", \"dict_continuous\"];\r\n            let data_package:any = {};\r\n            data_package = this.aggregateSelectedNodeList(filter_selectedNodeList, columns, vector_type);\r\n            let color:any = [getCoraNodeColor(data_package[\"Ground_Truth_Label\"], 2), \r\n                \"#fff\",\r\n                \"#fff\",\r\n                \"#fff\",\r\n                \"#fff\"\r\n            ]; \r\n            data_package[\"Color\"]=color;\r\n            data_package[\"id_list\"] = id_list;\r\n            data_package[\"raw_id_list\"] = raw_id_list;\r\n            data_package[\"size\"] = id_list.length;\r\n            return data_package;\r\n            //this.vector_type = [\"categorical\", \"continuous\", \"continuous\", \"continuous\", \"continuous\", \"continuous\"];\r\n        }else if(showMode === 3){\r\n            // prediction label, SPD INFO\r\n            let columns = [key_model_name+\"_Prediction_Label\", \"Spd_node_info\",\"Transformed_Distance\"];\r\n            let vector_type = [\"categorical\",  \"vector_continuous\",\"continuous\"];\r\n            let data_package:any = {};\r\n            data_package = this.aggregateSelectedNodeList(filter_selectedNodeList, columns, vector_type);\r\n            let color:any = [\"#fff\", \r\n                getCoraNodeColor(data_package[key_model_name+\"_Prediction_Label\"], 3),\r\n                \"#fff\",\r\n                \"#fff\",\r\n                \"#fff\"\r\n            ]; \r\n            data_package[\"Color\"]=color;\r\n            data_package[\"id_list\"] = id_list;\r\n            data_package[\"raw_id_list\"] = raw_id_list;\r\n            data_package[\"size\"] = id_list.length;\r\n            return data_package;\r\n        }else if(showMode === 4){\r\n            // predication label, topkfs\r\n            //this.vector_type = [\"categorical\"];\r\n            let columns = [key_model_name + \"_Prediction_Label\",\"Topkfs_node_info\"];\r\n            let vector_type = [\"categorical\", \"vector_continuous\"];\r\n            let data_package:any = {};\r\n            data_package = this.aggregateSelectedNodeList(filter_selectedNodeList, columns, vector_type);\r\n            // ** Problematic\r\n            if(filter_selectedNodeList.length>=1){\r\n                let total_topkfs_nodes:any[] = [];\r\n                for(let i = 0; i<filter_selectedNodeList.length; i++){\r\n                    total_topkfs_nodes = total_topkfs_nodes.concat(filter_selectedNodeList[i][\"Topkfs_nodes\"]);\r\n                }\r\n                total_topkfs_nodes.sort((a:any,b:any)=>{\r\n                    return a.anchor_similarity>b.anchor_similarity?-1:1\r\n                })\r\n                let topkfs_nodes = total_topkfs_nodes.slice(0,5);\r\n                topkfs_nodes.sort((a:any,b:any)=>{\r\n                    return a.anchor_label<b.anchor_label?-1:1\r\n                })\r\n                data_package[\"Topkfs_nodes\"] = topkfs_nodes;\r\n\r\n            }\r\n            let color:any = [\"#fff\", \r\n                getCoraNodeColor(data_package[key_model_name+\"_Prediction_Label\"], 3),\r\n                \"#fff\",\r\n                \"#fff\",\r\n                \"#fff\"\r\n            ]; \r\n            data_package[\"Color\"]=color;\r\n            data_package[\"id_list\"] = id_list;\r\n            data_package[\"raw_id_list\"] = raw_id_list;\r\n            data_package[\"size\"] = id_list.length;\r\n            return data_package;\r\n        }\r\n        return {}\r\n    }\r\n    public computeDistanceMatrix(selectedNodeList:any, additional_info:any, showMode:any){\r\n        let matrix : any [] = [];\r\n        let getDistance = this.getDistance;\r\n        for(let i = 0; i<selectedNodeList.length; i++){\r\n            let matrix_row:any[] = [];\r\n            for(let j = 0; j<selectedNodeList.length; j++){\r\n                matrix_row.push(getDistance(selectedNodeList[i], selectedNodeList[j], additional_info, showMode));\r\n            }\r\n            matrix.push(matrix_row);\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n\r\n\r\n    public renderLines(enableLines:any,  width:number, height:number){\r\n        /**\r\n         * It will be automatically updated the status of lines according to the data in class.\r\n         */\r\n        if(enableLines){\r\n            //let highlightNodeIdList = this.highlightNodeIdList;\r\n            //let highlightNodeIdList = this.state.highlightNodeIdList;\r\n            let data_list = [];\r\n            \r\n            let all_data = [];\r\n            \r\n            for(let id = 1; id<=4; id++){\r\n                let highlightNodeIdList:any; \r\n                if(this.aggregationMode === 1){\r\n                    if(this.cluster_highlightNodeIdDict[\"\"+id]){\r\n\r\n                    }else{\r\n                        this.cluster_highlightNodeIdDict[\"\"+id] = [];\r\n                    }\r\n                    highlightNodeIdList = this.cluster_highlightNodeIdDict[\"\"+id];\r\n                }else{\r\n                    highlightNodeIdList = this.detail_highlightNodeIdList;\r\n                }\r\n                \r\n                var top_svg = d3.select(\"#\"+\"ScatterPlot_sub_\"+id);\r\n                var svg = top_svg.select(\"g.main_drawings\");\r\n                var nodes = svg.selectAll(\"g.nodes\");\r\n                var point_array_data:any = {};\r\n                nodes.data().forEach((d:any)=>{\r\n                    if(highlightNodeIdList.indexOf(d.data.Data_id)>=0){\r\n                        point_array_data[d.data.Data_id] = {\r\n                            \"x\":d.x,\r\n                            \"y\":d.y\r\n                        }\r\n                    }else{\r\n                    }\r\n                })\r\n                all_data.push({\r\n                    \"id\":id,\r\n                    \"point_array\":point_array_data\r\n                });\r\n            }\r\n            let marginLeft = 20, marginRight = 20;\r\n            let marginTop = 20, marginBottom = 62;\r\n            let projectionHeight = height - marginBottom - marginTop;\r\n            let gap = 10;\r\n            let projectionWidth = (width - marginLeft - marginRight) / 4  - gap;\r\n            let successflag = true;\r\n            let renderedLinesList:any[] = [];\r\n            let hoveredLinesList:any[] = [];\r\n            if(this.aggregationMode === 1){\r\n                renderedLinesList = this.cluster_renderedLinesList;\r\n                hoveredLinesList = this.cluster_hoveredLinesList;\r\n            }else if(this.aggregationMode === 2){\r\n                renderedLinesList = this.detail_renderedLinesList;\r\n                hoveredLinesList = this.detail_hoveredLinesList;\r\n            }\r\n            \r\n            hoveredLinesList = hoveredLinesList.map((d:any)=>{\r\n                return d[\"name\"];\r\n            })\r\n            for(let i = 0; i<renderedLinesList.length; i++){\r\n                //let node_id = highlightNodeIdList[i];\r\n                let line_package = renderedLinesList[i];\r\n                let line_name = line_package[\"name\"];\r\n                let hovered: boolean = false;\r\n                if(hoveredLinesList.indexOf(line_name)>=0){\r\n                    hovered = true;\r\n                }\r\n                line_package[\"hovered\"] = hovered;\r\n                let coords = [];\r\n                for(let j = 0 ; j<all_data.length; j++){\r\n                    let id = j+1;\r\n                    let node_id = line_package[\"\"+id];\r\n                    if(all_data[j][\"point_array\"][node_id]){\r\n                        let startX = marginLeft + (j)*(projectionWidth+gap);\r\n                        let startY = marginTop;\r\n                        let new_x = all_data[j][\"point_array\"][node_id][\"x\"] + startX;\r\n                        let new_y = all_data[j][\"point_array\"][node_id][\"y\"] + startY;\r\n                        let new_coords = [new_x, new_y];\r\n                        coords.push(new_coords);\r\n                    }else{\r\n                        successflag = false;\r\n                        break;\r\n                    }\r\n                    \r\n                }\r\n                if(!successflag){\r\n                    break;\r\n                }\r\n                data_list.push({\r\n                    \"line_package\":line_package,\r\n                    \"coords\": coords\r\n                })\r\n            }\r\n            \r\n            \r\n            if(!successflag){\r\n                data_list = [];\r\n            }\r\n            //console.log(\"data list\", data_list);\r\n            \r\n            var connectionPath = d3.select(\"#connectionPath\");\r\n            if(connectionPath){\r\n                var lines = connectionPath.selectAll(\"path\")\r\n                .data(data_list, function(d:any){\r\n                    return d.line_package.name;\r\n                })\r\n                //console.log(\"line enter, update, exit\", lines.enter(), lines, lines.exit());\r\n                //var lineGenerator = d3.line().curve(d3.curveMonotoneY)\r\n                var lineGenerator = d3.line().curve(d3.curveNatural);\r\n                let constructPointStr = (d:any)=>{\r\n                    /*let str = \"\";\r\n                    for(let i = 0 ; i<d.coords.length; i++){\r\n                        let point = d.coords[i];\r\n                        str = str + point[0]+\",\"+point[1]+\" \";\r\n                    }\r\n                    return str;*/\r\n                    return lineGenerator(d.coords.slice());\r\n                }\r\n               \r\n                var line_enter = lines.enter().append(\"path\");\r\n                var line_enter_update = line_enter.merge(lines);\r\n                lines.exit().remove();\r\n                line_enter_update.attr(\"d\", constructPointStr)\r\n                .style(\"fill\",\"none\")\r\n                .style(\"stroke\",(d:any)=>{\r\n                    if(d.line_package.hovered === true){\r\n                        return \"#000\";\r\n                    }else{\r\n                        return \"#999\";\r\n                    }\r\n                })\r\n                .style(\"stroke-width\",(d:any)=>{\r\n                    return 1.5*Math.sqrt(d.line_package.size)\r\n                })\r\n                .style(\"opacity\", 0.5)\r\n                ;\r\n            }\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n\r\n    public updateHighlightStatus(highlightNodeIdList:any, id:number){\r\n        /**\r\n         * Description:\r\n         * According to the this.props.highlightNodeIdList, it will update the style of the corresponding nodes.\r\n         * HighlightNodes : \r\n         * Style: \r\n         *      lasso_selected -> true,\r\n         *      lasso_unsekected -> false\r\n         * OtherNodes: \r\n         * Style:\r\n         *      lasso_not_possible -> false,\r\n         *      lasso_possible -> false,\r\n         *      lasso_selected -> false,\r\n         *      If there are highlight nodes, lasso_unselected -> true,\r\n         *      else: lasso_unselected -> false\r\n         */\r\n        //let highlightNodeIdList = this.props.highlightNodeIdList;\r\n        var top_svg = d3.select(\"#\"+\"ScatterPlot_sub_\"+id);\r\n        var svg = top_svg.select(\"g.main_drawings\");\r\n        var nodes = svg.selectAll(\"g.nodes\")\r\n        var selectedNodes = nodes.filter((d:any)=>{\r\n            if(highlightNodeIdList.indexOf(d.data.Data_id)>=0){\r\n                d.selected = true;\r\n                return true;\r\n            }else{\r\n                d.selected = false;\r\n                return false;\r\n            }\r\n        })\r\n        nodes\r\n            .classed(\"lasso_not_possible\",false)\r\n            .classed(\"lasso_possible\",false)\r\n            .classed(\"lasso_selected\",false)\r\n            ;\r\n        if(highlightNodeIdList.length>0){\r\n            nodes.classed(\"lasso_unselected\", true);\r\n        }else{\r\n            nodes.classed(\"lasso_unselected\",false);\r\n        }\r\n        // Style the selected dots\r\n        selectedNodes\r\n            .classed(\"lasso_unselected\", false)\r\n            .classed(\"lasso_selected\",true)\r\n            \r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public constructInvertedIndex(selectedNodeList:any){\r\n        let invertedIndex : any = {\r\n\r\n        }\r\n        for(let i = 0; i<selectedNodeList.length; i++){\r\n            let id = selectedNodeList[i][\"Data_id\"];\r\n            let corresponding_id_list = selectedNodeList[i][\"id_list\"];\r\n            for(let j = 0; j<corresponding_id_list.length; j++){\r\n                invertedIndex[corresponding_id_list[j]] = id;\r\n            }\r\n        }\r\n        return invertedIndex;\r\n    }\r\n\r\n    public computeDistance(showMode:any){\r\n        /*if(!this.checkinitialize()){\r\n            console.log(\"not initialized\");\r\n            return {}\r\n        }*/\r\n        //let getDistance = this.getDistance;\r\n        let transformCNtoList = this.transformCNtoList;\r\n        //let filters = this.filters;\r\n        //let PCPJson = this.PCPJson;\r\n        let pie_name = this.pie_name;\r\n        let selectedNodeList = this.selectedNodeList;\r\n        //let {filters, PCPJson} = this.props;\r\n        //let selectedNodeList = this.constructSelectedNodeList(filters, PCPJson);\r\n        //if(selectedNodeList.length>=300){\r\n        //    return ;\r\n        //}\r\n        var matrix:any[] = [];\r\n        var cluster_matrix:any[] = [];\r\n        var vectors:any[] = [];\r\n        var cluster_selectedNodeList:any[] = [];\r\n        \r\n        let max_shortest_path_distance = 0;\r\n        let max_degree = 1;\r\n        let additional_info:any = {}\r\n        for(let i = 0; i<selectedNodeList.length; i++){\r\n            // Statistics\r\n            let spd:any = selectedNodeList[i].Shortest_Path_Distance_to_Train_Nodes;\r\n            if(spd!== \"inf\"){\r\n                if(spd>max_shortest_path_distance){\r\n                    max_shortest_path_distance=spd;\r\n                }\r\n            }\r\n            let degree = selectedNodeList[i].Real_Degree;\r\n            if(degree>max_degree){\r\n                max_degree = degree;\r\n            }\r\n\r\n            // Augmented\r\n            selectedNodeList[i][\"size\"]=1;\r\n            selectedNodeList[i][\"id_list\"] = [selectedNodeList[i][\"Data_id\"]];\r\n            selectedNodeList[i][\"raw_id_list\"] = [selectedNodeList[i][\"Data_id\"]];\r\n        }\r\n        additional_info[\"max_shortest_path_distance\"] = max_shortest_path_distance;\r\n        additional_info[\"max_degree\"] = max_degree;\r\n        additional_info[\"pie_name\"] = pie_name;\r\n        matrix = this.computeDistanceMatrix(selectedNodeList, additional_info, showMode);\r\n        let key_model_name = pie_name[0];\r\n        if(showMode === 1){\r\n            let columns = [\"Ground_Truth_Label\"];\r\n            for(let i = 0; i<pie_name.length; i++){\r\n                columns.push(pie_name[i]+\"_Prediction_Label\");\r\n            }\r\n            columns.push(key_model_name+\"_Confidence\");\r\n            for(let i = 0; i<selectedNodeList.length; i++){\r\n                let vector = [];\r\n                let selectednode = selectedNodeList[i];\r\n                for(let j = 0; j<columns.length; j++){\r\n                    vector.push(selectednode[columns[j]]);\r\n                }\r\n                vectors.push(vector);\r\n            }\r\n        }else if(showMode === 2){\r\n            let columns = [\"Ground_Truth_Label\"];\r\n            for(let i = 0; i<selectedNodeList.length; i++){\r\n                let vector:any = [];\r\n                let selectednode = selectedNodeList[i];\r\n                vector.push(selectednode[columns[0]]);\r\n                vector.push(selectednode.Real_Degree);\r\n                vector = vector.concat(transformCNtoList(selectednode.CN_consistency));\r\n                vectors.push(vector);\r\n            }\r\n        }else if(showMode === 3){\r\n            let columns = [key_model_name + \"_Prediction_Label\"];\r\n            for(let i = 0; i<selectedNodeList.length; i++){\r\n                let vector:any = [];\r\n                let selectednode = selectedNodeList[i];\r\n                \r\n                vector.push(selectednode[columns[0]]);\r\n                vector = vector.concat(selectednode.Spd_node_info);\r\n                vectors.push(vector);\r\n            }\r\n        }else if(showMode === 4){\r\n            let columns = [key_model_name + \"_Prediction_Label\"];\r\n            for(let i = 0; i<selectedNodeList.length; i++){\r\n                let vector:any = [];\r\n                let selectednode = selectedNodeList[i];\r\n                \r\n                vector.push(selectednode[columns[0]]);\r\n                vector = vector.concat(selectednode.Topkfs_node_info);\r\n                vectors.push(vector);\r\n            }\r\n            \r\n        }\r\n        let limit_distance = 0.5;\r\n        let hcluster = new HCluster(showMode);\r\n        hcluster.setlinkage(\"complete\");\r\n        hcluster.setDistMatrix(matrix);\r\n        let root = hcluster.cluster(vectors,limit_distance);\r\n        let FilterData:any = [];\r\n        for(let i = 0; i<root.length; i++){\r\n            let data_package = this.transformClusterRoot(root[i], selectedNodeList, showMode, additional_info);\r\n            data_package[\"Data_id\"] = i;\r\n            FilterData.push(data_package);\r\n        }\r\n        cluster_selectedNodeList = FilterData;\r\n        cluster_matrix = this.computeDistanceMatrix(cluster_selectedNodeList, additional_info, showMode);\r\n        let invertedIndex :any = this.constructInvertedIndex(cluster_selectedNodeList);\r\n        return {\r\n            \"cluster\":{\r\n                \"mode\": \"cluster\",\r\n                \"additional_info\":additional_info,\r\n                \"matrix\":cluster_matrix,\r\n                \"selectedNodeList\":cluster_selectedNodeList,\r\n                \"highlightNodeIdList\":[],\r\n                \"invertedIndex\":invertedIndex\r\n            },\r\n            \"detail\":{\r\n                \"mode\": \"detail\",\r\n                \"additional_info\":additional_info,\r\n                \"matrix\":matrix,\r\n                \"selectedNodeList\":selectedNodeList,\r\n                \"highlightNodeIdList\":[]\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n}","import * as React from 'react';\r\nimport \"./SelectedNodeList.css\";\r\nimport { Tag,  Switch, Button, Select} from 'antd';\r\nimport {getLayoutMode, compareSelectedNodeIdList, getNodeStatisticStr, constructNeighborSet, getCoraNodeColor, getTrainColor} from '../../../helper';\r\nimport ProjectionView from './ProjectionView';\r\nimport { cluster, line } from 'd3';\r\nimport ProjectionViewNodeStatisticContainer from '../../../container/ProjectionViewNodeStatisticContainer';\r\nimport ProjectionViewComputing from './ProjectionViewComputing';\r\nconst Option = Select.Option;\r\n\r\nexport interface SelectedNodeListProps {\r\n    refreshnumber:number,\r\n    filters:any,\r\n    PCPJson:any,\r\n    changeSelectedNodeIdList: any,\r\n    width:number,\r\n    height: number,\r\n    showSource:boolean,\r\n    changeShowSource:any,\r\n    changePSSelectedNodes:any,\r\n    changeProjectionViewSelectedNodes:any,\r\n    changeProjectionViewTotalNodeNum:any\r\n}\r\n\r\nexport interface SelectedNodeListState {\r\n    currentPage:number,\r\n    enableLegends:boolean,\r\n    enableLines:boolean,\r\n    aggregationMode:number,\r\n    layoutMode:number\r\n\r\n}\r\n\r\nexport default class SelectedNodeList extends React.Component<SelectedNodeListProps, SelectedNodeListState> {\r\n    public prevSelectedNodeIdList:any[] = [];\r\n    public thisSelectedNodeIdList:any[] = [];\r\n    public InsProjectionViewComputing:any = new ProjectionViewComputing();\r\n    constructor(props: SelectedNodeListProps) {\r\n        super(props);\r\n        this.onChangeHighLightNodeIdList = this.onChangeHighLightNodeIdList.bind(this);\r\n        this.onChangeHoveredNodeIdList = this.onChangeHoveredNodeIdList.bind(this);\r\n        this.renderLines = this.renderLines.bind(this);\r\n        this.onChangeLines = this.onChangeLines.bind(this);\r\n        this.onChangeLegends = this.onChangeLegends.bind(this);\r\n        this.updateSingleHighlightNodeStatus = this.updateSingleHighlightNodeStatus.bind(this);\r\n        this.onLayoutModeChange = this.onLayoutModeChange.bind(this);\r\n        this.state = {\r\n            currentPage: 1,\r\n            enableLegends : true,\r\n            //highlightNodeIdList: [],\r\n            enableLines : true,\r\n            aggregationMode: 1, // 1-->Aggregation by clustering, 2--> Do not aggregation. \r\n            layoutMode: 1 // 1--> tSNE,  2--> UMAP\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n    componentDidUpdate(prevProps:SelectedNodeListProps, prevState:SelectedNodeListState){\r\n        if(!compareSelectedNodeIdList(this.prevSelectedNodeIdList,this.thisSelectedNodeIdList)){\r\n            // If selected node id list is updated, then propage the selected node id list. \r\n            this.props.changeSelectedNodeIdList(this.thisSelectedNodeIdList)\r\n            this.prevSelectedNodeIdList = this.thisSelectedNodeIdList.slice();\r\n            this.InsProjectionViewComputing.updateHighlightNodeIdList([]);\r\n            this.InsProjectionViewComputing.updateHoveredNodeIdList([]);\r\n            //this.setState({\r\n            //    highlightNodeIdList: []\r\n            //})\r\n        }\r\n        if(this.state.enableLines){\r\n            this.renderLines();\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    public constructSelectedNodeList(filters:any, PCPJson:any){\r\n        // Filtering data based on filters.\r\n        if(getLayoutMode() === 3){\r\n            let data = PCPJson.PSData.slice();\r\n            let filterData:any[] = [];\r\n            \r\n            let filters_key = Object.keys(filters);\r\n            const selected = (d:any)=>{\r\n                if(filters_key.length>0){\r\n                    for(let i = 0; i< filters_key.length;i ++){\r\n                        if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n            data.forEach((d:any,index:number)=>{\r\n                if(selected(d)){\r\n                    let dataInstance = d;\r\n                    filterData.push(dataInstance);\r\n                }\r\n            })\r\n            return filterData;\r\n        }\r\n    }\r\n\r\n    public renderLines(){\r\n        // this.state.highlightNodeIdList;\r\n        this.InsProjectionViewComputing.renderLines(this.state.enableLines, this.props.width, this.props.height);\r\n        \r\n    }\r\n    public onChangeHighLightNodeIdList(selectedNodeIdList:any, highlightNodeIdList:any, showMode:number){\r\n        this.props.changeSelectedNodeIdList(selectedNodeIdList.slice());\r\n        //this.props.changeProjectionViewSelectedNodes(selectedNodeIdList.length);\r\n        if(highlightNodeIdList.length === 0){\r\n            this.InsProjectionViewComputing.updateHighlightNodeIdList(highlightNodeIdList.slice(),showMode,[]);\r\n        }else{\r\n            this.InsProjectionViewComputing.updateHighlightNodeIdList(highlightNodeIdList.slice(),showMode,selectedNodeIdList.slice());\r\n        }\r\n        \r\n        this.InsProjectionViewComputing.updateNodeStatistic(this.props.changeProjectionViewSelectedNodes, this.props.changeProjectionViewTotalNodeNum);\r\n        this.renderLines();\r\n    }\r\n    public onChangeHoveredNodeIdList(rawNodeIdList:any, hoveredNodeIdList:any, showMode:number){\r\n        //console.log(\"onChangeHoveredNodeIDList\", rawNodeIdList, hoveredNodeIdList, showMode);\r\n        if(hoveredNodeIdList.length === 0){\r\n            this.InsProjectionViewComputing.updateHoveredNodeIdList(hoveredNodeIdList.slice(),showMode,[]);\r\n        }else{\r\n            this.InsProjectionViewComputing.updateHoveredNodeIdList(hoveredNodeIdList.slice(),showMode,rawNodeIdList.slice());\r\n        }\r\n        this.renderLines();        \r\n    }\r\n    public updateSingleHighlightNodeStatus(showMode:number){\r\n        this.InsProjectionViewComputing.updateFullHighlightStatus(showMode);\r\n    }\r\n    public onChangeLines(e:any){\r\n        this.setState({\r\n            enableLines : e\r\n        })\r\n    }\r\n    public onChangeLegends(e:any){\r\n        this.setState({\r\n            enableLegends : e\r\n        })\r\n    }\r\n    public onChangeAggregationMode(e:any){\r\n       this.setState({\r\n           aggregationMode: e\r\n       }) \r\n    }\r\n    public onLayoutModeChange(e:any){\r\n        this.setState({\r\n            layoutMode: e\r\n        })\r\n    }\r\n    public render() {\r\n        /*\r\n            1. Filter nodes based on filters.\r\n            2. Render 4 projection views. \r\n        */\r\n        let {filters,PCPJson} = this.props;\r\n        console.log(\"Selected Node List\", filters, PCPJson);\r\n        let layoutMode = this.state.layoutMode;\r\n        /**\r\n         * Data specification:\r\n         * \r\n         * 1. Filters:\r\n         *  Description of current selected parallel sets ribbons.\r\n         * For example,\r\n         *  {GCN_correctness: [\"Wrong\"], Label: [\"6\"]}\r\n         * \r\n         * 2. PCPJson:\r\n         *  Description of nodes.\r\n         *For example,\r\n         * {PSData: (2708) [{\r\n         *          CN_consistency: {cgt_npt: 1, cgt_ngt: 1, cpt_npt: 1, cpt_ngt: 1}\r\n                    Color: (5) [\"#d62728\", \"#d62728\", \"#d62728\", \"#d62728\", \"#000\"]\r\n                    Data_id: 0\r\n                    Degree: \"3\"\r\n                    GCN w/o features_correctness: \"Correct\"\r\n                    GCN(w/o_adj)_Prediction_Label: \"3\"\r\n                    GCN(w/o_features)_Prediction_Label: \"3\"\r\n                    GCN_Confidence: 0.9778265953063965\r\n                    GCN_Prediction_Label: \"3\"\r\n                    GCN_correctness: \"Correct\"\r\n                    GCN_one_hop_accuracy: \"1\"\r\n                    Ground_Truth_Label: \"3\"\r\n                    Label: \"3\"\r\n                    MLP_correctness: \"Correct\"\r\n                    Real_Degree: 3\r\n                    Shortest_Path_Distance_to_Train_Nodes: 0\r\n                    Spd_node_info: (7) [0, 0, 0, 1, 0, 0, 0]\r\n                    Topkfs_node_info: (7) [0, 0.2, 0.2, 0.4, 0.2, 0, 0]\r\n                    Topkfs_nodes: (5) [{…}, {…}, {…}, {…}, {…}]\r\n         * }]\r\n            accuracy: 0.8124076809453471\r\n            name: \"cora_4_1_2_CheckedList_Train_Valid_Test_Others_CheckedList_End_698_1130\"\r\n            nodenum: 2708\r\n            pie_name: (3) [\"GCN\", \"MLP\", \"GCN w/o features\"]\r\n            success: true}\r\n         * \r\n         */\r\n\r\n\r\n        let selectedNodeIdList:any, selectedNodeList:any ;\r\n        if(PCPJson[\"success\"]){\r\n            selectedNodeList = this.constructSelectedNodeList(filters, PCPJson);\r\n            selectedNodeIdList = selectedNodeList.map((d:any)=>{\r\n                return d['Data_id'];\r\n            })\r\n        }else{\r\n            selectedNodeList = [];\r\n            selectedNodeIdList = [];\r\n        }\r\n        \r\n        this.thisSelectedNodeIdList = selectedNodeIdList;\r\n        \r\n        let marginLeft = 20, marginRight = 20;\r\n        let marginTop = 20, marginBottom = 62;\r\n        let legend_height = 110;\r\n        let projectionHeight = this.props.height - marginBottom - marginTop;\r\n        let gap = 10;\r\n        let projectionWidth = (this.props.width - marginLeft - marginRight) / 4  - gap;\r\n        this.props.changePSSelectedNodes(selectedNodeList.length);\r\n        \r\n\r\n        let showModeOptions = [\r\n            [1, \"Prediction results comparison\"],\r\n            [2, \"Surrounding nodes label consistency\"],\r\n            [3, \"Training nodes structure influence\"],\r\n            [4, \"Training nodes feature influence\"],\r\n        ]\r\n        let layoutOptions = [\r\n            [1,\"t-SNE\"],\r\n            [2,\"UMAP\"]\r\n        ];\r\n        let generateAggregationModeButton = () =>{\r\n            if(this.state.aggregationMode === 1){\r\n                return <Button type=\"default\" size=\"small\" onClick={()=>{this.onChangeAggregationMode(2)}}>Detail</Button>;\r\n            }else if(this.state.aggregationMode === 2){\r\n                return <Button type=\"primary\" size=\"small\" onClick={()=>{this.onChangeAggregationMode(1)}}>Cluster</Button>\r\n            }\r\n        }\r\n        let onChangeLegends = this.onChangeLegends;\r\n        let onChangeLines = this.onChangeLines;\r\n        if(selectedNodeIdList.length>0&&selectedNodeIdList.length<300){\r\n            if(!compareSelectedNodeIdList(this.prevSelectedNodeIdList,this.thisSelectedNodeIdList)){\r\n                this.InsProjectionViewComputing.initialize(filters, PCPJson);\r\n            }else{\r\n\r\n            }\r\n            this.InsProjectionViewComputing.updateAggregationMode(this.state.aggregationMode);\r\n            this.InsProjectionViewComputing.updateNodeStatistic(this.props.changeProjectionViewSelectedNodes, this.props.changeProjectionViewTotalNodeNum);\r\n            let rawHighlightNodeIdList = this.InsProjectionViewComputing.getRawHighlightNodeIdList();\r\n            if(rawHighlightNodeIdList.length >0){\r\n                this.props.changeSelectedNodeIdList(rawHighlightNodeIdList.slice());\r\n\r\n            }\r\n\r\n            //this.props.changeProjectionViewSelectedNodes(rawHighlightNodeIdList.length);\r\n            //<Tag>{getNodeStatisticStr(rawHighlightNodeIdList.length, selectedNodeIdList.length)}</Tag>\r\n            //, overflowX: \"scroll\"\r\n            return (\r\n                <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\"}}>\r\n                    <div className=\"ViewTitle\">Projection View\r\n                    <div style={{float:'right'}}>\r\n                        {generateAggregationModeButton()}\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        Layout:&nbsp;\r\n                        <Select\r\n                            placeholder=\"Select a layout\"\r\n                            value={layoutMode}\r\n                            style={{ width: '90px' }}\r\n                            onChange={this.onLayoutModeChange}\r\n                            size=\"small\"\r\n                        >\r\n                            {layoutOptions.map((d:any)=>(\r\n                                <Option value={d[0]} key={d[0]}>\r\n                                    {d[1]}\r\n                                </Option>\r\n                            ))}\r\n                            </Select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        Legend: <Switch checked={this.state.enableLegends} onChange={onChangeLegends} />\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        Links: <Switch checked={this.state.enableLines} onChange={onChangeLines} />\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        #Nodes: <ProjectionViewNodeStatisticContainer/>\r\n                        \r\n                    </div>\r\n                                    \r\n                    </div>\r\n                    <div className=\"ViewBox\"> \r\n                    <svg\r\n                        style={{ height: \"\"+(this.props.height - marginBottom + 10)+\"px\", width: \"\"+this.props.width+\"px\" }}\r\n                        id={\"TopSVGChart_ScatterPlot\"}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            {this.state.enableLines?(<g key={\"c\"+1} id=\"connectionPath\"></g>):(<g key={\"c\"+2} id=\"connectionPath-Null\"></g>)}\r\n                            {showModeOptions.map((d:any)=>{\r\n                                return    <ProjectionView \r\n                                key={d[0]}\r\n                                id={d[0]} showMode={d[0]} \r\n                                {...this.props} \r\n                                x={marginLeft + (d[0]-1)*(projectionWidth+gap)}\r\n                                y={marginTop}\r\n                                height={projectionHeight} \r\n                                width={projectionWidth} \r\n                                name={d[1]}\r\n                                selectedNodeIdList={selectedNodeIdList}\r\n                                onChangeHighLightNodeIdList={this.onChangeHighLightNodeIdList}\r\n                                onChangeHoveredNodeIdList={this.onChangeHoveredNodeIdList}\r\n                                renderLines={this.renderLines}\r\n                                dataPackage={this.InsProjectionViewComputing.getDataPackage(d[0],this.state.aggregationMode)}\r\n                                updateSingleHighlightNodeStatus={this.updateSingleHighlightNodeStatus}\r\n                                enableLegends={this.state.enableLegends}\r\n                                layoutMode={this.state.layoutMode}\r\n                                graph_additional_info={this.props.PCPJson.graph_additional_info}\r\n                                />\r\n                            })}\r\n                            \r\n                    </svg>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        }else{\r\n            this.InsProjectionViewComputing.reset();\r\n            return <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n            \r\n            \r\n                    <div className=\"ViewTitle\">Projection View </div>\r\n            \r\n            </div>\r\n        }\r\n        \r\n    }\r\n}\r\n","import SelectedNodeList from '../components/DataRuns/ProjectionView/SelectedNodeList';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeFilters, changeSelectedNodeIdList, changeShowSource, changePSSelectedNodes, changeProjectionViewSelectedNodes, changeProjectionViewTotalNodeNum} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    filters: state.filters,\r\n    refreshnumber: state.refreshnumber,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    PCPJson: state.PSJson\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeSelectedNodeIdList:  (selectedNodeIdList:any) => dispatch(changeSelectedNodeIdList(selectedNodeIdList)),\r\n    changeShowSource: (showSource:boolean) => dispatch(changeShowSource(showSource)),\r\n    changePSSelectedNodes: (PSSelectedNodes:number) => dispatch(changePSSelectedNodes(PSSelectedNodes)),\r\n    changeProjectionViewSelectedNodes: (ProjectionViewSelectedNodes:number) => dispatch(changeProjectionViewSelectedNodes(ProjectionViewSelectedNodes)),\r\n    changeProjectionViewTotalNodeNum: (ProjectionViewTotalNodeNum:number) => dispatch(changeProjectionViewTotalNodeNum(ProjectionViewTotalNodeNum))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedNodeList);\r\n","import DataRuns from './DataRuns'\r\nexport default DataRuns;\r\n\r\n\r\n","\r\nimport './DataRuns.css'\r\nimport * as React from \"react\";\r\n//import MyFirstGrid from './MyFirstGrid';\r\nimport GraphViewContainer from '../../container/GraphViewContainer';\r\nimport MessagePassingViewContainer from '../../container/MessagePassingViewContainer';\r\nimport EmbeddingViewContainer from '../../container/EmbeddingViewContainer';\r\nimport FeatureMatrixContainer from '../../container/FeatureMatrixContainer';\r\nimport ControlPanelContainer from '../../container/ControlPanelContainer';\r\nimport PSViewContainer from '../../container/PSViewContainer';\r\nimport SelectedNodeListContainer from '../../container/SelectedNodeListContainer';\r\nimport { getGraphInfo, getGraphBundledInfo, getRulesInfo } from '../../service/dataService';\r\nimport { Select, Row, Col, Upload, Icon, Button, message, Tag } from 'antd';\r\nimport {getInfectionNodeColor, getInfectionEdgeColor} from '../../helper';\r\nimport {Tabs, Table} from 'antd';\r\nimport GridLayout from \"react-grid-layout\";\r\nconst TabPane = Tabs.TabPane\r\nconst d3 = require(\"d3\");\r\nconst Option = Select.Option;\r\n\r\n\r\nexport interface IProps {\r\n    model : number | null,\r\n    graph : number | null,\r\n    dataset_id : number | null,\r\n    explain_id : number | null,\r\n    loading_dataset: boolean,\r\n    modelList : any[],\r\n    contentWidth:number,\r\n    contentHeight:number,\r\n    changeModelsList:any,\r\n    changeSelectedModels:any,\r\n    changeLoadingDataset:any,\r\n    clearIdInfo:any\r\n}\r\nexport interface IState {\r\n    graph_object : any,\r\n    show_mode : number,\r\n    explained_node : number,\r\n    layout_config: any,\r\n    screenWidth: number,\r\n    screenHeight: number\r\n}\r\n\r\nexport default class DataRuns extends React.Component<IProps, IState>{\r\n    public PCPViewRef:any;\r\n    public GraphViewRef:any;\r\n    public FeatureMatrixViewRef:any; \r\n    public ControlPanelRef: any;\r\n    public ProjectionViewRef: any;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onShowModeChange = this.onShowModeChange.bind(this);\r\n        this.onExplainNodeChange = this.onExplainNodeChange.bind(this);\r\n        this.onResizeStop = this.onResizeStop.bind(this);\r\n        this.getLayoutConfigWithName = this.getLayoutConfigWithName.bind(this);\r\n        this.getCurrentLayoutConfig = this.getCurrentLayoutConfig.bind(this);\r\n        this.onResize = this.onResize.bind(this);\r\n        this.PCPViewRef = React.createRef();\r\n        this.GraphViewRef = React.createRef();\r\n        this.FeatureMatrixViewRef = React.createRef();\r\n        this.ControlPanelRef = React.createRef();\r\n        this.ProjectionViewRef = React.createRef();\r\n        this.state = {\r\n            graph_object:{\r\n                model : -1,\r\n                graph : -1,  \r\n            },\r\n            show_mode: 1,\r\n            explained_node: 0,\r\n            layout_config: null,\r\n            screenWidth : 0,\r\n            screenHeight: 0\r\n        }\r\n        // show_mode_specification\r\n        // 1 -> graph_input\r\n        // 2 -> graph_target\r\n        // 3 -> graph_output\r\n        // 4 -> Explain_mode\r\n        // Explained_node, default for 0.\r\n\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n     public onResize(){\r\n        this.setState({\r\n            screenHeight: window.innerHeight,\r\n             screenWidth: window.innerWidth\r\n        })\r\n     }  \r\n     componentDidMount(){\r\n        //window.addEventListener('resize', this.onResize)\r\n         this.setState({\r\n             layout_config: this.getWholeLayoutConfig(),\r\n             screenHeight: window.innerHeight,\r\n             screenWidth: window.innerWidth\r\n         })\r\n     }\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        \r\n        return true;\r\n        \r\n    }\r\n   \r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n        \r\n     }\r\n     public async getgraphdata(dataset_id:number, model:number, explain_id:number, graph:number){\r\n        let data = await getGraphInfo(dataset_id,model,explain_id,graph);\r\n        if(data[\"success\"] === true){\r\n            this.setState({\r\n                graph_object: data[\"graph_obj\"]\r\n            })\r\n        }\r\n\r\n     }\r\n     public async getGraphBundledData(dataset_id:number){\r\n         let data = await getGraphBundledInfo(dataset_id);\r\n         if(data[\"success\"] === true){\r\n            this.props.changeLoadingDataset(true);\r\n            this.props.clearIdInfo();\r\n            //let rules_data = await getRulesInfo(dataset_id);\r\n            //if(rules_data[\"success\"] === true){\r\n            //    data[\"graph_obj\"][\"rules_data\"] = rules_data[\"rule_obj\"];\r\n            data[\"graph_obj\"][\"bundle_id\"] = dataset_id;\r\n            let models_list = data[\"graph_obj\"][\"individual_model_names\"];\r\n            let selected_models_list = [];\r\n            for(let i = 0; i< 3 && i< models_list.length; i++){\r\n                selected_models_list.push(models_list[i]);\r\n            }\r\n            this.props.changeModelsList(models_list);\r\n            this.props.changeSelectedModels(selected_models_list);\r\n            this.setState({\r\n                graph_object: data[\"graph_obj\"]\r\n                })\r\n            //}\r\n            this.props.changeLoadingDataset(false);\r\n             \r\n         }\r\n     }\r\n     public getLayoutConfigWithName(name:string){\r\n         let width = 0;\r\n         let height = 0;\r\n         if(name === \"PCPView\"){\r\n            if(this.PCPViewRef){ \r\n                width = this.PCPViewRef.current.offsetWidth;\r\n                height = this.PCPViewRef.current.offsetHeight;\r\n            }\r\n         }else if(name === \"GraphView\"){\r\n             if(this.GraphViewRef){\r\n                 width = this.GraphViewRef.current.offsetWidth;\r\n                 height = this.GraphViewRef.current.offsetHeight;\r\n             }\r\n\r\n         }else if(name === \"FeatureMatrixView\"){\r\n            if(this.FeatureMatrixViewRef){\r\n                width = this.FeatureMatrixViewRef.current.offsetWidth;\r\n                height = this.FeatureMatrixViewRef.current.offsetHeight;\r\n            }\r\n         }else if(name === \"ProjectionView\"){\r\n             if(this.ProjectionViewRef){\r\n                 width = this.ProjectionViewRef.current.offsetWidth;\r\n                 height = this.ProjectionViewRef.current.offsetHeight;\r\n             }\r\n         }else if(name === \"ControlPanel\"){\r\n             if(this.ControlPanelRef){\r\n                 width = this.ControlPanelRef.current.offsetWidth;\r\n                 height = this.ControlPanelRef.current.offsetHeight;\r\n             }\r\n         }\r\n\r\n         return {\r\n             \"width\":width,\r\n             \"height\":height\r\n         }\r\n     }\r\n     public getWholeLayoutConfig(){\r\n        let viewName = [\"PCPView\", \"GraphView\", \"FeatureMatrixView\",\"ControlPanel\", \"ProjectionView\"];\r\n        let layout_config:any = {};\r\n        viewName.forEach((d:any)=>{\r\n            layout_config[d] = this.getLayoutConfigWithName(d);\r\n        })\r\n        return layout_config;\r\n     }\r\n     public getCurrentLayoutConfig(name:string){\r\n         let layout_config = this.state.layout_config;\r\n        if(layout_config){\r\n            if(layout_config[name]){\r\n                return layout_config[name];\r\n            }else{\r\n                return null;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n     }\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        if(prevProps.dataset_id!== this.props.dataset_id){\r\n            if( this.props.dataset_id  && this.props.dataset_id>=0){\r\n                this.getGraphBundledData(this.props.dataset_id);\r\n                \r\n            }else{\r\n                this.setState({\r\n                    graph_object:{\r\n                        model : -1,\r\n                        graph : -1,  \r\n                    }\r\n                })\r\n            }\r\n        }\r\n        \r\n        if(prevProps.contentHeight!==this.props.contentHeight\r\n            || prevProps.contentWidth !== this.props.contentWidth){\r\n                this.setState({\r\n                    layout_config: this.getWholeLayoutConfig()\r\n                })\r\n            }   \r\n        \r\n        \r\n        \r\n     }\r\n     \r\n    public onShowModeChange(ShowMode: number) {\r\n        this.setState({\r\n            show_mode:ShowMode\r\n        })\r\n    }\r\n    public onExplainNodeChange(ExplainedNode: number) {\r\n        this.setState({\r\n            explained_node:ExplainedNode\r\n        })\r\n    }\r\n    public onLayoutChange(layout:any){\r\n        console.log(\"Layout\", layout);\r\n    }\r\n    public onResizeStop(layout:any){\r\n        console.log(\"onResizeStop\", layout);\r\n        console.log(\"Layout\", this.getWholeLayoutConfig());\r\n        this.setState({\r\n            layout_config : this.getWholeLayoutConfig()\r\n        })\r\n        //var width = document.getElementById('a').offsetWidth;\r\n    }\r\n    public render() {\r\n        //console.log(\"Render Again\");\r\n        let {graph_object, show_mode, explained_node} = this.state;\r\n        let {modelList} = this.props;\r\n        //console.log(graph_object)\r\n        let model = -1;\r\n        let graph = -1;\r\n        let dataset_id = -1;\r\n\r\n        let common = graph_object.common;\r\n        if(common){\r\n            dataset_id = common.dataset_id;\r\n        }\r\n        \r\n        \r\n        \r\n        console.log(\"Dataruns graph_object\", graph_object);\r\n        let generateGraphView = (graph_object: any, show_mode:number, explained_node:number, \r\n            onExplainNodeChange:any, onShowModeChange:any, model:number, modelList:any[], width:number, height:number) => {\r\n            return <GraphViewContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        \r\n        let generateFeatureMatrixView = (graph_object: any, show_mode:number, explained_node:number, \r\n            onExplainNodeChange:any, onShowModeChange:any, model:number, modelList:any[], \r\n            width: number, height: number) => {\r\n            return <FeatureMatrixContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        let generatePCPView = (graph_object: any, show_mode:number, \r\n            explained_node:number, onExplainNodeChange:any, \r\n            onShowModeChange:any, model:number, modelList:any[], width:number=0, height:number=0) => {\r\n            return   <PSViewContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        \r\n        // layout is an array of objects, see the demo for more complete usage\r\n        let enableStatic = true;\r\n        let screenheight = window.innerHeight;\r\n        let max_row_num = Math.floor(this.props.contentHeight / 40);\r\n        // small width, height: 1707 724\r\n        // big width, height: 2560 1175\r\n        let ControlPanelH = 6;\r\n        let PSPanelH = max_row_num - ControlPanelH;\r\n        let ProjectionPanelH = Math.floor(max_row_num / 2);\r\n        let RH = max_row_num - ProjectionPanelH;\r\n        // 9 - 9\r\n        // 12 - 17\r\n        let layout = [\r\n            {i: 'a', x: 0, y: ControlPanelH, w: 6, h: PSPanelH, static:enableStatic}, // PS View\r\n            {i: 'b', x: 6, y: ProjectionPanelH, w: 11, h: RH, static:enableStatic}, // Graph View\r\n            {i: 'c', x: 17, y: ProjectionPanelH, w: 7, h: RH, static:enableStatic}, // Feature Matrix View\r\n            {i: 'd', x: 0, y: 0, w: 6, h: ControlPanelH, static:enableStatic},  // Control Panel\r\n            {i: 'e', x: 6, y: 0, w: 18, h: ProjectionPanelH, static:enableStatic}  // Projection View\r\n        ];\r\n        \r\n\r\n        let loading_dataset = this.props.loading_dataset;\r\n        let generateWholeView = () =>{\r\n            let screenwidth = window.innerWidth;\r\n            let screenheight = window.innerHeight;\r\n            //let viewwidth = screenwidth * 1/3;\r\n            // let viewheight = screenheight* 0.45;\r\n            \r\n            return <GridLayout className=\"layout\" layout={layout} \r\n            cols={24} rowHeight={30} width={screenwidth} onLayoutChange={this.onLayoutChange}\r\n            onResizeStop={this.onResizeStop}>\r\n                <div className=\"PanelBox\" key=\"a\" ref={this.PCPViewRef}>\r\n                    \r\n                                \r\n                        {(dataset_id>=0 && !loading_dataset && this.getCurrentLayoutConfig(\"PCPView\"))?\r\n                        generatePCPView(graph_object, show_mode, explained_node, \r\n                                this.onExplainNodeChange, this.onShowModeChange, model, modelList\r\n                                ,this.getCurrentLayoutConfig(\"PCPView\")[\"width\"], this.getCurrentLayoutConfig(\"PCPView\")[\"height\"]):\r\n                                <div />}\r\n                        \r\n\r\n                </div>\r\n                <div className=\"PanelBox\" key=\"b\" ref={this.GraphViewRef}>\r\n                {(dataset_id>=0 && !loading_dataset && this.getCurrentLayoutConfig(\"GraphView\"))?generateGraphView(graph_object, show_mode, explained_node, \r\n                                this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                                this.getCurrentLayoutConfig(\"GraphView\")[\"width\"], this.getCurrentLayoutConfig(\"GraphView\")[\"height\"]):<div />}\r\n                </div>\r\n                <div className=\"PanelBox\" key=\"c\" ref={this.FeatureMatrixViewRef}>\r\n                {(dataset_id>=0 && !loading_dataset && this.getCurrentLayoutConfig(\"FeatureMatrixView\"))?generateFeatureMatrixView(graph_object, show_mode, explained_node, \r\n                                this.onExplainNodeChange, this.onShowModeChange, model, modelList,\r\n                                this.getCurrentLayoutConfig(\"FeatureMatrixView\")[\"width\"], this.getCurrentLayoutConfig(\"FeatureMatrixView\")[\"height\"]):<div />} \r\n                </div>\r\n                <div className=\"PanelBox\" key=\"d\" ref={this.ControlPanelRef}>\r\n                    <ControlPanelContainer />\r\n                </div>\r\n                <div className=\"PanelBox\" key=\"e\" ref={this.ProjectionViewRef}>\r\n                {(dataset_id>=0 && !loading_dataset && this.getCurrentLayoutConfig(\"ProjectionView\"))?(\r\n                <SelectedNodeListContainer height={this.getCurrentLayoutConfig(\"ProjectionView\")[\"height\"]} width={this.getCurrentLayoutConfig(\"ProjectionView\")[\"width\"]}/>)\r\n                :(<div />)}\r\n\r\n                </div>\r\n            </GridLayout>\r\n            \r\n        }\r\n        \r\n        return (\r\n                generateWholeView()\r\n                \r\n        )\r\n        \r\n        \r\n\r\n    }\r\n}\r\n\r\n","import DataRuns from '../components/DataRuns'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\nimport { changeSelectedModels, changeModelsList, changeLoadingDataset,clearIdInfo } from '../actions';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    model: state.model,\r\n    graph : state.graph,\r\n    dataset_id : state.dataset_id,\r\n    explain_id : state.explain_id,\r\n    modelList : state.modelList,\r\n    loading_dataset: state.loading_dataset\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeModelsList: (value:any) => dispatch(changeModelsList(value)),\r\n    changeSelectedModels: (value:any) => dispatch(changeSelectedModels(value)),\r\n    changeLoadingDataset: (value:any) => dispatch(changeLoadingDataset(value)),\r\n    clearIdInfo: () => dispatch(clearIdInfo())\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataRuns);\r\n\r\n\r\n\r\n","import { Col, Layout, Row } from 'antd';\r\n\r\nimport React from 'react';\r\nimport logo from './logo2.png';\r\nimport './App.css';\r\nimport DataRunsContainer from '../container/DataRunsContainer';\r\n// import DataView from \"./DataView\";\r\n//import SidePanel from '../components/SidePanel';\r\nimport { getLayoutMode} from '../helper';\r\nconst { Content, Header } = Layout;\r\nexport interface IProps{\r\n\r\n}\r\nexport interface IState {\r\n    contentWidth:number,\r\n    contentHeight:number,\r\n    screenWidth:number,\r\n    screenHeight:number\r\n}\r\nclass App extends React.Component<IProps, IState> {\r\n  public ContentRef:any;\r\n  constructor(props:IProps) {\r\n      super(props);\r\n      this.ContentRef = React.createRef();\r\n      this.onResize = this.onResize.bind(this);\r\n      this.state = {\r\n          contentWidth : 0,\r\n          contentHeight: 0,\r\n          screenHeight: 0,\r\n          screenWidth :0\r\n      }\r\n\r\n  }\r\n  public getLayoutConfig(){\r\n    let contentWidth:number = 0;\r\n    let contentHeight:number = 0;\r\n    if(this.ContentRef){\r\n      contentWidth = this.ContentRef.current.offsetWidth;\r\n      contentHeight = this.ContentRef.current.offsetHeight;\r\n    }\r\n    return {\r\n      contentWidth:contentWidth, \r\n      contentHeight:contentHeight\r\n    }\r\n  }\r\n  public onResize(){\r\n    this.updateLayoutState();\r\n }  \r\n public updateLayoutState(){\r\n    let contentLayout = this.getLayoutConfig();\r\n    let contentWidth = contentLayout.contentWidth;\r\n    let contentHeight = contentLayout.contentHeight;\r\n    //console.log(\"contentWidth, height\", contentWidth, contentHeight)\r\n   this.setState({\r\n      contentWidth:contentWidth,\r\n      contentHeight:contentHeight,\r\n       screenHeight: window.innerHeight,\r\n       screenWidth: window.innerWidth\r\n   })\r\n }\r\n componentDidMount(){\r\n    window.addEventListener('resize', this.onResize)\r\n    this.updateLayoutState();\r\n }\r\n componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n  // if(prevState.contentWidth!==this.state.contentWidth || )\r\n  //this.updateLayoutState();\r\n }\r\n  public render() {\r\n    let {screenWidth, screenHeight, contentWidth, contentHeight} = this.state;\r\n    return (\r\n      <Layout className=\"app\" >\r\n          <Header className='appHeader'>\r\n          GNNLens\r\n                  <img src={logo} className='appLogo' alt-text=\"logo\"/>\r\n          </Header>\r\n          <Content className='appContent' >\r\n              <div style={{ \"height\": \"100%\", \"width\":\"100%\" }} ref={this.ContentRef}>\r\n                {(contentWidth>0 && contentHeight >0)?<DataRunsContainer contentWidth={contentWidth} contentHeight={contentHeight}/>:<div />}\r\n              </div>\r\n              <div id=\"tooltip_proj\" />\r\n              <div id=\"tooltip_matrix\" />\r\n              <div id=\"tooltip_node_title\" />\r\n          </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { MODEL_CHANGE, GRAPH_CHANGE, INIT_MODEL_LIST, DATASET_ID_CHANGE,\r\n  EXPLAIN_METHOD_ID_CHANGE, INIT_DATASET_LIST, INIT_EXPLAIN_LIST, \r\n  INIT_GRAPH_LIST, FILTERS_CHANGE, SELECTED_NODE_ID_LIST_CHANGE,\r\n  SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE, SHOW_SOURCE_CHANGE,\r\nSPECIFIC_NODE_ID_LIST_CHANGE, SELECT_INSPECT_NODE_CHANGE,CLEAR_ID_INFO, PREV_GRAPH_JSON_CHANGE,\r\nMATRIX_FILTERS_CHANGE,MATRIX_ROW_FILTERS_CHANGE, INSPECT_CATEGORY_LIST_CHANGE, PSJSON_CHANGE,PSSELECTEDNODES_CHANGE, EXTENDED_MODE_CHANGE, \r\nPROJECTIONVIEWSELECTEDNODES_CHANGE,PROJECTIONVIEWTOTALNODENUM_CHANGE, \r\nPSSETTINGMODAL_VISIBLE_CHANGE,PSDIMENSIONS_CHANGE, GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE, \r\nFEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE, GRAPHVIEWSTATE_CHANGE, \r\nKVALUE_CHANGE, SELECTEDMODELS_CHANGE, MODELSLIST_CHANGE, CHANGE_LOADING_DATASET} from '../constants';\r\nimport {StoreState} from '../types';\r\nimport {getDefaultInspectCategoryOptions} from '../helper';\r\nconst initial_state : StoreState = {\r\n    model : null,\r\n    graph : null,\r\n    dataset_id : null,\r\n    explain_id:null,\r\n    selected_models_list:[],\r\n    models_list:[],\r\n    refreshnumber: 0,\r\n    showSource: false,\r\n    modelList : [],\r\n    datasetList: [],\r\n    explainList: [],\r\n    graphList: [],\r\n    filters: {},\r\n    selectedNodeIdList: [],\r\n    selectedMessagePassingNodeIdList: [],\r\n    specificNodeIdList: [],\r\n    select_inspect_node : 0,\r\n    prevGraphJson: null,\r\n    matrixFilters: {\r\n      refreshnumber : 0\r\n    },\r\n    matrixRowFilters:{\r\n      refreshnumber : 0\r\n    },\r\n    InspectCategoryList: getDefaultInspectCategoryOptions(),\r\n    PSJson: {},\r\n    PSSelectedNodes:0,\r\n    extendedMode:1,\r\n    ProjectionViewSelectedNodes:0,\r\n    ProjectionViewTotalNodeNum:0,\r\n    PSSettingsModal_visible:false,\r\n    PSDimensions:[],\r\n    ProjectionViewSettingsModal_visible:false,\r\n    GraphViewSettingsModal_visible:false,\r\n    FeatureMatrixViewSettingsModal_visible:false,\r\n    GraphViewState:{\r\n      DisplayUnfocusedNodes:false,\r\n      DisplayOverview:true\r\n    },\r\n    K_value:5,\r\n    loading_dataset:false\r\n}\r\n// 处理并返回 state \r\nexport default (state = initial_state, action:any): StoreState => {\r\n   \r\n    switch (action.type) {\r\n      case MODEL_CHANGE:\r\n        return {\r\n          ...state,\r\n          model : action.model\r\n        };\r\n      case GRAPH_CHANGE:\r\n        return {\r\n          ...state,\r\n          graph : action.graph\r\n        };\r\n      case INIT_MODEL_LIST:\r\n        return {\r\n          ...state,\r\n          modelList: action.modelList\r\n        };\r\n      case DATASET_ID_CHANGE:\r\n        return {\r\n          ...state,\r\n          dataset_id: action.dataset_id,\r\n        };\r\n      case EXPLAIN_METHOD_ID_CHANGE:\r\n        return {\r\n          ...state,\r\n          explain_id: action.explain_id\r\n        };\r\n      case INIT_DATASET_LIST:\r\n        return {\r\n          ...state,\r\n          datasetList: action.datasetList\r\n        };\r\n      case INIT_EXPLAIN_LIST:\r\n        return {\r\n          ...state,\r\n          explainList: action.explainList\r\n        };\r\n      case INIT_GRAPH_LIST:\r\n          return {\r\n            ...state,\r\n            graphList: action.graphList\r\n          };\r\n      case FILTERS_CHANGE:\r\n        \r\n         //console.log(\"Filters Change!\", action.filters);\r\n          return {\r\n            ...state,\r\n            refreshnumber: state.refreshnumber + 1,\r\n            filters: action.filters\r\n          }\r\n      case SELECTED_NODE_ID_LIST_CHANGE:\r\n        //console.log(\"selectedNodeIdList Store State Change\",action.selectedNodeIdList);\r\n        return {\r\n          ...state,\r\n          selectedNodeIdList: action.selectedNodeIdList\r\n        }\r\n      case SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE:\r\n        return {\r\n          ...state,\r\n          selectedMessagePassingNodeIdList: action.selectedMessagePassingNodeIdList\r\n        }\r\n      case SHOW_SOURCE_CHANGE:\r\n        return {\r\n          ...state,\r\n          showSource: action.showSource\r\n        }\r\n      case SPECIFIC_NODE_ID_LIST_CHANGE:\r\n        //console.log(\"SpecificNodeIdListChange\",  action.specificNodeIdList);\r\n        return {\r\n          ...state,\r\n          specificNodeIdList: action.specificNodeIdList\r\n        }\r\n      case SELECT_INSPECT_NODE_CHANGE:\r\n        //console.log(\"Select inspect node change\", action.select_inspect_node);\r\n        return {\r\n          ...state,\r\n          select_inspect_node: action.select_inspect_node\r\n        }\r\n      case CLEAR_ID_INFO:\r\n        return {\r\n          ...state,\r\n          filters: {},\r\n          selectedNodeIdList: [],\r\n          selectedMessagePassingNodeIdList: [],\r\n          specificNodeIdList: [],\r\n          select_inspect_node : 0\r\n        }\r\n      case PREV_GRAPH_JSON_CHANGE:\r\n        return {\r\n          ...state,\r\n          prevGraphJson: action.prevGraphJson\r\n        }\r\n      case MATRIX_FILTERS_CHANGE:\r\n        return {\r\n          ...state,\r\n          matrixFilters: action.matrixFilters\r\n        }\r\n      case MATRIX_ROW_FILTERS_CHANGE:\r\n        //console.log(\"rowmatrix\",action.matrixRowFilters);\r\n        return {\r\n          ...state,\r\n          matrixRowFilters: action.matrixRowFilters\r\n        }\r\n      case INSPECT_CATEGORY_LIST_CHANGE:\r\n        console.log(\"CategoryList\", action.inspectCategoryList);\r\n        return {\r\n          ...state,\r\n          InspectCategoryList: action.inspectCategoryList\r\n        }\r\n      case PSJSON_CHANGE:\r\n        return {\r\n          ...state,\r\n          PSJson: action.PSJson\r\n        }\r\n      case PSSELECTEDNODES_CHANGE:\r\n        return {\r\n          ...state,\r\n          PSSelectedNodes: action.PSSelectedNodes\r\n        }\r\n      case EXTENDED_MODE_CHANGE:\r\n        return {\r\n          ...state,\r\n          extendedMode: action.extendedMode\r\n        }\r\n      case PROJECTIONVIEWSELECTEDNODES_CHANGE:\r\n        return {\r\n          ...state,\r\n          ProjectionViewSelectedNodes: action.ProjectionViewSelectedNodes\r\n        }\r\n      case PROJECTIONVIEWTOTALNODENUM_CHANGE:\r\n        return {\r\n          ...state,\r\n          ProjectionViewTotalNodeNum: action.ProjectionViewTotalNodeNum\r\n        }\r\n      case PSSETTINGMODAL_VISIBLE_CHANGE:\r\n        return {\r\n          ...state,\r\n          PSSettingsModal_visible: action.PSSettingsModal_visible\r\n        }\r\n      case PSDIMENSIONS_CHANGE:\r\n        return {\r\n          ...state,\r\n          PSDimensions: action.PSDimensions\r\n        }\r\n      case PROJECTIONVIEWSELECTEDNODES_CHANGE:\r\n        return {\r\n          ...state,\r\n          ProjectionViewSettingsModal_visible: action.ProjectionViewSettingsModal_visible\r\n        }\r\n      case GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE:\r\n        return {\r\n          ...state,\r\n          GraphViewSettingsModal_visible: action.GraphViewSettingsModal_visible\r\n        }\r\n      case FEATUREMATRIXVIEWSETTINGMODAL_VISIBLE_CHANGE:\r\n        return {\r\n          ...state,\r\n          FeatureMatrixViewSettingsModal_visible: action.FeatureMatrixViewSettingsModal_visible\r\n        }\r\n      case GRAPHVIEWSTATE_CHANGE:\r\n        return {\r\n          ...state,\r\n          GraphViewState: action.GraphViewState\r\n        }\r\n      case KVALUE_CHANGE:\r\n        return {\r\n          ...state,\r\n          K_value: action.K_value\r\n        }\r\n      case SELECTEDMODELS_CHANGE:\r\n        return {\r\n          ...state,\r\n          selected_models_list: action.selected_models_list\r\n        }\r\n      case MODELSLIST_CHANGE:\r\n        return {\r\n          ...state,\r\n          models_list: action.models_list\r\n        }\r\n      case CHANGE_LOADING_DATASET:\r\n        return {\r\n          ...state,\r\n          loading_dataset: action.loading_dataset\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n//import { DECREMENT, INCREMENT } from '../constants';\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducer'; \r\nimport \"./react_grid_layout_style.css\"\r\nimport \"./react_resizable_styles.css\"\r\n// 1、创建 store\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(// 2、然后使用react-redux的Provider将props与容器连通起来\r\n    <Provider store={ store }>\r\n        <App />\r\n    </Provider> \r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}